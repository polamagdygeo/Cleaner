

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Sat May 25 18:43:31 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,delta=2
    34                           	psect	text21,local,class=CODE,merge=1,delta=2
    35                           	psect	text22,local,class=CODE,merge=1,delta=2
    36                           	psect	text23,local,class=CODE,merge=1,delta=2
    37                           	psect	text24,local,class=CODE,merge=1,delta=2
    38                           	psect	text25,local,class=CODE,merge=1,delta=2
    39                           	psect	text26,local,class=CODE,merge=1,delta=2
    40                           	psect	text27,local,class=CODE,merge=1,delta=2
    41                           	psect	text28,local,class=CODE,merge=1,delta=2
    42                           	psect	text29,local,class=CODE,merge=1,delta=2
    43                           	psect	text30,local,class=CODE,merge=1,delta=2
    44                           	psect	text31,local,class=CODE,merge=1,delta=2
    45                           	psect	text32,local,class=CODE,merge=1,delta=2
    46                           	psect	text33,local,class=CODE,merge=1,delta=2
    47                           	psect	text34,local,class=CODE,merge=1,delta=2
    48                           	psect	text35,local,class=CODE,merge=1,delta=2,group=1
    49                           	psect	text36,local,class=CODE,merge=1,delta=2
    50                           	psect	text37,local,class=CODE,merge=1,delta=2
    51                           	psect	text38,local,class=CODE,merge=1,delta=2
    52                           	psect	text39,local,class=CODE,merge=1,delta=2
    53                           	psect	text40,local,class=CODE,merge=1,delta=2
    54                           	psect	text41,local,class=CODE,merge=1,delta=2
    55                           	psect	text42,local,class=CODE,merge=1,delta=2
    56                           	psect	text43,local,class=CODE,merge=1,delta=2
    57                           	psect	text44,local,class=CODE,merge=1,delta=2
    58                           	psect	text45,local,class=CODE,merge=1,delta=2
    59                           	psect	text46,local,class=CODE,merge=1,delta=2
    60                           	psect	text47,local,class=CODE,merge=1,delta=2
    61                           	psect	intentry,global,class=CODE,delta=2
    62                           	psect	text48,local,class=CODE,merge=1,delta=2
    63                           	psect	text49,local,class=CODE,merge=1,delta=2
    64                           	psect	text50,local,class=CODE,merge=1,delta=2
    65                           	dabs	1,0x7E,2
    66  0000                     
    67                           ; Version 2.05
    68                           ; Generated 20/12/2018 GMT
    69                           ; 
    70                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    71                           ; All rights reserved.
    72                           ; 
    73                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    74                           ; 
    75                           ; Redistribution and use in source and binary forms, with or without modification, are
    76                           ; permitted provided that the following conditions are met:
    77                           ; 
    78                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    79                           ;        conditions and the following disclaimer.
    80                           ; 
    81                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    82                           ;        of conditions and the following disclaimer in the documentation and/or other
    83                           ;        materials provided with the distribution.
    84                           ; 
    85                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    86                           ;        software without specific prior written permission.
    87                           ; 
    88                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    89                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    90                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    91                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    92                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    93                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    94                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    95                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    96                           ; 
    97                           ; 
    98                           ; Code-generator required, PIC16F877A Definitions
    99                           ; 
   100                           ; SFR Addresses
   101  0000                     	;# 
   102  0001                     	;# 
   103  0002                     	;# 
   104  0003                     	;# 
   105  0004                     	;# 
   106  0005                     	;# 
   107  0006                     	;# 
   108  0007                     	;# 
   109  0008                     	;# 
   110  0009                     	;# 
   111  000A                     	;# 
   112  000B                     	;# 
   113  000C                     	;# 
   114  000D                     	;# 
   115  000E                     	;# 
   116  000E                     	;# 
   117  000F                     	;# 
   118  0010                     	;# 
   119  0011                     	;# 
   120  0012                     	;# 
   121  0013                     	;# 
   122  0014                     	;# 
   123  0015                     	;# 
   124  0015                     	;# 
   125  0016                     	;# 
   126  0017                     	;# 
   127  0018                     	;# 
   128  0019                     	;# 
   129  001A                     	;# 
   130  001B                     	;# 
   131  001B                     	;# 
   132  001C                     	;# 
   133  001D                     	;# 
   134  001E                     	;# 
   135  001F                     	;# 
   136  0081                     	;# 
   137  0085                     	;# 
   138  0086                     	;# 
   139  0087                     	;# 
   140  0088                     	;# 
   141  0089                     	;# 
   142  008C                     	;# 
   143  008D                     	;# 
   144  008E                     	;# 
   145  0091                     	;# 
   146  0092                     	;# 
   147  0093                     	;# 
   148  0094                     	;# 
   149  0098                     	;# 
   150  0099                     	;# 
   151  009C                     	;# 
   152  009D                     	;# 
   153  009E                     	;# 
   154  009F                     	;# 
   155  010C                     	;# 
   156  010D                     	;# 
   157  010E                     	;# 
   158  010F                     	;# 
   159  018C                     	;# 
   160  018D                     	;# 
   161  0000                     	;# 
   162  0001                     	;# 
   163  0002                     	;# 
   164  0003                     	;# 
   165  0004                     	;# 
   166  0005                     	;# 
   167  0006                     	;# 
   168  0007                     	;# 
   169  0008                     	;# 
   170  0009                     	;# 
   171  000A                     	;# 
   172  000B                     	;# 
   173  000C                     	;# 
   174  000D                     	;# 
   175  000E                     	;# 
   176  000E                     	;# 
   177  000F                     	;# 
   178  0010                     	;# 
   179  0011                     	;# 
   180  0012                     	;# 
   181  0013                     	;# 
   182  0014                     	;# 
   183  0015                     	;# 
   184  0015                     	;# 
   185  0016                     	;# 
   186  0017                     	;# 
   187  0018                     	;# 
   188  0019                     	;# 
   189  001A                     	;# 
   190  001B                     	;# 
   191  001B                     	;# 
   192  001C                     	;# 
   193  001D                     	;# 
   194  001E                     	;# 
   195  001F                     	;# 
   196  0081                     	;# 
   197  0085                     	;# 
   198  0086                     	;# 
   199  0087                     	;# 
   200  0088                     	;# 
   201  0089                     	;# 
   202  008C                     	;# 
   203  008D                     	;# 
   204  008E                     	;# 
   205  0091                     	;# 
   206  0092                     	;# 
   207  0093                     	;# 
   208  0094                     	;# 
   209  0098                     	;# 
   210  0099                     	;# 
   211  009C                     	;# 
   212  009D                     	;# 
   213  009E                     	;# 
   214  009F                     	;# 
   215  010C                     	;# 
   216  010D                     	;# 
   217  010E                     	;# 
   218  010F                     	;# 
   219  018C                     	;# 
   220  018D                     	;# 
   221  0000                     	;# 
   222  0001                     	;# 
   223  0002                     	;# 
   224  0003                     	;# 
   225  0004                     	;# 
   226  0005                     	;# 
   227  0006                     	;# 
   228  0007                     	;# 
   229  0008                     	;# 
   230  0009                     	;# 
   231  000A                     	;# 
   232  000B                     	;# 
   233  000C                     	;# 
   234  000D                     	;# 
   235  000E                     	;# 
   236  000E                     	;# 
   237  000F                     	;# 
   238  0010                     	;# 
   239  0011                     	;# 
   240  0012                     	;# 
   241  0013                     	;# 
   242  0014                     	;# 
   243  0015                     	;# 
   244  0015                     	;# 
   245  0016                     	;# 
   246  0017                     	;# 
   247  0018                     	;# 
   248  0019                     	;# 
   249  001A                     	;# 
   250  001B                     	;# 
   251  001B                     	;# 
   252  001C                     	;# 
   253  001D                     	;# 
   254  001E                     	;# 
   255  001F                     	;# 
   256  0081                     	;# 
   257  0085                     	;# 
   258  0086                     	;# 
   259  0087                     	;# 
   260  0088                     	;# 
   261  0089                     	;# 
   262  008C                     	;# 
   263  008D                     	;# 
   264  008E                     	;# 
   265  0091                     	;# 
   266  0092                     	;# 
   267  0093                     	;# 
   268  0094                     	;# 
   269  0098                     	;# 
   270  0099                     	;# 
   271  009C                     	;# 
   272  009D                     	;# 
   273  009E                     	;# 
   274  009F                     	;# 
   275  010C                     	;# 
   276  010D                     	;# 
   277  010E                     	;# 
   278  010F                     	;# 
   279  018C                     	;# 
   280  018D                     	;# 
   281  0000                     	;# 
   282  0001                     	;# 
   283  0002                     	;# 
   284  0003                     	;# 
   285  0004                     	;# 
   286  0005                     	;# 
   287  0006                     	;# 
   288  0007                     	;# 
   289  0008                     	;# 
   290  0009                     	;# 
   291  000A                     	;# 
   292  000B                     	;# 
   293  000C                     	;# 
   294  000D                     	;# 
   295  000E                     	;# 
   296  000E                     	;# 
   297  000F                     	;# 
   298  0010                     	;# 
   299  0011                     	;# 
   300  0012                     	;# 
   301  0013                     	;# 
   302  0014                     	;# 
   303  0015                     	;# 
   304  0015                     	;# 
   305  0016                     	;# 
   306  0017                     	;# 
   307  0018                     	;# 
   308  0019                     	;# 
   309  001A                     	;# 
   310  001B                     	;# 
   311  001B                     	;# 
   312  001C                     	;# 
   313  001D                     	;# 
   314  001E                     	;# 
   315  001F                     	;# 
   316  0081                     	;# 
   317  0085                     	;# 
   318  0086                     	;# 
   319  0087                     	;# 
   320  0088                     	;# 
   321  0089                     	;# 
   322  008C                     	;# 
   323  008D                     	;# 
   324  008E                     	;# 
   325  0091                     	;# 
   326  0092                     	;# 
   327  0093                     	;# 
   328  0094                     	;# 
   329  0098                     	;# 
   330  0099                     	;# 
   331  009C                     	;# 
   332  009D                     	;# 
   333  009E                     	;# 
   334  009F                     	;# 
   335  010C                     	;# 
   336  010D                     	;# 
   337  010E                     	;# 
   338  010F                     	;# 
   339  018C                     	;# 
   340  018D                     	;# 
   341  0000                     	;# 
   342  0001                     	;# 
   343  0002                     	;# 
   344  0003                     	;# 
   345  0004                     	;# 
   346  0005                     	;# 
   347  0006                     	;# 
   348  0007                     	;# 
   349  0008                     	;# 
   350  0009                     	;# 
   351  000A                     	;# 
   352  000B                     	;# 
   353  000C                     	;# 
   354  000D                     	;# 
   355  000E                     	;# 
   356  000E                     	;# 
   357  000F                     	;# 
   358  0010                     	;# 
   359  0011                     	;# 
   360  0012                     	;# 
   361  0013                     	;# 
   362  0014                     	;# 
   363  0015                     	;# 
   364  0015                     	;# 
   365  0016                     	;# 
   366  0017                     	;# 
   367  0018                     	;# 
   368  0019                     	;# 
   369  001A                     	;# 
   370  001B                     	;# 
   371  001B                     	;# 
   372  001C                     	;# 
   373  001D                     	;# 
   374  001E                     	;# 
   375  001F                     	;# 
   376  0081                     	;# 
   377  0085                     	;# 
   378  0086                     	;# 
   379  0087                     	;# 
   380  0088                     	;# 
   381  0089                     	;# 
   382  008C                     	;# 
   383  008D                     	;# 
   384  008E                     	;# 
   385  0091                     	;# 
   386  0092                     	;# 
   387  0093                     	;# 
   388  0094                     	;# 
   389  0098                     	;# 
   390  0099                     	;# 
   391  009C                     	;# 
   392  009D                     	;# 
   393  009E                     	;# 
   394  009F                     	;# 
   395  010C                     	;# 
   396  010D                     	;# 
   397  010E                     	;# 
   398  010F                     	;# 
   399  018C                     	;# 
   400  018D                     	;# 
   401  0000                     	;# 
   402  0001                     	;# 
   403  0002                     	;# 
   404  0003                     	;# 
   405  0004                     	;# 
   406  0005                     	;# 
   407  0006                     	;# 
   408  0007                     	;# 
   409  0008                     	;# 
   410  0009                     	;# 
   411  000A                     	;# 
   412  000B                     	;# 
   413  000C                     	;# 
   414  000D                     	;# 
   415  000E                     	;# 
   416  000E                     	;# 
   417  000F                     	;# 
   418  0010                     	;# 
   419  0011                     	;# 
   420  0012                     	;# 
   421  0013                     	;# 
   422  0014                     	;# 
   423  0015                     	;# 
   424  0015                     	;# 
   425  0016                     	;# 
   426  0017                     	;# 
   427  0018                     	;# 
   428  0019                     	;# 
   429  001A                     	;# 
   430  001B                     	;# 
   431  001B                     	;# 
   432  001C                     	;# 
   433  001D                     	;# 
   434  001E                     	;# 
   435  001F                     	;# 
   436  0081                     	;# 
   437  0085                     	;# 
   438  0086                     	;# 
   439  0087                     	;# 
   440  0088                     	;# 
   441  0089                     	;# 
   442  008C                     	;# 
   443  008D                     	;# 
   444  008E                     	;# 
   445  0091                     	;# 
   446  0092                     	;# 
   447  0093                     	;# 
   448  0094                     	;# 
   449  0098                     	;# 
   450  0099                     	;# 
   451  009C                     	;# 
   452  009D                     	;# 
   453  009E                     	;# 
   454  009F                     	;# 
   455  010C                     	;# 
   456  010D                     	;# 
   457  010E                     	;# 
   458  010F                     	;# 
   459  018C                     	;# 
   460  018D                     	;# 
   461  0000                     	;# 
   462  0001                     	;# 
   463  0002                     	;# 
   464  0003                     	;# 
   465  0004                     	;# 
   466  0005                     	;# 
   467  0006                     	;# 
   468  0007                     	;# 
   469  0008                     	;# 
   470  0009                     	;# 
   471  000A                     	;# 
   472  000B                     	;# 
   473  000C                     	;# 
   474  000D                     	;# 
   475  000E                     	;# 
   476  000E                     	;# 
   477  000F                     	;# 
   478  0010                     	;# 
   479  0011                     	;# 
   480  0012                     	;# 
   481  0013                     	;# 
   482  0014                     	;# 
   483  0015                     	;# 
   484  0015                     	;# 
   485  0016                     	;# 
   486  0017                     	;# 
   487  0018                     	;# 
   488  0019                     	;# 
   489  001A                     	;# 
   490  001B                     	;# 
   491  001B                     	;# 
   492  001C                     	;# 
   493  001D                     	;# 
   494  001E                     	;# 
   495  001F                     	;# 
   496  0081                     	;# 
   497  0085                     	;# 
   498  0086                     	;# 
   499  0087                     	;# 
   500  0088                     	;# 
   501  0089                     	;# 
   502  008C                     	;# 
   503  008D                     	;# 
   504  008E                     	;# 
   505  0091                     	;# 
   506  0092                     	;# 
   507  0093                     	;# 
   508  0094                     	;# 
   509  0098                     	;# 
   510  0099                     	;# 
   511  009C                     	;# 
   512  009D                     	;# 
   513  009E                     	;# 
   514  009F                     	;# 
   515  010C                     	;# 
   516  010D                     	;# 
   517  010E                     	;# 
   518  010F                     	;# 
   519  018C                     	;# 
   520  018D                     	;# 
   521  0000                     	;# 
   522  0001                     	;# 
   523  0002                     	;# 
   524  0003                     	;# 
   525  0004                     	;# 
   526  0005                     	;# 
   527  0006                     	;# 
   528  0007                     	;# 
   529  0008                     	;# 
   530  0009                     	;# 
   531  000A                     	;# 
   532  000B                     	;# 
   533  000C                     	;# 
   534  000D                     	;# 
   535  000E                     	;# 
   536  000E                     	;# 
   537  000F                     	;# 
   538  0010                     	;# 
   539  0011                     	;# 
   540  0012                     	;# 
   541  0013                     	;# 
   542  0014                     	;# 
   543  0015                     	;# 
   544  0015                     	;# 
   545  0016                     	;# 
   546  0017                     	;# 
   547  0018                     	;# 
   548  0019                     	;# 
   549  001A                     	;# 
   550  001B                     	;# 
   551  001B                     	;# 
   552  001C                     	;# 
   553  001D                     	;# 
   554  001E                     	;# 
   555  001F                     	;# 
   556  0081                     	;# 
   557  0085                     	;# 
   558  0086                     	;# 
   559  0087                     	;# 
   560  0088                     	;# 
   561  0089                     	;# 
   562  008C                     	;# 
   563  008D                     	;# 
   564  008E                     	;# 
   565  0091                     	;# 
   566  0092                     	;# 
   567  0093                     	;# 
   568  0094                     	;# 
   569  0098                     	;# 
   570  0099                     	;# 
   571  009C                     	;# 
   572  009D                     	;# 
   573  009E                     	;# 
   574  009F                     	;# 
   575  010C                     	;# 
   576  010D                     	;# 
   577  010E                     	;# 
   578  010F                     	;# 
   579  018C                     	;# 
   580  018D                     	;# 
   581  0000                     	;# 
   582  0001                     	;# 
   583  0002                     	;# 
   584  0003                     	;# 
   585  0004                     	;# 
   586  0005                     	;# 
   587  0006                     	;# 
   588  0007                     	;# 
   589  0008                     	;# 
   590  0009                     	;# 
   591  000A                     	;# 
   592  000B                     	;# 
   593  000C                     	;# 
   594  000D                     	;# 
   595  000E                     	;# 
   596  000E                     	;# 
   597  000F                     	;# 
   598  0010                     	;# 
   599  0011                     	;# 
   600  0012                     	;# 
   601  0013                     	;# 
   602  0014                     	;# 
   603  0015                     	;# 
   604  0015                     	;# 
   605  0016                     	;# 
   606  0017                     	;# 
   607  0018                     	;# 
   608  0019                     	;# 
   609  001A                     	;# 
   610  001B                     	;# 
   611  001B                     	;# 
   612  001C                     	;# 
   613  001D                     	;# 
   614  001E                     	;# 
   615  001F                     	;# 
   616  0081                     	;# 
   617  0085                     	;# 
   618  0086                     	;# 
   619  0087                     	;# 
   620  0088                     	;# 
   621  0089                     	;# 
   622  008C                     	;# 
   623  008D                     	;# 
   624  008E                     	;# 
   625  0091                     	;# 
   626  0092                     	;# 
   627  0093                     	;# 
   628  0094                     	;# 
   629  0098                     	;# 
   630  0099                     	;# 
   631  009C                     	;# 
   632  009D                     	;# 
   633  009E                     	;# 
   634  009F                     	;# 
   635  010C                     	;# 
   636  010D                     	;# 
   637  010E                     	;# 
   638  010F                     	;# 
   639  018C                     	;# 
   640  018D                     	;# 
   641  0000                     	;# 
   642  0001                     	;# 
   643  0002                     	;# 
   644  0003                     	;# 
   645  0004                     	;# 
   646  0005                     	;# 
   647  0006                     	;# 
   648  0007                     	;# 
   649  0008                     	;# 
   650  0009                     	;# 
   651  000A                     	;# 
   652  000B                     	;# 
   653  000C                     	;# 
   654  000D                     	;# 
   655  000E                     	;# 
   656  000E                     	;# 
   657  000F                     	;# 
   658  0010                     	;# 
   659  0011                     	;# 
   660  0012                     	;# 
   661  0013                     	;# 
   662  0014                     	;# 
   663  0015                     	;# 
   664  0015                     	;# 
   665  0016                     	;# 
   666  0017                     	;# 
   667  0018                     	;# 
   668  0019                     	;# 
   669  001A                     	;# 
   670  001B                     	;# 
   671  001B                     	;# 
   672  001C                     	;# 
   673  001D                     	;# 
   674  001E                     	;# 
   675  001F                     	;# 
   676  0081                     	;# 
   677  0085                     	;# 
   678  0086                     	;# 
   679  0087                     	;# 
   680  0088                     	;# 
   681  0089                     	;# 
   682  008C                     	;# 
   683  008D                     	;# 
   684  008E                     	;# 
   685  0091                     	;# 
   686  0092                     	;# 
   687  0093                     	;# 
   688  0094                     	;# 
   689  0098                     	;# 
   690  0099                     	;# 
   691  009C                     	;# 
   692  009D                     	;# 
   693  009E                     	;# 
   694  009F                     	;# 
   695  010C                     	;# 
   696  010D                     	;# 
   697  010E                     	;# 
   698  010F                     	;# 
   699  018C                     	;# 
   700  018D                     	;# 
   701  0000                     	;# 
   702  0001                     	;# 
   703  0002                     	;# 
   704  0003                     	;# 
   705  0004                     	;# 
   706  0005                     	;# 
   707  0006                     	;# 
   708  0007                     	;# 
   709  0008                     	;# 
   710  0009                     	;# 
   711  000A                     	;# 
   712  000B                     	;# 
   713  000C                     	;# 
   714  000D                     	;# 
   715  000E                     	;# 
   716  000E                     	;# 
   717  000F                     	;# 
   718  0010                     	;# 
   719  0011                     	;# 
   720  0012                     	;# 
   721  0013                     	;# 
   722  0014                     	;# 
   723  0015                     	;# 
   724  0015                     	;# 
   725  0016                     	;# 
   726  0017                     	;# 
   727  0018                     	;# 
   728  0019                     	;# 
   729  001A                     	;# 
   730  001B                     	;# 
   731  001B                     	;# 
   732  001C                     	;# 
   733  001D                     	;# 
   734  001E                     	;# 
   735  001F                     	;# 
   736  0081                     	;# 
   737  0085                     	;# 
   738  0086                     	;# 
   739  0087                     	;# 
   740  0088                     	;# 
   741  0089                     	;# 
   742  008C                     	;# 
   743  008D                     	;# 
   744  008E                     	;# 
   745  0091                     	;# 
   746  0092                     	;# 
   747  0093                     	;# 
   748  0094                     	;# 
   749  0098                     	;# 
   750  0099                     	;# 
   751  009C                     	;# 
   752  009D                     	;# 
   753  009E                     	;# 
   754  009F                     	;# 
   755  010C                     	;# 
   756  010D                     	;# 
   757  010E                     	;# 
   758  010F                     	;# 
   759  018C                     	;# 
   760  018D                     	;# 
   761  0000                     	;# 
   762  0001                     	;# 
   763  0002                     	;# 
   764  0003                     	;# 
   765  0004                     	;# 
   766  0005                     	;# 
   767  0006                     	;# 
   768  0007                     	;# 
   769  0008                     	;# 
   770  0009                     	;# 
   771  000A                     	;# 
   772  000B                     	;# 
   773  000C                     	;# 
   774  000D                     	;# 
   775  000E                     	;# 
   776  000E                     	;# 
   777  000F                     	;# 
   778  0010                     	;# 
   779  0011                     	;# 
   780  0012                     	;# 
   781  0013                     	;# 
   782  0014                     	;# 
   783  0015                     	;# 
   784  0015                     	;# 
   785  0016                     	;# 
   786  0017                     	;# 
   787  0018                     	;# 
   788  0019                     	;# 
   789  001A                     	;# 
   790  001B                     	;# 
   791  001B                     	;# 
   792  001C                     	;# 
   793  001D                     	;# 
   794  001E                     	;# 
   795  001F                     	;# 
   796  0081                     	;# 
   797  0085                     	;# 
   798  0086                     	;# 
   799  0087                     	;# 
   800  0088                     	;# 
   801  0089                     	;# 
   802  008C                     	;# 
   803  008D                     	;# 
   804  008E                     	;# 
   805  0091                     	;# 
   806  0092                     	;# 
   807  0093                     	;# 
   808  0094                     	;# 
   809  0098                     	;# 
   810  0099                     	;# 
   811  009C                     	;# 
   812  009D                     	;# 
   813  009E                     	;# 
   814  009F                     	;# 
   815  010C                     	;# 
   816  010D                     	;# 
   817  010E                     	;# 
   818  010F                     	;# 
   819  018C                     	;# 
   820  018D                     	;# 
   821                           
   822                           	psect	idataBANK0
   823  0D96                     __pidataBANK0:	
   824                           
   825                           ;initializer for _Dust_Button_Pressing_Time
   826  0D96  3414               	retlw	20
   827  0D97  3400               	retlw	0
   828                           
   829                           ;initializer for _Speed_Level
   830  0D98  3401               	retlw	1
   831                           
   832                           ;initializer for _Actual_Angle
   833  0D99  34AA               	retlw	170
   834                           
   835                           ;initializer for _OutputAngle
   836  0D9A  34AA               	retlw	170
   837                           
   838                           	psect	strings
   839  0800                     __pstrings:	
   840  0800                     stringtab:	
   841  0800                     __stringtab:	
   842  0800                     stringcode:	
   843                           ;	String table - string pointers are 1 byte each
   844                           
   845  0800                     stringdir:	
   846  0800  3008               	movlw	high stringdir
   847  0801  008A               	movwf	10
   848  0802  0804               	movf	4,w
   849  0803  0A84               	incf	4,f
   850  0804  0782               	addwf	2,f
   851  0805                     __stringbase:	
   852  0805  3400               	retlw	0
   853  0806                     __end_of__stringtab:	
   854  0806                     _Symbol_Code_Array:	
   855  0806  3400               	retlw	0
   856  0807  3408               	retlw	8
   857  0808  3448               	retlw	72
   858  0809  3449               	retlw	73
   859  080A                     __end_of_Symbol_Code_Array:	
   860  000E                     _TMR1L	set	14
   861  000F                     _TMR1H	set	15
   862  0001                     _TMR0	set	1
   863  0009                     _PORTE	set	9
   864  0008                     _PORTD	set	8
   865  0007                     _PORTC	set	7
   866  0006                     _PORTB	set	6
   867  0005                     _PORTA	set	5
   868  0080                     _TMR1ON	set	128
   869  0060                     _TMR1IF	set	96
   870  005A                     _TMR0IF	set	90
   871  0085                     _T1CKPS1	set	133
   872  0084                     _T1CKPS0	set	132
   873  005D                     _TMR0IE	set	93
   874  0081                     _TMR1CS	set	129
   875  005F                     _GIE	set	95
   876  005E                     _PEIE	set	94
   877  0089                     _TRISE	set	137
   878  0088                     _TRISD	set	136
   879  0087                     _TRISC	set	135
   880  0086                     _TRISB	set	134
   881  0085                     _TRISA	set	133
   882  040B                     _PSA	set	1035
   883  040A                     _PS2	set	1034
   884  0409                     _PS1	set	1033
   885  0408                     _PS0	set	1032
   886  0460                     _TMR1IE	set	1120
   887  040D                     _T0CS	set	1037
   888                           
   889                           ; #config settings
   890  0000                     
   891                           	psect	cinit
   892  0013                     start_initialization:	
   893  0013                     __initialization:	
   894                           
   895                           ; Initialize objects allocated to BANK0
   896  0013  120A  158A  2596  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   897  0018  00C7               	movwf	__pdataBANK0& (0+127)
   898  0019  120A  158A  2597  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   899  001E  00C8               	movwf	(__pdataBANK0+1)& (0+127)
   900  001F  120A  158A  2598  120A  118A  	fcall	__pidataBANK0+2	;fetch initializer
   901  0024  00C9               	movwf	(__pdataBANK0+2)& (0+127)
   902  0025  120A  158A  2599  120A  118A  	fcall	__pidataBANK0+3	;fetch initializer
   903  002A  00CA               	movwf	(__pdataBANK0+3)& (0+127)
   904  002B  120A  158A  259A  120A  118A  	fcall	__pidataBANK0+4	;fetch initializer
   905  0030  00CB               	movwf	(__pdataBANK0+4)& (0+127)
   906                           
   907                           ; Clear objects allocated to BANK0
   908  0031  1383               	bcf	3,7	;select IRP bank0
   909  0032  3034               	movlw	low __pbssBANK0
   910  0033  0084               	movwf	4
   911  0034  3047               	movlw	low (__pbssBANK0+19)
   912  0035  120A  158A  25A3   	fcall	clear_ram0
   913                           
   914                           ; Clear objects allocated to COMMON
   915  0038  01FD               	clrf	__pbssCOMMON& (0+127)
   916  0039                     end_of_initialization:	
   917                           ;End of C runtime variable initialization code
   918                           
   919  0039                     __end_of__initialization:	
   920  0039  0183               	clrf	3
   921  003A  120A  118A  2C5D   	ljmp	_main	;jump to C main() function
   922                           
   923                           	psect	bssCOMMON
   924  007D                     __pbssCOMMON:	
   925  007D                     _Target_Angle:	
   926  007D                     	ds	1
   927                           
   928                           	psect	bssBANK0
   929  0034                     __pbssBANK0:	
   930  0034                     _Segments_Symbols_Array:	
   931  0034                     	ds	3
   932  0037                     _ButtonPrevSample:	
   933  0037                     	ds	3
   934  003A                     _ButtonState:	
   935  003A                     	ds	3
   936  003D                     _Dust_Bag_State:	
   937  003D                     	ds	1
   938  003E                     SSD_Update@Curr_Active_SSD:	
   939  003E                     	ds	1
   940  003F                     _Harmonic_Angle:	
   941  003F                     	ds	1
   942  0040                     _Current_Motor_State:	
   943  0040                     	ds	1
   944  0041                     OS_Schedule@Motor_HarmonicReduction_Counter:	
   945  0041                     	ds	1
   946  0042                     OS_Schedule@Motor_SoftSwitch_Counter:	
   947  0042                     	ds	1
   948  0043                     OS_Schedule@VC_Counter:	
   949  0043                     	ds	1
   950  0044                     OS_Schedule@Display_Counter:	
   951  0044                     	ds	1
   952  0045                     OS_Schedule@Button_Counter:	
   953  0045                     	ds	1
   954  0046                     _tick_flag:	
   955  0046                     	ds	1
   956                           
   957                           	psect	dataBANK0
   958  0047                     __pdataBANK0:	
   959  0047                     _Dust_Button_Pressing_Time:	
   960  0047                     	ds	2
   961  0049                     _Speed_Level:	
   962  0049                     	ds	1
   963  004A                     _Actual_Angle:	
   964  004A                     	ds	1
   965  004B                     _OutputAngle:	
   966  004B                     	ds	1
   967                           
   968                           	psect	clrtext
   969  0DA3                     clear_ram0:	
   970                           ;	Called with FSR containing the base address, and
   971                           ;	W with the last address+1
   972                           
   973  0DA3  0064               	clrwdt	;clear the watchdog before getting into this loop
   974  0DA4                     clrloop0:	
   975  0DA4  0180               	clrf	0	;clear RAM location pointed to by FSR
   976  0DA5  0A84               	incf	4,f	;increment pointer
   977  0DA6  0604               	xorwf	4,w	;XOR with final address
   978  0DA7  1903               	btfsc	3,2	;have we reached the end yet?
   979  0DA8  3400               	retlw	0	;all done for this memory range, return
   980  0DA9  0604               	xorwf	4,w	;XOR again to restore value
   981  0DAA  2DA4               	goto	clrloop0	;do the next byte
   982                           
   983                           	psect	cstackCOMMON
   984  0070                     __pcstackCOMMON:	
   985  0070                     ?_Display_Init:	
   986  0070                     ?_Motor_Init:	
   987                           ; 1 bytes @ 0x0
   988                           
   989  0070                     ?_VC_Init:	
   990                           ; 1 bytes @ 0x0
   991                           
   992  0070                     ?_TIME_Init:	
   993                           ; 1 bytes @ 0x0
   994                           
   995  0070                     ?_OS_Init:	
   996                           ; 1 bytes @ 0x0
   997                           
   998  0070                     ?_OS_Schedule:	
   999                           ; 1 bytes @ 0x0
  1000                           
  1001  0070                     ?_SSD_Update:	
  1002                           ; 1 bytes @ 0x0
  1003                           
  1004  0070                     ?_VC_Update:	
  1005                           ; 1 bytes @ 0x0
  1006                           
  1007  0070                     ?_Display_Update:	
  1008                           ; 1 bytes @ 0x0
  1009                           
  1010  0070                     ?_TIME_WaitTimeSandwich:	
  1011                           ; 1 bytes @ 0x0
  1012                           
  1013  0070                     ?_Motor_OutputUpdate:	
  1014                           ; 1 bytes @ 0x0
  1015                           
  1016  0070                     ?_Motor_SoftSwitchingUpdate:	
  1017                           ; 1 bytes @ 0x0
  1018                           
  1019  0070                     ?_Motor_HarmonicReductionUpdate:	
  1020                           ; 1 bytes @ 0x0
  1021                           
  1022  0070                     ?_Timer_ClearInterruptFlag:	
  1023                           ; 1 bytes @ 0x0
  1024                           
  1025  0070                     ?_Timer_Init:	
  1026                           ; 1 bytes @ 0x0
  1027                           
  1028  0070                     ?_VC_GetSpeedLevel:	
  1029                           ; 1 bytes @ 0x0
  1030                           
  1031  0070                     ?_VC_GetDustState:	
  1032                           ; 1 bytes @ 0x0
  1033                           
  1034  0070                     ?_Button_Init:	
  1035                           ; 1 bytes @ 0x0
  1036                           
  1037  0070                     ?_Button_GetState:	
  1038                           ; 1 bytes @ 0x0
  1039                           
  1040  0070                     ?_Button_Plus_Update:	
  1041                           ; 1 bytes @ 0x0
  1042                           
  1043  0070                     ?_Button_Minus_Update:	
  1044                           ; 1 bytes @ 0x0
  1045                           
  1046  0070                     ?_Button_Dust_Update:	
  1047                           ; 1 bytes @ 0x0
  1048                           
  1049  0070                     ?_Button_Update:	
  1050                           ; 1 bytes @ 0x0
  1051                           
  1052  0070                     ?_OS_Update:	
  1053                           ; 1 bytes @ 0x0
  1054                           
  1055  0070                     ?_Timer_CheckInterruptFlag:	
  1056                           ; 1 bytes @ 0x0
  1057                           
  1058  0070                     ?_Motor_SetTargetAngle:	
  1059                           ; 1 bytes @ 0x0
  1060                           
  1061  0070                     ?i1_Timer_ClearInterruptFlag:	
  1062                           ; 1 bytes @ 0x0
  1063                           
  1064  0070                     ??i1_Timer_ClearInterruptFlag:	
  1065                           ; 1 bytes @ 0x0
  1066                           
  1067  0070                     ?_main:	
  1068                           ; 1 bytes @ 0x0
  1069                           
  1070  0070                     ?i1___wmul:	
  1071                           ; 2 bytes @ 0x0
  1072                           
  1073  0070                     i1Timer_ClearInterruptFlag@timer:	
  1074                           ; 2 bytes @ 0x0
  1075                           
  1076  0070                     i1___wmul@multiplier:	
  1077                           ; 1 bytes @ 0x0
  1078                           
  1079                           
  1080                           ; 2 bytes @ 0x0
  1081  0070                     	ds	2
  1082  0072                     i1___wmul@multiplicand:	
  1083                           
  1084                           ; 2 bytes @ 0x2
  1085  0072                     	ds	2
  1086  0074                     ??i1___wmul:	
  1087  0074                     i1___wmul@product:	
  1088                           ; 1 bytes @ 0x4
  1089                           
  1090                           
  1091                           ; 2 bytes @ 0x4
  1092  0074                     	ds	2
  1093  0076                     ?i1_Timer_SetTimeMS:	
  1094  0076                     i1Timer_SetTimeMS@time:	
  1095                           ; 1 bytes @ 0x6
  1096                           
  1097                           
  1098                           ; 2 bytes @ 0x6
  1099  0076                     	ds	2
  1100  0078                     ??i1_Timer_SetTimeMS:	
  1101                           
  1102                           ; 1 bytes @ 0x8
  1103  0078                     	ds	2
  1104  007A                     i1Timer_SetTimeMS@timer:	
  1105                           
  1106                           ; 1 bytes @ 0xA
  1107  007A                     	ds	1
  1108  007B                     i1Timer_SetTimeMS@count_no:	
  1109                           
  1110                           ; 2 bytes @ 0xB
  1111  007B                     	ds	2
  1112                           
  1113                           	psect	cstackBANK0
  1114  0020                     __pcstackBANK0:	
  1115  0020                     ??_OS_Update:	
  1116                           
  1117                           ; 1 bytes @ 0x0
  1118  0020                     	ds	4
  1119  0024                     ?_GPIO_InitPin:	
  1120  0024                     ?_GPIO_GetPinState:	
  1121                           ; 1 bytes @ 0x4
  1122                           
  1123  0024                     ??_Display_Init:	
  1124                           ; 1 bytes @ 0x4
  1125                           
  1126  0024                     ??_VC_Init:	
  1127                           ; 1 bytes @ 0x4
  1128                           
  1129  0024                     ??_Motor_SoftSwitchingUpdate:	
  1130                           ; 1 bytes @ 0x4
  1131                           
  1132  0024                     ??_Motor_HarmonicReductionUpdate:	
  1133                           ; 1 bytes @ 0x4
  1134                           
  1135  0024                     ??_Timer_ClearInterruptFlag:	
  1136                           ; 1 bytes @ 0x4
  1137                           
  1138  0024                     ?_Timer_SetInterruptEn:	
  1139                           ; 1 bytes @ 0x4
  1140                           
  1141  0024                     ?_Timer_SetState:	
  1142                           ; 1 bytes @ 0x4
  1143                           
  1144  0024                     ??_VC_GetSpeedLevel:	
  1145                           ; 1 bytes @ 0x4
  1146                           
  1147  0024                     ??_VC_GetDustState:	
  1148                           ; 1 bytes @ 0x4
  1149                           
  1150  0024                     ?_SSD_SetSymbol:	
  1151                           ; 1 bytes @ 0x4
  1152                           
  1153  0024                     ??_Button_GetState:	
  1154                           ; 1 bytes @ 0x4
  1155                           
  1156  0024                     ?_GPIO_InitPort:	
  1157                           ; 1 bytes @ 0x4
  1158                           
  1159  0024                     ?_GPIO_SetPortState:	
  1160                           ; 1 bytes @ 0x4
  1161                           
  1162  0024                     ?_GPIO_SetPinState:	
  1163                           ; 1 bytes @ 0x4
  1164                           
  1165  0024                     ?_Timer_SetMode:	
  1166                           ; 1 bytes @ 0x4
  1167                           
  1168  0024                     ?_Timer_SetTimeUS:	
  1169                           ; 1 bytes @ 0x4
  1170                           
  1171  0024                     ??_Timer_CheckInterruptFlag:	
  1172                           ; 1 bytes @ 0x4
  1173                           
  1174  0024                     ??_Motor_SetTargetAngle:	
  1175                           ; 1 bytes @ 0x4
  1176                           
  1177  0024                     ?_Button_GetPressingTime:	
  1178                           ; 1 bytes @ 0x4
  1179                           
  1180  0024                     ?___wmul:	
  1181                           ; 2 bytes @ 0x4
  1182                           
  1183  0024                     Button_GetState@button:	
  1184                           ; 2 bytes @ 0x4
  1185                           
  1186  0024                     GPIO_InitPort@mask:	
  1187                           ; 1 bytes @ 0x4
  1188                           
  1189  0024                     GPIO_InitPin@pin:	
  1190                           ; 1 bytes @ 0x4
  1191                           
  1192  0024                     GPIO_GetPinState@pin:	
  1193                           ; 1 bytes @ 0x4
  1194                           
  1195  0024                     GPIO_SetPortState@mask:	
  1196                           ; 1 bytes @ 0x4
  1197                           
  1198  0024                     GPIO_SetPinState@pin:	
  1199                           ; 1 bytes @ 0x4
  1200                           
  1201  0024                     Timer_SetMode@mode:	
  1202                           ; 1 bytes @ 0x4
  1203                           
  1204  0024                     Timer_SetInterruptEn@state:	
  1205                           ; 1 bytes @ 0x4
  1206                           
  1207  0024                     Timer_ClearInterruptFlag@timer:	
  1208                           ; 1 bytes @ 0x4
  1209                           
  1210  0024                     Timer_CheckInterruptFlag@timer:	
  1211                           ; 1 bytes @ 0x4
  1212                           
  1213  0024                     Timer_SetState@state:	
  1214                           ; 1 bytes @ 0x4
  1215                           
  1216  0024                     SSD_SetSymbol@symbol:	
  1217                           ; 1 bytes @ 0x4
  1218                           
  1219  0024                     Timer_SetTimeUS@time:	
  1220                           ; 1 bytes @ 0x4
  1221                           
  1222  0024                     ___wmul@multiplier:	
  1223                           ; 2 bytes @ 0x4
  1224                           
  1225                           
  1226                           ; 2 bytes @ 0x4
  1227  0024                     	ds	1
  1228  0025                     ??_GPIO_GetPinState:	
  1229  0025                     ??_Timer_SetInterruptEn:	
  1230                           ; 1 bytes @ 0x5
  1231                           
  1232  0025                     ??_Timer_SetState:	
  1233                           ; 1 bytes @ 0x5
  1234                           
  1235  0025                     ??_SSD_SetSymbol:	
  1236                           ; 1 bytes @ 0x5
  1237                           
  1238  0025                     ??_Timer_SetMode:	
  1239                           ; 1 bytes @ 0x5
  1240                           
  1241  0025                     GPIO_InitPort@dir:	
  1242                           ; 1 bytes @ 0x5
  1243                           
  1244  0025                     GPIO_InitPin@dir:	
  1245                           ; 1 bytes @ 0x5
  1246                           
  1247  0025                     GPIO_SetPortState@state:	
  1248                           ; 1 bytes @ 0x5
  1249                           
  1250  0025                     GPIO_SetPinState@state:	
  1251                           ; 1 bytes @ 0x5
  1252                           
  1253  0025                     Timer_SetMode@timer:	
  1254                           ; 1 bytes @ 0x5
  1255                           
  1256  0025                     Timer_SetInterruptEn@timer:	
  1257                           ; 1 bytes @ 0x5
  1258                           
  1259  0025                     Timer_CheckInterruptFlag@flag_state:	
  1260                           ; 1 bytes @ 0x5
  1261                           
  1262  0025                     Timer_SetState@timer:	
  1263                           ; 1 bytes @ 0x5
  1264                           
  1265  0025                     Motor_SetTargetAngle@target_angle:	
  1266                           ; 1 bytes @ 0x5
  1267                           
  1268                           
  1269                           ; 1 bytes @ 0x5
  1270  0025                     	ds	1
  1271  0026                     ??_GPIO_InitPin:	
  1272  0026                     ??_TIME_WaitTimeSandwich:	
  1273                           ; 1 bytes @ 0x6
  1274                           
  1275  0026                     ??_Timer_Init:	
  1276                           ; 1 bytes @ 0x6
  1277                           
  1278  0026                     ??_GPIO_InitPort:	
  1279                           ; 1 bytes @ 0x6
  1280                           
  1281  0026                     ??_GPIO_SetPortState:	
  1282                           ; 1 bytes @ 0x6
  1283                           
  1284  0026                     ??_GPIO_SetPinState:	
  1285                           ; 1 bytes @ 0x6
  1286                           
  1287  0026                     ??_Timer_SetTimeUS:	
  1288                           ; 1 bytes @ 0x6
  1289                           
  1290  0026                     Timer_Init@timer:	
  1291                           ; 1 bytes @ 0x6
  1292                           
  1293  0026                     SSD_SetSymbol@ssd:	
  1294                           ; 1 bytes @ 0x6
  1295                           
  1296  0026                     ___wmul@multiplicand:	
  1297                           ; 1 bytes @ 0x6
  1298                           
  1299                           
  1300                           ; 2 bytes @ 0x6
  1301  0026                     	ds	1
  1302  0027                     ??_TIME_Init:	
  1303  0027                     ??_Button_GetPressingTime:	
  1304                           ; 1 bytes @ 0x7
  1305                           
  1306  0027                     GPIO_InitPort@port:	
  1307                           ; 1 bytes @ 0x7
  1308                           
  1309  0027                     GPIO_SetPortState@port:	
  1310                           ; 1 bytes @ 0x7
  1311                           
  1312  0027                     Button_GetPressingTime@ret_val:	
  1313                           ; 1 bytes @ 0x7
  1314                           
  1315                           
  1316                           ; 2 bytes @ 0x7
  1317  0027                     	ds	1
  1318  0028                     ??___wmul:	
  1319  0028                     GPIO_InitPin@port:	
  1320                           ; 1 bytes @ 0x8
  1321                           
  1322  0028                     GPIO_GetPinState@port:	
  1323                           ; 1 bytes @ 0x8
  1324                           
  1325  0028                     GPIO_SetPinState@port:	
  1326                           ; 1 bytes @ 0x8
  1327                           
  1328  0028                     Timer_SetTimeUS@timer:	
  1329                           ; 1 bytes @ 0x8
  1330                           
  1331  0028                     ___wmul@product:	
  1332                           ; 1 bytes @ 0x8
  1333                           
  1334                           
  1335                           ; 2 bytes @ 0x8
  1336  0028                     	ds	1
  1337  0029                     ?_SSD_Init:	
  1338  0029                     ??_Motor_Init:	
  1339                           ; 1 bytes @ 0x9
  1340                           
  1341  0029                     ??_Button_Init:	
  1342                           ; 1 bytes @ 0x9
  1343                           
  1344  0029                     ?_LED_Init:	
  1345                           ; 1 bytes @ 0x9
  1346                           
  1347  0029                     ?_LED_SetState:	
  1348                           ; 1 bytes @ 0x9
  1349                           
  1350  0029                     ?_SSD_SetCtrlLine:	
  1351                           ; 1 bytes @ 0x9
  1352                           
  1353  0029                     Button_GetPressingTime@button:	
  1354                           ; 1 bytes @ 0x9
  1355                           
  1356  0029                     GPIO_GetPinState@state:	
  1357                           ; 1 bytes @ 0x9
  1358                           
  1359  0029                     LED_Init@inital_state:	
  1360                           ; 1 bytes @ 0x9
  1361                           
  1362  0029                     LED_SetState@state:	
  1363                           ; 1 bytes @ 0x9
  1364                           
  1365  0029                     Motor_Init@initial_target_angle:	
  1366                           ; 1 bytes @ 0x9
  1367                           
  1368  0029                     SSD_Init@intial_symbol:	
  1369                           ; 1 bytes @ 0x9
  1370                           
  1371  0029                     SSD_SetCtrlLine@state:	
  1372                           ; 1 bytes @ 0x9
  1373                           
  1374  0029                     Timer_SetTimeUS@count_no:	
  1375                           ; 1 bytes @ 0x9
  1376                           
  1377                           
  1378                           ; 2 bytes @ 0x9
  1379  0029                     	ds	1
  1380  002A                     ??_SSD_Init:	
  1381  002A                     ?_Timer_SetTimeMS:	
  1382                           ; 1 bytes @ 0xA
  1383                           
  1384  002A                     ??_Button_Plus_Update:	
  1385                           ; 1 bytes @ 0xA
  1386                           
  1387  002A                     ??_Button_Minus_Update:	
  1388                           ; 1 bytes @ 0xA
  1389                           
  1390  002A                     ??_Button_Dust_Update:	
  1391                           ; 1 bytes @ 0xA
  1392                           
  1393  002A                     ?_GPIO_TogglePinState:	
  1394                           ; 1 bytes @ 0xA
  1395                           
  1396  002A                     ??_LED_Init:	
  1397                           ; 1 bytes @ 0xA
  1398                           
  1399  002A                     ??_LED_SetState:	
  1400                           ; 1 bytes @ 0xA
  1401                           
  1402  002A                     ??_SSD_SetCtrlLine:	
  1403                           ; 1 bytes @ 0xA
  1404                           
  1405  002A                     ?___lwmod:	
  1406                           ; 1 bytes @ 0xA
  1407                           
  1408  002A                     Button_Init@button:	
  1409                           ; 2 bytes @ 0xA
  1410                           
  1411  002A                     GPIO_TogglePinState@pin:	
  1412                           ; 1 bytes @ 0xA
  1413                           
  1414  002A                     Timer_SetTimeMS@time:	
  1415                           ; 1 bytes @ 0xA
  1416                           
  1417  002A                     ___lwmod@divisor:	
  1418                           ; 2 bytes @ 0xA
  1419                           
  1420                           
  1421                           ; 2 bytes @ 0xA
  1422  002A                     	ds	1
  1423  002B                     ?_TIME_TriggerTimeSandwichUS:	
  1424  002B                     ??_GPIO_TogglePinState:	
  1425                           ; 1 bytes @ 0xB
  1426                           
  1427  002B                     Button_Plus_Update@ButtonCurrSample:	
  1428                           ; 1 bytes @ 0xB
  1429                           
  1430  002B                     LED_Init@led:	
  1431                           ; 1 bytes @ 0xB
  1432                           
  1433  002B                     LED_SetState@led:	
  1434                           ; 1 bytes @ 0xB
  1435                           
  1436  002B                     SSD_Init@ssd:	
  1437                           ; 1 bytes @ 0xB
  1438                           
  1439  002B                     TIME_TriggerTimeSandwichUS@delay_us:	
  1440                           ; 1 bytes @ 0xB
  1441                           
  1442                           
  1443                           ; 2 bytes @ 0xB
  1444  002B                     	ds	1
  1445  002C                     ??_Display_Update:	
  1446  002C                     ??_Timer_SetTimeMS:	
  1447                           ; 1 bytes @ 0xC
  1448                           
  1449  002C                     Button_Minus_Update@ButtonCurrSample:	
  1450                           ; 1 bytes @ 0xC
  1451                           
  1452  002C                     Button_Dust_Update@ButtonCurrSample:	
  1453                           ; 1 bytes @ 0xC
  1454                           
  1455  002C                     SSD_SetCtrlLine@ssd:	
  1456                           ; 1 bytes @ 0xC
  1457                           
  1458  002C                     ___lwmod@dividend:	
  1459                           ; 1 bytes @ 0xC
  1460                           
  1461                           
  1462                           ; 2 bytes @ 0xC
  1463  002C                     	ds	1
  1464  002D                     ??_TIME_TriggerTimeSandwichUS:	
  1465  002D                     ??_SSD_Update:	
  1466                           ; 1 bytes @ 0xD
  1467                           
  1468  002D                     ?_TIME_TriggerDelayUS:	
  1469                           ; 1 bytes @ 0xD
  1470                           
  1471  002D                     ??_Button_Update:	
  1472                           ; 1 bytes @ 0xD
  1473                           
  1474  002D                     GPIO_TogglePinState@current_pin_state:	
  1475                           ; 1 bytes @ 0xD
  1476                           
  1477  002D                     Display_Update@speed:	
  1478                           ; 1 bytes @ 0xD
  1479                           
  1480  002D                     TIME_TriggerDelayUS@delay_us:	
  1481                           ; 1 bytes @ 0xD
  1482                           
  1483                           
  1484                           ; 2 bytes @ 0xD
  1485  002D                     	ds	1
  1486  002E                     ??___lwmod:	
  1487  002E                     GPIO_TogglePinState@port:	
  1488                           ; 1 bytes @ 0xE
  1489                           
  1490  002E                     Timer_SetTimeMS@timer:	
  1491                           ; 1 bytes @ 0xE
  1492                           
  1493  002E                     Display_Update@dust_bag_state:	
  1494                           ; 1 bytes @ 0xE
  1495                           
  1496                           
  1497                           ; 1 bytes @ 0xE
  1498  002E                     	ds	1
  1499  002F                     ??_Motor_OutputUpdate:	
  1500  002F                     ??_TIME_TriggerDelayUS:	
  1501                           ; 1 bytes @ 0xF
  1502                           
  1503  002F                     SSD_Update@Current_Symbol:	
  1504                           ; 1 bytes @ 0xF
  1505                           
  1506  002F                     ___lwmod@counter:	
  1507                           ; 1 bytes @ 0xF
  1508                           
  1509  002F                     Timer_SetTimeMS@count_no:	
  1510                           ; 1 bytes @ 0xF
  1511                           
  1512                           
  1513                           ; 2 bytes @ 0xF
  1514  002F                     	ds	1
  1515  0030                     ??_VC_Update:	
  1516                           
  1517                           ; 1 bytes @ 0x10
  1518  0030                     	ds	1
  1519  0031                     ??_OS_Init:	
  1520  0031                     Motor_OutputUpdate@Bias_Time_US:	
  1521                           ; 1 bytes @ 0x11
  1522                           
  1523                           
  1524                           ; 2 bytes @ 0x11
  1525  0031                     	ds	2
  1526  0033                     ??_OS_Schedule:	
  1527                           
  1528                           ; 1 bytes @ 0x13
  1529  0033                     	ds	1
  1530  0034                     ??_main:	
  1531                           
  1532                           	psect	maintext
  1533  045D                     __pmaintext:	
  1534                           ; 1 bytes @ 0x14
  1535 ;;
  1536 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1537 ;;
  1538 ;; *************** function _main *****************
  1539 ;; Defined at:
  1540 ;;		line 23 in file "main.c"
  1541 ;; Parameters:    Size  Location     Type
  1542 ;;		None
  1543 ;; Auto vars:     Size  Location     Type
  1544 ;;  time            2    0        unsigned int 
  1545 ;; Return value:  Size  Location     Type
  1546 ;;                  2  186[None  ] int 
  1547 ;; Registers used:
  1548 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1549 ;; Tracked objects:
  1550 ;;		On entry : B00/0
  1551 ;;		On exit  : 0/0
  1552 ;;		Unchanged: 0/0
  1553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1554 ;;      Params:         0       0       0       0       0
  1555 ;;      Locals:         0       0       0       0       0
  1556 ;;      Temps:          0       0       0       0       0
  1557 ;;      Totals:         0       0       0       0       0
  1558 ;;Total ram usage:        0 bytes
  1559 ;; Hardware stack levels required when called:    8
  1560 ;; This function calls:
  1561 ;;		_Button_Init
  1562 ;;		_Display_Init
  1563 ;;		_LED_Init
  1564 ;;		_Motor_Init
  1565 ;;		_OS_Init
  1566 ;;		_OS_Schedule
  1567 ;;		_SSD_Init
  1568 ;;		_TIME_Init
  1569 ;;		_VC_Init
  1570 ;; This function is called by:
  1571 ;;		Startup code after reset
  1572 ;; This function uses a non-reentrant model
  1573 ;;
  1574                           
  1575                           
  1576                           ;psect for function _main
  1577  045D                     _main:	
  1578                           
  1579                           ;main.c: 25: u16 time;;main.c: 26: LED_Init(LED_DUST_INDICATOR,LED_OFF);
  1580                           
  1581                           ;incstack = 0
  1582                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1583  045D  1283               	bcf	3,5	;RP0=0, select bank0
  1584  045E  1303               	bcf	3,6	;RP1=0, select bank0
  1585  045F  01A9               	clrf	LED_Init@inital_state
  1586  0460  3000               	movlw	0
  1587  0461  120A  158A  26DE  120A  118A  	fcall	_LED_Init
  1588                           
  1589                           ;main.c: 28: SSD_Init(SSD_LEFT,SSD_NO_DASH);
  1590  0466  1283               	bcf	3,5	;RP0=0, select bank0
  1591  0467  1303               	bcf	3,6	;RP1=0, select bank0
  1592  0468  01A9               	clrf	SSD_Init@intial_symbol
  1593  0469  3000               	movlw	0
  1594  046A  120A  118A  228C  120A  118A  	fcall	_SSD_Init
  1595                           
  1596                           ;main.c: 29: SSD_Init(SSD_CENTER,SSD_NO_DASH);
  1597  046F  1283               	bcf	3,5	;RP0=0, select bank0
  1598  0470  1303               	bcf	3,6	;RP1=0, select bank0
  1599  0471  01A9               	clrf	SSD_Init@intial_symbol
  1600  0472  3001               	movlw	1
  1601  0473  120A  118A  228C  120A  118A  	fcall	_SSD_Init
  1602                           
  1603                           ;main.c: 30: SSD_Init(SSD_RIGHT,SSD_NO_DASH);
  1604  0478  1283               	bcf	3,5	;RP0=0, select bank0
  1605  0479  1303               	bcf	3,6	;RP1=0, select bank0
  1606  047A  01A9               	clrf	SSD_Init@intial_symbol
  1607  047B  3002               	movlw	2
  1608  047C  120A  118A  228C  120A  118A  	fcall	_SSD_Init
  1609                           
  1610                           ;main.c: 32: Display_Init();
  1611  0481  120A  118A  2003  120A  118A  	fcall	_Display_Init
  1612                           
  1613                           ;main.c: 34: Motor_Init(MOTOR_ANGLE_140);
  1614  0486  308C               	movlw	140
  1615  0487  120A  158A  2688  120A  118A  	fcall	_Motor_Init
  1616                           
  1617                           ;main.c: 36: Button_Init(BUTTON_PLUS);
  1618  048C  3000               	movlw	0
  1619  048D  120A  158A  279F  120A  118A  	fcall	_Button_Init
  1620                           
  1621                           ;main.c: 37: Button_Init(BUTTON_MINUS);
  1622  0492  3001               	movlw	1
  1623  0493  120A  158A  279F  120A  118A  	fcall	_Button_Init
  1624                           
  1625                           ;main.c: 38: Button_Init(BUTTON_DUST);
  1626  0498  3002               	movlw	2
  1627  0499  120A  158A  279F  120A  118A  	fcall	_Button_Init
  1628                           
  1629                           ;main.c: 40: VC_Init();
  1630  049E  120A  118A  27FF  120A  118A  	fcall	_VC_Init
  1631                           
  1632                           ;main.c: 42: TIME_Init();
  1633  04A3  120A  158A  2591  120A  118A  	fcall	_TIME_Init
  1634                           
  1635                           ;main.c: 44: OS_Init();
  1636  04A8  120A  158A  27CE  120A  118A  	fcall	_OS_Init
  1637  04AD                     l2338:	
  1638                           
  1639                           ;main.c: 46: {;main.c: 47: OS_Schedule();
  1640  04AD  120A  118A  238A  120A  118A  	fcall	_OS_Schedule
  1641  04B2  2CAD               	goto	l2338
  1642  04B3                     __end_of_main:	
  1643                           
  1644                           	psect	text1
  1645  07FF                     __ptext1:	
  1646 ;; *************** function _VC_Init *****************
  1647 ;; Defined at:
  1648 ;;		line 9 in file "VC.c"
  1649 ;; Parameters:    Size  Location     Type
  1650 ;;		None
  1651 ;; Auto vars:     Size  Location     Type
  1652 ;;		None
  1653 ;; Return value:  Size  Location     Type
  1654 ;;                  1    wreg      void 
  1655 ;; Registers used:
  1656 ;;		None
  1657 ;; Tracked objects:
  1658 ;;		On entry : 0/0
  1659 ;;		On exit  : 0/0
  1660 ;;		Unchanged: 0/0
  1661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1662 ;;      Params:         0       0       0       0       0
  1663 ;;      Locals:         0       0       0       0       0
  1664 ;;      Temps:          0       0       0       0       0
  1665 ;;      Totals:         0       0       0       0       0
  1666 ;;Total ram usage:        0 bytes
  1667 ;; Hardware stack levels used:    1
  1668 ;; Hardware stack levels required when called:    3
  1669 ;; This function calls:
  1670 ;;		Nothing
  1671 ;; This function is called by:
  1672 ;;		_main
  1673 ;; This function uses a non-reentrant model
  1674 ;;
  1675                           
  1676                           
  1677                           ;psect for function _VC_Init
  1678  07FF                     _VC_Init:	
  1679                           
  1680                           ;incstack = 0
  1681                           ; Regs used in _VC_Init: []
  1682  07FF  0008               	return
  1683  0800                     __end_of_VC_Init:	
  1684                           
  1685                           	psect	text2
  1686  0D91                     __ptext2:	
  1687 ;; *************** function _TIME_Init *****************
  1688 ;; Defined at:
  1689 ;;		line 11 in file "Time.c"
  1690 ;; Parameters:    Size  Location     Type
  1691 ;;		None
  1692 ;; Auto vars:     Size  Location     Type
  1693 ;;		None
  1694 ;; Return value:  Size  Location     Type
  1695 ;;                  1    wreg      void 
  1696 ;; Registers used:
  1697 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1698 ;; Tracked objects:
  1699 ;;		On entry : 0/0
  1700 ;;		On exit  : 0/0
  1701 ;;		Unchanged: 0/0
  1702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1703 ;;      Params:         0       0       0       0       0
  1704 ;;      Locals:         0       0       0       0       0
  1705 ;;      Temps:          0       0       0       0       0
  1706 ;;      Totals:         0       0       0       0       0
  1707 ;;Total ram usage:        0 bytes
  1708 ;; Hardware stack levels used:    1
  1709 ;; Hardware stack levels required when called:    5
  1710 ;; This function calls:
  1711 ;;		_Timer_Init
  1712 ;; This function is called by:
  1713 ;;		_main
  1714 ;; This function uses a non-reentrant model
  1715 ;;
  1716                           
  1717                           
  1718                           ;psect for function _TIME_Init
  1719  0D91                     _TIME_Init:	
  1720                           
  1721                           ;Time.c: 13: Timer_Init(TIMER1);
  1722                           
  1723                           ;incstack = 0
  1724                           ; Regs used in _TIME_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1725  0D91  3001               	movlw	1
  1726  0D92  120A  158A  26A4   	fcall	_Timer_Init
  1727  0D95  0008               	return
  1728  0D96                     __end_of_TIME_Init:	
  1729                           
  1730                           	psect	text3
  1731  028C                     __ptext3:	
  1732 ;; *************** function _SSD_Init *****************
  1733 ;; Defined at:
  1734 ;;		line 18 in file "SSD.c"
  1735 ;; Parameters:    Size  Location     Type
  1736 ;;  ssd             1    wreg     enum E829
  1737 ;;  intial_symbo    1    9[BANK0 ] enum E834
  1738 ;; Auto vars:     Size  Location     Type
  1739 ;;  ssd             1   11[BANK0 ] enum E829
  1740 ;; Return value:  Size  Location     Type
  1741 ;;                  1    wreg      void 
  1742 ;; Registers used:
  1743 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1744 ;; Tracked objects:
  1745 ;;		On entry : 0/0
  1746 ;;		On exit  : 0/0
  1747 ;;		Unchanged: 0/0
  1748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1749 ;;      Params:         0       1       0       0       0
  1750 ;;      Locals:         0       1       0       0       0
  1751 ;;      Temps:          0       1       0       0       0
  1752 ;;      Totals:         0       3       0       0       0
  1753 ;;Total ram usage:        3 bytes
  1754 ;; Hardware stack levels used:    1
  1755 ;; Hardware stack levels required when called:    4
  1756 ;; This function calls:
  1757 ;;		_GPIO_InitPin
  1758 ;;		_GPIO_InitPort
  1759 ;;		_GPIO_SetPinState
  1760 ;;		_SSD_SetSymbol
  1761 ;; This function is called by:
  1762 ;;		_main
  1763 ;; This function uses a non-reentrant model
  1764 ;;
  1765                           
  1766                           
  1767                           ;psect for function _SSD_Init
  1768  028C                     _SSD_Init:	
  1769                           
  1770                           ;incstack = 0
  1771                           ; Regs used in _SSD_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1772                           ;SSD_Init@ssd stored from wreg
  1773  028C  1283               	bcf	3,5	;RP0=0, select bank0
  1774  028D  1303               	bcf	3,6	;RP1=0, select bank0
  1775  028E  00AB               	movwf	SSD_Init@ssd
  1776                           
  1777                           ;SSD.c: 20: GPIO_InitPort(GPIO_PORTD,0x7f,GPIO_OUTPUT_DIR);
  1778  028F  307F               	movlw	127
  1779  0290  00AA               	movwf	??_SSD_Init
  1780  0291  082A               	movf	??_SSD_Init,w
  1781  0292  00A4               	movwf	GPIO_InitPort@mask
  1782  0293  01A5               	clrf	GPIO_InitPort@dir
  1783  0294  3003               	movlw	3
  1784  0295  120A  118A  2401  120A  118A  	fcall	_GPIO_InitPort
  1785                           
  1786                           ;SSD.c: 21: GPIO_InitPin(GPIO_PORTD,GPIO_PIN7,GPIO_OUTPUT_DIR);
  1787  029A  3007               	movlw	7
  1788  029B  1283               	bcf	3,5	;RP0=0, select bank0
  1789  029C  1303               	bcf	3,6	;RP1=0, select bank0
  1790  029D  00AA               	movwf	??_SSD_Init
  1791  029E  082A               	movf	??_SSD_Init,w
  1792  029F  00A4               	movwf	GPIO_InitPin@pin
  1793  02A0  01A5               	clrf	GPIO_InitPin@dir
  1794  02A1  3003               	movlw	3
  1795  02A2  120A  118A  203D  120A  118A  	fcall	_GPIO_InitPin
  1796                           
  1797                           ;SSD.c: 23: switch(ssd)
  1798  02A7  2AF3               	goto	l2232
  1799  02A8                     l2224:	
  1800                           
  1801                           ;SSD.c: 26: GPIO_InitPin(GPIO_PORTB,GPIO_PIN6,GPIO_OUTPUT_DIR);
  1802  02A8  3006               	movlw	6
  1803  02A9  00AA               	movwf	??_SSD_Init
  1804  02AA  082A               	movf	??_SSD_Init,w
  1805  02AB  00A4               	movwf	GPIO_InitPin@pin
  1806  02AC  01A5               	clrf	GPIO_InitPin@dir
  1807  02AD  3001               	movlw	1
  1808  02AE  120A  118A  203D  120A  118A  	fcall	_GPIO_InitPin
  1809                           
  1810                           ;SSD.c: 27: GPIO_SetPinState(GPIO_PORTB,GPIO_PIN6,GPIO_LOW);
  1811  02B3  3006               	movlw	6
  1812  02B4  1283               	bcf	3,5	;RP0=0, select bank0
  1813  02B5  1303               	bcf	3,6	;RP1=0, select bank0
  1814  02B6  00AA               	movwf	??_SSD_Init
  1815  02B7  082A               	movf	??_SSD_Init,w
  1816  02B8  00A4               	movwf	GPIO_SetPinState@pin
  1817  02B9  01A5               	clrf	GPIO_SetPinState@state
  1818  02BA  3001               	movlw	1
  1819  02BB  120A  118A  217D  120A  118A  	fcall	_GPIO_SetPinState
  1820                           
  1821                           ;SSD.c: 28: break;
  1822  02C0  2B00               	goto	l2234
  1823  02C1                     l2226:	
  1824                           
  1825                           ;SSD.c: 30: GPIO_InitPin(GPIO_PORTB,GPIO_PIN5,GPIO_OUTPUT_DIR);
  1826  02C1  3005               	movlw	5
  1827  02C2  00AA               	movwf	??_SSD_Init
  1828  02C3  082A               	movf	??_SSD_Init,w
  1829  02C4  00A4               	movwf	GPIO_InitPin@pin
  1830  02C5  01A5               	clrf	GPIO_InitPin@dir
  1831  02C6  3001               	movlw	1
  1832  02C7  120A  118A  203D  120A  118A  	fcall	_GPIO_InitPin
  1833                           
  1834                           ;SSD.c: 31: GPIO_SetPinState(GPIO_PORTB,GPIO_PIN5,GPIO_LOW);
  1835  02CC  3005               	movlw	5
  1836  02CD  1283               	bcf	3,5	;RP0=0, select bank0
  1837  02CE  1303               	bcf	3,6	;RP1=0, select bank0
  1838  02CF  00AA               	movwf	??_SSD_Init
  1839  02D0  082A               	movf	??_SSD_Init,w
  1840  02D1  00A4               	movwf	GPIO_SetPinState@pin
  1841  02D2  01A5               	clrf	GPIO_SetPinState@state
  1842  02D3  3001               	movlw	1
  1843  02D4  120A  118A  217D  120A  118A  	fcall	_GPIO_SetPinState
  1844                           
  1845                           ;SSD.c: 32: break;
  1846  02D9  2B00               	goto	l2234
  1847  02DA                     l2228:	
  1848                           
  1849                           ;SSD.c: 34: GPIO_InitPin(GPIO_PORTB,GPIO_PIN4,GPIO_OUTPUT_DIR);
  1850  02DA  3004               	movlw	4
  1851  02DB  00AA               	movwf	??_SSD_Init
  1852  02DC  082A               	movf	??_SSD_Init,w
  1853  02DD  00A4               	movwf	GPIO_InitPin@pin
  1854  02DE  01A5               	clrf	GPIO_InitPin@dir
  1855  02DF  3001               	movlw	1
  1856  02E0  120A  118A  203D  120A  118A  	fcall	_GPIO_InitPin
  1857                           
  1858                           ;SSD.c: 35: GPIO_SetPinState(GPIO_PORTB,GPIO_PIN4,GPIO_LOW);
  1859  02E5  3004               	movlw	4
  1860  02E6  1283               	bcf	3,5	;RP0=0, select bank0
  1861  02E7  1303               	bcf	3,6	;RP1=0, select bank0
  1862  02E8  00AA               	movwf	??_SSD_Init
  1863  02E9  082A               	movf	??_SSD_Init,w
  1864  02EA  00A4               	movwf	GPIO_SetPinState@pin
  1865  02EB  01A5               	clrf	GPIO_SetPinState@state
  1866  02EC  3001               	movlw	1
  1867  02ED  120A  118A  217D  120A  118A  	fcall	_GPIO_SetPinState
  1868                           
  1869                           ;SSD.c: 36: break;
  1870  02F2  2B00               	goto	l2234
  1871  02F3                     l2232:	
  1872  02F3  1283               	bcf	3,5	;RP0=0, select bank0
  1873  02F4  1303               	bcf	3,6	;RP1=0, select bank0
  1874  02F5  082B               	movf	SSD_Init@ssd,w
  1875                           
  1876                           ; Switch size 1, requested type "simple"
  1877                           ; Number of cases is 3, Range of values is 0 to 2
  1878                           ; switch strategies available:
  1879                           ; Name         Instructions Cycles
  1880                           ; simple_byte           10     6 (average)
  1881                           ; direct_byte           17     8 (fixed)
  1882                           ; jumptable            260     6 (fixed)
  1883                           ;	Chosen strategy is simple_byte
  1884  02F6  3A00               	xorlw	0	; case 0
  1885  02F7  1903               	skipnz
  1886  02F8  2AA8               	goto	l2224
  1887  02F9  3A01               	xorlw	1	; case 1
  1888  02FA  1903               	skipnz
  1889  02FB  2AC1               	goto	l2226
  1890  02FC  3A03               	xorlw	3	; case 2
  1891  02FD  1903               	skipnz
  1892  02FE  2ADA               	goto	l2228
  1893  02FF  2B00               	goto	l2234
  1894  0300                     l2234:	
  1895                           
  1896                           ;SSD.c: 41: SSD_SetSymbol(ssd,intial_symbol);
  1897  0300  1283               	bcf	3,5	;RP0=0, select bank0
  1898  0301  1303               	bcf	3,6	;RP1=0, select bank0
  1899  0302  0829               	movf	SSD_Init@intial_symbol,w
  1900  0303  00AA               	movwf	??_SSD_Init
  1901  0304  082A               	movf	??_SSD_Init,w
  1902  0305  00A4               	movwf	SSD_SetSymbol@symbol
  1903  0306  082B               	movf	SSD_Init@ssd,w
  1904  0307  120A  158A  25B4   	fcall	_SSD_SetSymbol
  1905  030A  0008               	return
  1906  030B                     __end_of_SSD_Init:	
  1907                           
  1908                           	psect	text4
  1909  0401                     __ptext4:	
  1910 ;; *************** function _GPIO_InitPort *****************
  1911 ;; Defined at:
  1912 ;;		line 3 in file "GPIO.c"
  1913 ;; Parameters:    Size  Location     Type
  1914 ;;  port            1    wreg     enum E829
  1915 ;;  mask            1    4[BANK0 ] unsigned char 
  1916 ;;  dir             1    5[BANK0 ] enum E846
  1917 ;; Auto vars:     Size  Location     Type
  1918 ;;  port            1    7[BANK0 ] enum E829
  1919 ;; Return value:  Size  Location     Type
  1920 ;;                  1    wreg      void 
  1921 ;; Registers used:
  1922 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1923 ;; Tracked objects:
  1924 ;;		On entry : 0/0
  1925 ;;		On exit  : 0/0
  1926 ;;		Unchanged: 0/0
  1927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1928 ;;      Params:         0       2       0       0       0
  1929 ;;      Locals:         0       1       0       0       0
  1930 ;;      Temps:          0       1       0       0       0
  1931 ;;      Totals:         0       4       0       0       0
  1932 ;;Total ram usage:        4 bytes
  1933 ;; Hardware stack levels used:    1
  1934 ;; Hardware stack levels required when called:    3
  1935 ;; This function calls:
  1936 ;;		Nothing
  1937 ;; This function is called by:
  1938 ;;		_SSD_Init
  1939 ;; This function uses a non-reentrant model
  1940 ;;
  1941                           
  1942                           
  1943                           ;psect for function _GPIO_InitPort
  1944  0401                     _GPIO_InitPort:	
  1945                           
  1946                           ;incstack = 0
  1947                           ; Regs used in _GPIO_InitPort: [wreg-fsr0h+status,2+status,0]
  1948                           ;GPIO_InitPort@port stored from wreg
  1949  0401  1283               	bcf	3,5	;RP0=0, select bank0
  1950  0402  1303               	bcf	3,6	;RP1=0, select bank0
  1951  0403  00A7               	movwf	GPIO_InitPort@port
  1952                           
  1953                           ;GPIO.c: 5: switch(port)
  1954  0404  2C4B               	goto	l2036
  1955  0405                     l2024:	
  1956                           
  1957                           ;GPIO.c: 8: (TRISA = (((TRISA)&(~(mask))) | ((dir)&(mask))));
  1958  0405  0824               	movf	GPIO_InitPort@mask,w
  1959  0406  0525               	andwf	GPIO_InitPort@dir,w
  1960  0407  00A6               	movwf	??_GPIO_InitPort
  1961  0408  0924               	comf	GPIO_InitPort@mask,w
  1962  0409  1683               	bsf	3,5	;RP0=1, select bank1
  1963  040A  1303               	bcf	3,6	;RP1=0, select bank1
  1964  040B  0505               	andwf	5,w	;volatile
  1965  040C  1283               	bcf	3,5	;RP0=0, select bank0
  1966  040D  1303               	bcf	3,6	;RP1=0, select bank0
  1967  040E  0426               	iorwf	??_GPIO_InitPort,w
  1968  040F  1683               	bsf	3,5	;RP0=1, select bank1
  1969  0410  1303               	bcf	3,6	;RP1=0, select bank1
  1970  0411  0085               	movwf	5	;volatile
  1971                           
  1972                           ;GPIO.c: 9: break;
  1973  0412  0008               	return
  1974  0413                     l2026:	
  1975                           
  1976                           ;GPIO.c: 11: (TRISB = (((TRISB)&(~(mask))) | ((dir)&(mask))));
  1977  0413  0824               	movf	GPIO_InitPort@mask,w
  1978  0414  0525               	andwf	GPIO_InitPort@dir,w
  1979  0415  00A6               	movwf	??_GPIO_InitPort
  1980  0416  0924               	comf	GPIO_InitPort@mask,w
  1981  0417  1683               	bsf	3,5	;RP0=1, select bank1
  1982  0418  1303               	bcf	3,6	;RP1=0, select bank1
  1983  0419  0506               	andwf	6,w	;volatile
  1984  041A  1283               	bcf	3,5	;RP0=0, select bank0
  1985  041B  1303               	bcf	3,6	;RP1=0, select bank0
  1986  041C  0426               	iorwf	??_GPIO_InitPort,w
  1987  041D  1683               	bsf	3,5	;RP0=1, select bank1
  1988  041E  1303               	bcf	3,6	;RP1=0, select bank1
  1989  041F  0086               	movwf	6	;volatile
  1990                           
  1991                           ;GPIO.c: 12: break;
  1992  0420  0008               	return
  1993  0421                     l2028:	
  1994                           
  1995                           ;GPIO.c: 14: (TRISC = (((TRISC)&(~(mask))) | ((dir)&(mask))));
  1996  0421  0824               	movf	GPIO_InitPort@mask,w
  1997  0422  0525               	andwf	GPIO_InitPort@dir,w
  1998  0423  00A6               	movwf	??_GPIO_InitPort
  1999  0424  0924               	comf	GPIO_InitPort@mask,w
  2000  0425  1683               	bsf	3,5	;RP0=1, select bank1
  2001  0426  1303               	bcf	3,6	;RP1=0, select bank1
  2002  0427  0507               	andwf	7,w	;volatile
  2003  0428  1283               	bcf	3,5	;RP0=0, select bank0
  2004  0429  1303               	bcf	3,6	;RP1=0, select bank0
  2005  042A  0426               	iorwf	??_GPIO_InitPort,w
  2006  042B  1683               	bsf	3,5	;RP0=1, select bank1
  2007  042C  1303               	bcf	3,6	;RP1=0, select bank1
  2008  042D  0087               	movwf	7	;volatile
  2009                           
  2010                           ;GPIO.c: 15: break;
  2011  042E  0008               	return
  2012  042F                     l2030:	
  2013                           
  2014                           ;GPIO.c: 17: (TRISD = (((TRISD)&(~(mask))) | ((dir)&(mask))));
  2015  042F  0824               	movf	GPIO_InitPort@mask,w
  2016  0430  0525               	andwf	GPIO_InitPort@dir,w
  2017  0431  00A6               	movwf	??_GPIO_InitPort
  2018  0432  0924               	comf	GPIO_InitPort@mask,w
  2019  0433  1683               	bsf	3,5	;RP0=1, select bank1
  2020  0434  1303               	bcf	3,6	;RP1=0, select bank1
  2021  0435  0508               	andwf	8,w	;volatile
  2022  0436  1283               	bcf	3,5	;RP0=0, select bank0
  2023  0437  1303               	bcf	3,6	;RP1=0, select bank0
  2024  0438  0426               	iorwf	??_GPIO_InitPort,w
  2025  0439  1683               	bsf	3,5	;RP0=1, select bank1
  2026  043A  1303               	bcf	3,6	;RP1=0, select bank1
  2027  043B  0088               	movwf	8	;volatile
  2028                           
  2029                           ;GPIO.c: 18: break;
  2030  043C  0008               	return
  2031  043D                     l2032:	
  2032                           
  2033                           ;GPIO.c: 20: (TRISE = (((TRISE)&(~(mask))) | ((dir)&(mask))));
  2034  043D  0824               	movf	GPIO_InitPort@mask,w
  2035  043E  0525               	andwf	GPIO_InitPort@dir,w
  2036  043F  00A6               	movwf	??_GPIO_InitPort
  2037  0440  0924               	comf	GPIO_InitPort@mask,w
  2038  0441  1683               	bsf	3,5	;RP0=1, select bank1
  2039  0442  1303               	bcf	3,6	;RP1=0, select bank1
  2040  0443  0509               	andwf	9,w	;volatile
  2041  0444  1283               	bcf	3,5	;RP0=0, select bank0
  2042  0445  1303               	bcf	3,6	;RP1=0, select bank0
  2043  0446  0426               	iorwf	??_GPIO_InitPort,w
  2044  0447  1683               	bsf	3,5	;RP0=1, select bank1
  2045  0448  1303               	bcf	3,6	;RP1=0, select bank1
  2046  0449  0089               	movwf	9	;volatile
  2047                           
  2048                           ;GPIO.c: 21: break;
  2049  044A  0008               	return
  2050  044B                     l2036:	
  2051  044B  0827               	movf	GPIO_InitPort@port,w
  2052                           
  2053                           ; Switch size 1, requested type "simple"
  2054                           ; Number of cases is 5, Range of values is 0 to 4
  2055                           ; switch strategies available:
  2056                           ; Name         Instructions Cycles
  2057                           ; simple_byte           16     9 (average)
  2058                           ; direct_byte           23     8 (fixed)
  2059                           ; jumptable            260     6 (fixed)
  2060                           ;	Chosen strategy is simple_byte
  2061  044C  3A00               	xorlw	0	; case 0
  2062  044D  1903               	skipnz
  2063  044E  2C05               	goto	l2024
  2064  044F  3A01               	xorlw	1	; case 1
  2065  0450  1903               	skipnz
  2066  0451  2C13               	goto	l2026
  2067  0452  3A03               	xorlw	3	; case 2
  2068  0453  1903               	skipnz
  2069  0454  2C21               	goto	l2028
  2070  0455  3A01               	xorlw	1	; case 3
  2071  0456  1903               	skipnz
  2072  0457  2C2F               	goto	l2030
  2073  0458  3A07               	xorlw	7	; case 4
  2074  0459  1903               	skipnz
  2075  045A  2C3D               	goto	l2032
  2076  045B  2C5C               	goto	l101
  2077  045C                     l101:	
  2078  045C  0008               	return
  2079  045D                     __end_of_GPIO_InitPort:	
  2080                           
  2081                           	psect	text5
  2082  038A                     __ptext5:	
  2083 ;; *************** function _OS_Schedule *****************
  2084 ;; Defined at:
  2085 ;;		line 14 in file "OS.c"
  2086 ;; Parameters:    Size  Location     Type
  2087 ;;		None
  2088 ;; Auto vars:     Size  Location     Type
  2089 ;;		None
  2090 ;; Return value:  Size  Location     Type
  2091 ;;                  1    wreg      void 
  2092 ;; Registers used:
  2093 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2094 ;; Tracked objects:
  2095 ;;		On entry : 0/0
  2096 ;;		On exit  : 0/0
  2097 ;;		Unchanged: 0/0
  2098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2099 ;;      Params:         0       0       0       0       0
  2100 ;;      Locals:         0       0       0       0       0
  2101 ;;      Temps:          0       1       0       0       0
  2102 ;;      Totals:         0       1       0       0       0
  2103 ;;Total ram usage:        1 bytes
  2104 ;; Hardware stack levels used:    1
  2105 ;; Hardware stack levels required when called:    7
  2106 ;; This function calls:
  2107 ;;		_Button_Update
  2108 ;;		_Display_Update
  2109 ;;		_GPIO_TogglePinState
  2110 ;;		_Motor_HarmonicReductionUpdate
  2111 ;;		_Motor_OutputUpdate
  2112 ;;		_Motor_SoftSwitchingUpdate
  2113 ;;		_SSD_Update
  2114 ;;		_TIME_TriggerTimeSandwichUS
  2115 ;;		_TIME_WaitTimeSandwich
  2116 ;;		_VC_Update
  2117 ;; This function is called by:
  2118 ;;		_main
  2119 ;; This function uses a non-reentrant model
  2120 ;;
  2121                           
  2122                           
  2123                           ;psect for function _OS_Schedule
  2124  038A                     _OS_Schedule:	
  2125                           
  2126                           ;OS.c: 16: static u8 Button_Counter=0;;OS.c: 17: static u8 Display_Counter=0;;OS.c: 18: 
      +                          static u8 VC_Counter=0;;OS.c: 19: static u8 Motor_SoftSwitch_Counter=0;;OS.c: 20: static
      +                           u8 Motor_HarmonicReduction_Counter=0;;OS.c: 23: if(tick_flag==1)
  2127                           
  2128                           ;incstack = 0
  2129                           ; Regs used in _OS_Schedule: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2130  038A  1283               	bcf	3,5	;RP0=0, select bank0
  2131  038B  1303               	bcf	3,6	;RP1=0, select bank0
  2132  038C  0346               	decf	_tick_flag,w	;volatile
  2133  038D  1D03               	btfss	3,2
  2134  038E  0008               	return
  2135                           
  2136                           ;OS.c: 24: {;OS.c: 25: tick_flag=0;
  2137  038F  01C6               	clrf	_tick_flag	;volatile
  2138                           
  2139                           ;OS.c: 28: GPIO_TogglePinState(GPIO_PORTC,GPIO_PIN1);
  2140  0390  01AA               	clrf	GPIO_TogglePinState@pin
  2141  0391  0AAA               	incf	GPIO_TogglePinState@pin,f
  2142  0392  3002               	movlw	2
  2143  0393  120A  158A  271B  120A  118A  	fcall	_GPIO_TogglePinState
  2144                           
  2145                           ;OS.c: 30: Button_Counter+=10;
  2146  0398  300A               	movlw	10
  2147  0399  1283               	bcf	3,5	;RP0=0, select bank0
  2148  039A  1303               	bcf	3,6	;RP1=0, select bank0
  2149  039B  00B3               	movwf	??_OS_Schedule
  2150  039C  0833               	movf	??_OS_Schedule,w
  2151  039D  07C5               	addwf	OS_Schedule@Button_Counter,f
  2152                           
  2153                           ;OS.c: 31: Display_Counter+=10;
  2154  039E  300A               	movlw	10
  2155  039F  00B3               	movwf	??_OS_Schedule
  2156  03A0  0833               	movf	??_OS_Schedule,w
  2157  03A1  07C4               	addwf	OS_Schedule@Display_Counter,f
  2158                           
  2159                           ;OS.c: 32: VC_Counter+=10;
  2160  03A2  300A               	movlw	10
  2161  03A3  00B3               	movwf	??_OS_Schedule
  2162  03A4  0833               	movf	??_OS_Schedule,w
  2163  03A5  07C3               	addwf	OS_Schedule@VC_Counter,f
  2164                           
  2165                           ;OS.c: 33: Motor_SoftSwitch_Counter+=10;
  2166  03A6  300A               	movlw	10
  2167  03A7  00B3               	movwf	??_OS_Schedule
  2168  03A8  0833               	movf	??_OS_Schedule,w
  2169  03A9  07C2               	addwf	OS_Schedule@Motor_SoftSwitch_Counter,f
  2170                           
  2171                           ;OS.c: 34: Motor_HarmonicReduction_Counter+=10;
  2172  03AA  300A               	movlw	10
  2173  03AB  00B3               	movwf	??_OS_Schedule
  2174  03AC  0833               	movf	??_OS_Schedule,w
  2175  03AD  07C1               	addwf	OS_Schedule@Motor_HarmonicReduction_Counter,f
  2176                           
  2177                           ;OS.c: 36: TIME_TriggerTimeSandwichUS(550);
  2178  03AE  3026               	movlw	38
  2179  03AF  00AB               	movwf	TIME_TriggerTimeSandwichUS@delay_us
  2180  03B0  3002               	movlw	2
  2181  03B1  00AC               	movwf	TIME_TriggerTimeSandwichUS@delay_us+1
  2182  03B2  120A  158A  266D  120A  118A  	fcall	_TIME_TriggerTimeSandwichUS
  2183                           
  2184                           ;OS.c: 39: SSD_Update();
  2185  03B7  120A  118A  255B  120A  118A  	fcall	_SSD_Update
  2186                           
  2187                           ;OS.c: 41: if(VC_Counter==20)
  2188  03BC  3014               	movlw	20
  2189  03BD  1283               	bcf	3,5	;RP0=0, select bank0
  2190  03BE  1303               	bcf	3,6	;RP1=0, select bank0
  2191  03BF  0643               	xorwf	OS_Schedule@VC_Counter,w
  2192  03C0  1D03               	btfss	3,2
  2193  03C1  2BC8               	goto	l2274
  2194                           
  2195                           ;OS.c: 42: {;OS.c: 43: VC_Counter=0;
  2196  03C2  01C3               	clrf	OS_Schedule@VC_Counter
  2197                           
  2198                           ;OS.c: 45: VC_Update();
  2199  03C3  120A  118A  20E9  120A  118A  	fcall	_VC_Update
  2200  03C8                     l2274:	
  2201                           
  2202                           ;OS.c: 46: };OS.c: 48: if(Display_Counter==20)
  2203  03C8  3014               	movlw	20
  2204  03C9  1283               	bcf	3,5	;RP0=0, select bank0
  2205  03CA  1303               	bcf	3,6	;RP1=0, select bank0
  2206  03CB  0644               	xorwf	OS_Schedule@Display_Counter,w
  2207  03CC  1D03               	btfss	3,2
  2208  03CD  2BD4               	goto	l2280
  2209                           
  2210                           ;OS.c: 49: {;OS.c: 50: Display_Counter=0;
  2211  03CE  01C4               	clrf	OS_Schedule@Display_Counter
  2212                           
  2213                           ;OS.c: 52: Display_Update();
  2214  03CF  120A  118A  220B  120A  118A  	fcall	_Display_Update
  2215  03D4                     l2280:	
  2216                           
  2217                           ;OS.c: 53: };OS.c: 55: TIME_WaitTimeSandwich();
  2218  03D4  120A  158A  263D  120A  118A  	fcall	_TIME_WaitTimeSandwich
  2219                           
  2220                           ;OS.c: 58: Motor_OutputUpdate();
  2221  03D9  120A  118A  2508  120A  118A  	fcall	_Motor_OutputUpdate
  2222                           
  2223                           ;OS.c: 60: if(Motor_SoftSwitch_Counter==40)
  2224  03DE  3028               	movlw	40
  2225  03DF  1283               	bcf	3,5	;RP0=0, select bank0
  2226  03E0  1303               	bcf	3,6	;RP1=0, select bank0
  2227  03E1  0642               	xorwf	OS_Schedule@Motor_SoftSwitch_Counter,w
  2228  03E2  1D03               	btfss	3,2
  2229  03E3  2BEA               	goto	l2290
  2230                           
  2231                           ;OS.c: 61: {;OS.c: 62: Motor_SoftSwitch_Counter=0;
  2232  03E4  01C2               	clrf	OS_Schedule@Motor_SoftSwitch_Counter
  2233                           
  2234                           ;OS.c: 64: Motor_SoftSwitchingUpdate();
  2235  03E5  120A  118A  27DE  120A  118A  	fcall	_Motor_SoftSwitchingUpdate
  2236  03EA                     l2290:	
  2237                           
  2238                           ;OS.c: 65: };OS.c: 67: if(Motor_HarmonicReduction_Counter==20)
  2239  03EA  3014               	movlw	20
  2240  03EB  1283               	bcf	3,5	;RP0=0, select bank0
  2241  03EC  1303               	bcf	3,6	;RP1=0, select bank0
  2242  03ED  0641               	xorwf	OS_Schedule@Motor_HarmonicReduction_Counter,w
  2243  03EE  1D03               	btfss	3,2
  2244  03EF  2BF6               	goto	l2296
  2245                           
  2246                           ;OS.c: 68: {;OS.c: 69: Motor_HarmonicReduction_Counter=0;
  2247  03F0  01C1               	clrf	OS_Schedule@Motor_HarmonicReduction_Counter
  2248                           
  2249                           ;OS.c: 71: Motor_HarmonicReductionUpdate();
  2250  03F1  120A  118A  25AC  120A  118A  	fcall	_Motor_HarmonicReductionUpdate
  2251  03F6                     l2296:	
  2252                           
  2253                           ;OS.c: 72: };OS.c: 74: if(Button_Counter==20)
  2254  03F6  3014               	movlw	20
  2255  03F7  1283               	bcf	3,5	;RP0=0, select bank0
  2256  03F8  1303               	bcf	3,6	;RP1=0, select bank0
  2257  03F9  0645               	xorwf	OS_Schedule@Button_Counter,w
  2258  03FA  1D03               	btfss	3,2
  2259  03FB  0008               	return
  2260                           
  2261                           ;OS.c: 75: {;OS.c: 76: Button_Counter=0;
  2262  03FC  01C5               	clrf	OS_Schedule@Button_Counter
  2263                           
  2264                           ;OS.c: 78: Button_Update();
  2265  03FD  120A  158A  25C0   	fcall	_Button_Update
  2266  0400  0008               	return
  2267  0401                     __end_of_OS_Schedule:	
  2268                           
  2269                           	psect	text6
  2270  00E9                     __ptext6:	
  2271 ;; *************** function _VC_Update *****************
  2272 ;; Defined at:
  2273 ;;		line 21 in file "VC.c"
  2274 ;; Parameters:    Size  Location     Type
  2275 ;;		None
  2276 ;; Auto vars:     Size  Location     Type
  2277 ;;		None
  2278 ;; Return value:  Size  Location     Type
  2279 ;;                  1    wreg      void 
  2280 ;; Registers used:
  2281 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2282 ;; Tracked objects:
  2283 ;;		On entry : 0/0
  2284 ;;		On exit  : 0/0
  2285 ;;		Unchanged: 0/0
  2286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2287 ;;      Params:         0       0       0       0       0
  2288 ;;      Locals:         0       0       0       0       0
  2289 ;;      Temps:          0       1       0       0       0
  2290 ;;      Totals:         0       1       0       0       0
  2291 ;;Total ram usage:        1 bytes
  2292 ;; Hardware stack levels used:    1
  2293 ;; Hardware stack levels required when called:    4
  2294 ;; This function calls:
  2295 ;;		_Button_GetPressingTime
  2296 ;;		_Button_GetState
  2297 ;;		_Motor_SetTargetAngle
  2298 ;;		___lwmod
  2299 ;; This function is called by:
  2300 ;;		_OS_Schedule
  2301 ;; This function uses a non-reentrant model
  2302 ;;
  2303                           
  2304                           
  2305                           ;psect for function _VC_Update
  2306  00E9                     _VC_Update:	
  2307                           
  2308                           ;VC.c: 23: switch(Speed_Level)
  2309                           
  2310                           ;incstack = 0
  2311                           ; Regs used in _VC_Update: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2312  00E9  295E               	goto	l2088
  2313  00EA                     l2060:	
  2314                           
  2315                           ;VC.c: 26: Motor_SetTargetAngle(MOTOR_ANGLE_140);
  2316  00EA  308C               	movlw	140
  2317  00EB  120A  158A  259B  120A  118A  	fcall	_Motor_SetTargetAngle
  2318  00F0                     L1:	
  2319                           
  2320                           ;VC.c: 27: if(Button_GetState(BUTTON_PLUS)==BUTTON_PRE_RELEASED)
  2321  00F0  3000               	movlw	0
  2322  00F1  120A  158A  25AB  120A  118A  	fcall	_Button_GetState
  2323  00F6  3A03               	xorlw	3
  2324  00F7  1D03               	skipz
  2325  00F8  296B               	goto	l2090
  2326                           
  2327                           ;VC.c: 28: {;VC.c: 29: Speed_Level++;
  2328  00F9  3001               	movlw	1
  2329  00FA  1283               	bcf	3,5	;RP0=0, select bank0
  2330  00FB  1303               	bcf	3,6	;RP1=0, select bank0
  2331  00FC  00B0               	movwf	??_VC_Update
  2332  00FD  0830               	movf	??_VC_Update,w
  2333  00FE  07C9               	addwf	_Speed_Level,f
  2334  00FF  296B               	goto	l2090
  2335  0100                     l2066:	
  2336                           
  2337                           ;VC.c: 33: Motor_SetTargetAngle(MOTOR_ANGLE_90);
  2338  0100  305A               	movlw	90
  2339  0101  120A  158A  259B  120A  118A  	fcall	_Motor_SetTargetAngle
  2340                           
  2341                           ;VC.c: 34: if(Button_GetState(BUTTON_MINUS)==BUTTON_PRE_RELEASED || (Button_GetPressingT
      +                          ime(BUTTON_DUST)%30000==0))
  2342  0106  3001               	movlw	1
  2343  0107  120A  158A  25AB  120A  118A  	fcall	_Button_GetState
  2344  010C  3A03               	xorlw	3
  2345  010D  1903               	skipnz
  2346  010E  292C               	goto	l2072
  2347  010F  3030               	movlw	48
  2348  0110  1283               	bcf	3,5	;RP0=0, select bank0
  2349  0111  1303               	bcf	3,6	;RP1=0, select bank0
  2350  0112  00AA               	movwf	___lwmod@divisor
  2351  0113  3075               	movlw	117
  2352  0114  00AB               	movwf	___lwmod@divisor+1
  2353  0115  3002               	movlw	2
  2354  0116  120A  158A  25FF  120A  118A  	fcall	_Button_GetPressingTime
  2355  011B  1283               	bcf	3,5	;RP0=0, select bank0
  2356  011C  1303               	bcf	3,6	;RP1=0, select bank0
  2357  011D  0825               	movf	?_Button_GetPressingTime+1,w
  2358  011E  00AD               	movwf	___lwmod@dividend+1
  2359  011F  0824               	movf	?_Button_GetPressingTime,w
  2360  0120  00AC               	movwf	___lwmod@dividend
  2361  0121  120A  118A  27AA  120A  118A  	fcall	___lwmod
  2362  0126  1283               	bcf	3,5	;RP0=0, select bank0
  2363  0127  1303               	bcf	3,6	;RP1=0, select bank0
  2364  0128  082A               	movf	?___lwmod,w
  2365  0129  042B               	iorwf	?___lwmod+1,w
  2366  012A  1D03               	btfss	3,2
  2367  012B  28F0               	goto	L1
  2368  012C                     l2072:	
  2369                           
  2370                           ;VC.c: 35: {;VC.c: 36: Speed_Level--;
  2371  012C  3001               	movlw	1
  2372  012D  1283               	bcf	3,5	;RP0=0, select bank0
  2373  012E  1303               	bcf	3,6	;RP1=0, select bank0
  2374  012F  02C9               	subwf	_Speed_Level,f
  2375                           
  2376                           ;VC.c: 37: }
  2377  0130  296B               	goto	l2090
  2378  0131                     l2078:	
  2379                           ;VC.c: 38: else if(Button_GetState(BUTTON_PLUS)==BUTTON_PRE_RELEASED)
  2380                           
  2381                           
  2382                           ;VC.c: 45: Motor_SetTargetAngle(MOTOR_ANGLE_10);
  2383  0131  300A               	movlw	10
  2384  0132  120A  158A  259B  120A  118A  	fcall	_Motor_SetTargetAngle
  2385                           
  2386                           ;VC.c: 46: if(Button_GetState(BUTTON_MINUS)==BUTTON_PRE_RELEASED || (Button_GetPressingT
      +                          ime(BUTTON_DUST)%30000==0))
  2387  0137  3001               	movlw	1
  2388  0138  120A  158A  25AB  120A  118A  	fcall	_Button_GetState
  2389  013D  3A03               	xorlw	3
  2390  013E  1903               	skipnz
  2391  013F  292C               	goto	l2072
  2392  0140  3030               	movlw	48
  2393  0141  1283               	bcf	3,5	;RP0=0, select bank0
  2394  0142  1303               	bcf	3,6	;RP1=0, select bank0
  2395  0143  00AA               	movwf	___lwmod@divisor
  2396  0144  3075               	movlw	117
  2397  0145  00AB               	movwf	___lwmod@divisor+1
  2398  0146  3002               	movlw	2
  2399  0147  120A  158A  25FF  120A  118A  	fcall	_Button_GetPressingTime
  2400  014C  1283               	bcf	3,5	;RP0=0, select bank0
  2401  014D  1303               	bcf	3,6	;RP1=0, select bank0
  2402  014E  0825               	movf	?_Button_GetPressingTime+1,w
  2403  014F  00AD               	movwf	___lwmod@dividend+1
  2404  0150  0824               	movf	?_Button_GetPressingTime,w
  2405  0151  00AC               	movwf	___lwmod@dividend
  2406  0152  120A  118A  27AA  120A  118A  	fcall	___lwmod
  2407  0157  1283               	bcf	3,5	;RP0=0, select bank0
  2408  0158  1303               	bcf	3,6	;RP1=0, select bank0
  2409  0159  082A               	movf	?___lwmod,w
  2410  015A  042B               	iorwf	?___lwmod+1,w
  2411  015B  1903               	btfsc	3,2
  2412  015C  292C               	goto	l2072
  2413  015D  296B               	goto	l2090
  2414  015E                     l2088:	
  2415  015E  1283               	bcf	3,5	;RP0=0, select bank0
  2416  015F  1303               	bcf	3,6	;RP1=0, select bank0
  2417  0160  0849               	movf	_Speed_Level,w
  2418                           
  2419                           ; Switch size 1, requested type "simple"
  2420                           ; Number of cases is 3, Range of values is 0 to 2
  2421                           ; switch strategies available:
  2422                           ; Name         Instructions Cycles
  2423                           ; simple_byte           10     6 (average)
  2424                           ; direct_byte           17     8 (fixed)
  2425                           ; jumptable            260     6 (fixed)
  2426                           ;	Chosen strategy is simple_byte
  2427  0161  3A00               	xorlw	0	; case 0
  2428  0162  1903               	skipnz
  2429  0163  28EA               	goto	l2060
  2430  0164  3A01               	xorlw	1	; case 1
  2431  0165  1903               	skipnz
  2432  0166  2900               	goto	l2066
  2433  0167  3A03               	xorlw	3	; case 2
  2434  0168  1903               	skipnz
  2435  0169  2931               	goto	l2078
  2436  016A  296B               	goto	l2090
  2437  016B                     l2090:	
  2438                           
  2439                           ;VC.c: 55: if(Button_GetState(BUTTON_DUST)==BUTTON_PRESSED)
  2440  016B  3002               	movlw	2
  2441  016C  120A  158A  25AB  120A  118A  	fcall	_Button_GetState
  2442  0171  3A02               	xorlw	2
  2443  0172  1D03               	skipz
  2444  0173  2979               	goto	l2094
  2445                           
  2446                           ;VC.c: 56: {;VC.c: 57: Dust_Bag_State=VC_DUST_BAG_FULL;
  2447  0174  1283               	bcf	3,5	;RP0=0, select bank0
  2448  0175  1303               	bcf	3,6	;RP1=0, select bank0
  2449  0176  01BD               	clrf	_Dust_Bag_State
  2450  0177  0ABD               	incf	_Dust_Bag_State,f
  2451                           
  2452                           ;VC.c: 58: }
  2453  0178  0008               	return
  2454  0179                     l2094:	
  2455                           
  2456                           ;VC.c: 59: else;VC.c: 60: {;VC.c: 61: Dust_Bag_State=VC_DUST_BAG_EMPTY;
  2457  0179  1283               	bcf	3,5	;RP0=0, select bank0
  2458  017A  1303               	bcf	3,6	;RP1=0, select bank0
  2459  017B  01BD               	clrf	_Dust_Bag_State
  2460  017C  0008               	return
  2461  017D                     __end_of_VC_Update:	
  2462                           
  2463                           	psect	text7
  2464  07AA                     __ptext7:	
  2465 ;; *************** function ___lwmod *****************
  2466 ;; Defined at:
  2467 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwmod.c"
  2468 ;; Parameters:    Size  Location     Type
  2469 ;;  divisor         2   10[BANK0 ] unsigned int 
  2470 ;;  dividend        2   12[BANK0 ] unsigned int 
  2471 ;; Auto vars:     Size  Location     Type
  2472 ;;  counter         1   15[BANK0 ] unsigned char 
  2473 ;; Return value:  Size  Location     Type
  2474 ;;                  2   10[BANK0 ] unsigned int 
  2475 ;; Registers used:
  2476 ;;		wreg, status,2, status,0
  2477 ;; Tracked objects:
  2478 ;;		On entry : 0/0
  2479 ;;		On exit  : 0/0
  2480 ;;		Unchanged: 0/0
  2481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2482 ;;      Params:         0       4       0       0       0
  2483 ;;      Locals:         0       1       0       0       0
  2484 ;;      Temps:          0       1       0       0       0
  2485 ;;      Totals:         0       6       0       0       0
  2486 ;;Total ram usage:        6 bytes
  2487 ;; Hardware stack levels used:    1
  2488 ;; Hardware stack levels required when called:    3
  2489 ;; This function calls:
  2490 ;;		Nothing
  2491 ;; This function is called by:
  2492 ;;		_VC_Update
  2493 ;; This function uses a non-reentrant model
  2494 ;;
  2495                           
  2496                           
  2497                           ;psect for function ___lwmod
  2498  07AA                     ___lwmod:	
  2499                           
  2500                           ;incstack = 0
  2501                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2502  07AA  1283               	bcf	3,5	;RP0=0, select bank0
  2503  07AB  1303               	bcf	3,6	;RP1=0, select bank0
  2504  07AC  082A               	movf	___lwmod@divisor,w
  2505  07AD  042B               	iorwf	___lwmod@divisor+1,w
  2506  07AE  1903               	btfsc	3,2
  2507  07AF  2FD9               	goto	l2000
  2508  07B0  01AF               	clrf	___lwmod@counter
  2509  07B1  0AAF               	incf	___lwmod@counter,f
  2510  07B2                     l1990:	
  2511  07B2  1BAB               	btfsc	___lwmod@divisor+1,7
  2512  07B3  2FC0               	goto	l1992
  2513  07B4  3001               	movlw	1
  2514  07B5                     u1515:	
  2515  07B5  1003               	clrc
  2516  07B6  0DAA               	rlf	___lwmod@divisor,f
  2517  07B7  0DAB               	rlf	___lwmod@divisor+1,f
  2518  07B8  3EFF               	addlw	-1
  2519  07B9  1D03               	skipz
  2520  07BA  2FB5               	goto	u1515
  2521  07BB  3001               	movlw	1
  2522  07BC  00AE               	movwf	??___lwmod
  2523  07BD  082E               	movf	??___lwmod,w
  2524  07BE  07AF               	addwf	___lwmod@counter,f
  2525  07BF  2FB2               	goto	l1990
  2526  07C0                     l1992:	
  2527  07C0  082B               	movf	___lwmod@divisor+1,w
  2528  07C1  022D               	subwf	___lwmod@dividend+1,w
  2529  07C2  1D03               	skipz
  2530  07C3  2FC6               	goto	u1535
  2531  07C4  082A               	movf	___lwmod@divisor,w
  2532  07C5  022C               	subwf	___lwmod@dividend,w
  2533  07C6                     u1535:	
  2534  07C6  1C03               	skipc
  2535  07C7  2FCE               	goto	l1996
  2536  07C8  082A               	movf	___lwmod@divisor,w
  2537  07C9  02AC               	subwf	___lwmod@dividend,f
  2538  07CA  082B               	movf	___lwmod@divisor+1,w
  2539  07CB  1C03               	skipc
  2540  07CC  03AD               	decf	___lwmod@dividend+1,f
  2541  07CD  02AD               	subwf	___lwmod@dividend+1,f
  2542  07CE                     l1996:	
  2543  07CE  3001               	movlw	1
  2544  07CF                     u1545:	
  2545  07CF  1003               	clrc
  2546  07D0  0CAB               	rrf	___lwmod@divisor+1,f
  2547  07D1  0CAA               	rrf	___lwmod@divisor,f
  2548  07D2  3EFF               	addlw	-1
  2549  07D3  1D03               	skipz
  2550  07D4  2FCF               	goto	u1545
  2551  07D5  3001               	movlw	1
  2552  07D6  02AF               	subwf	___lwmod@counter,f
  2553  07D7  1D03               	btfss	3,2
  2554  07D8  2FC0               	goto	l1992
  2555  07D9                     l2000:	
  2556  07D9  082D               	movf	___lwmod@dividend+1,w
  2557  07DA  00AB               	movwf	?___lwmod+1
  2558  07DB  082C               	movf	___lwmod@dividend,w
  2559  07DC  00AA               	movwf	?___lwmod
  2560  07DD  0008               	return
  2561  07DE                     __end_of___lwmod:	
  2562                           
  2563                           	psect	text8
  2564  0DAB                     __ptext8:	
  2565 ;; *************** function _Button_GetState *****************
  2566 ;; Defined at:
  2567 ;;		line 31 in file "Button.c"
  2568 ;; Parameters:    Size  Location     Type
  2569 ;;  button          1    wreg     enum E829
  2570 ;; Auto vars:     Size  Location     Type
  2571 ;;  button          1    4[BANK0 ] enum E829
  2572 ;; Return value:  Size  Location     Type
  2573 ;;                  1    wreg      enum E834
  2574 ;; Registers used:
  2575 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2576 ;; Tracked objects:
  2577 ;;		On entry : 0/0
  2578 ;;		On exit  : 0/0
  2579 ;;		Unchanged: 0/0
  2580 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2581 ;;      Params:         0       0       0       0       0
  2582 ;;      Locals:         0       1       0       0       0
  2583 ;;      Temps:          0       0       0       0       0
  2584 ;;      Totals:         0       1       0       0       0
  2585 ;;Total ram usage:        1 bytes
  2586 ;; Hardware stack levels used:    1
  2587 ;; Hardware stack levels required when called:    3
  2588 ;; This function calls:
  2589 ;;		Nothing
  2590 ;; This function is called by:
  2591 ;;		_VC_Update
  2592 ;; This function uses a non-reentrant model
  2593 ;;
  2594                           
  2595                           
  2596                           ;psect for function _Button_GetState
  2597  0DAB                     _Button_GetState:	
  2598                           
  2599                           ;incstack = 0
  2600                           ; Regs used in _Button_GetState: [wreg-fsr0h+status,2+status,0]
  2601                           ;Button_GetState@button stored from wreg
  2602  0DAB  1283               	bcf	3,5	;RP0=0, select bank0
  2603  0DAC  1303               	bcf	3,6	;RP1=0, select bank0
  2604  0DAD  00A4               	movwf	Button_GetState@button
  2605                           
  2606                           ;Button.c: 33: return ButtonState[button];
  2607  0DAE  0824               	movf	Button_GetState@button,w
  2608  0DAF  3E3A               	addlw	(low (_ButtonState| 0))& (0+255)
  2609  0DB0  0084               	movwf	4
  2610  0DB1  1383               	bcf	3,7	;select IRP bank0
  2611  0DB2  0800               	movf	0,w
  2612  0DB3  0008               	return
  2613  0DB4                     __end_of_Button_GetState:	
  2614                           
  2615                           	psect	text9
  2616  0DFF                     __ptext9:	
  2617 ;; *************** function _Button_GetPressingTime *****************
  2618 ;; Defined at:
  2619 ;;		line 36 in file "Button.c"
  2620 ;; Parameters:    Size  Location     Type
  2621 ;;  button          1    wreg     enum E829
  2622 ;; Auto vars:     Size  Location     Type
  2623 ;;  button          1    9[BANK0 ] enum E829
  2624 ;;  ret_val         2    7[BANK0 ] unsigned int 
  2625 ;; Return value:  Size  Location     Type
  2626 ;;                  2    4[BANK0 ] unsigned int 
  2627 ;; Registers used:
  2628 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2629 ;; Tracked objects:
  2630 ;;		On entry : 0/0
  2631 ;;		On exit  : 0/0
  2632 ;;		Unchanged: 0/0
  2633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2634 ;;      Params:         0       3       0       0       0
  2635 ;;      Locals:         0       3       0       0       0
  2636 ;;      Temps:          0       0       0       0       0
  2637 ;;      Totals:         0       6       0       0       0
  2638 ;;Total ram usage:        6 bytes
  2639 ;; Hardware stack levels used:    1
  2640 ;; Hardware stack levels required when called:    3
  2641 ;; This function calls:
  2642 ;;		Nothing
  2643 ;; This function is called by:
  2644 ;;		_VC_Update
  2645 ;; This function uses a non-reentrant model
  2646 ;;
  2647                           
  2648                           
  2649                           ;psect for function _Button_GetPressingTime
  2650  0DFF                     _Button_GetPressingTime:	
  2651                           
  2652                           ;incstack = 0
  2653                           ; Regs used in _Button_GetPressingTime: [wreg-fsr0h+status,2+status,0]
  2654                           ;Button_GetPressingTime@button stored from wreg
  2655  0DFF  1283               	bcf	3,5	;RP0=0, select bank0
  2656  0E00  1303               	bcf	3,6	;RP1=0, select bank0
  2657  0E01  00A9               	movwf	Button_GetPressingTime@button
  2658                           
  2659                           ;Button.c: 38: u16 ret_val;;Button.c: 39: switch(button)
  2660  0E02  2E08               	goto	l1818
  2661  0E03                     l1814:	
  2662                           
  2663                           ;Button.c: 42: ret_val=Dust_Button_Pressing_Time;
  2664  0E03  0848               	movf	_Dust_Button_Pressing_Time+1,w
  2665  0E04  00A8               	movwf	Button_GetPressingTime@ret_val+1
  2666  0E05  0847               	movf	_Dust_Button_Pressing_Time,w
  2667  0E06  00A7               	movwf	Button_GetPressingTime@ret_val
  2668                           
  2669                           ;Button.c: 43: break;
  2670  0E07  2E0D               	goto	l1820
  2671  0E08                     l1818:	
  2672  0E08  0829               	movf	Button_GetPressingTime@button,w
  2673                           
  2674                           ; Switch size 1, requested type "simple"
  2675                           ; Number of cases is 1, Range of values is 2 to 2
  2676                           ; switch strategies available:
  2677                           ; Name         Instructions Cycles
  2678                           ; simple_byte            4     3 (average)
  2679                           ; direct_byte           14    11 (fixed)
  2680                           ; jumptable            263     9 (fixed)
  2681                           ;	Chosen strategy is simple_byte
  2682  0E09  3A02               	xorlw	2	; case 2
  2683  0E0A  1903               	skipnz
  2684  0E0B  2E03               	goto	l1814
  2685  0E0C  2E0D               	goto	l1820
  2686  0E0D                     l1820:	
  2687                           
  2688                           ;Button.c: 45: return ret_val;
  2689  0E0D  0828               	movf	Button_GetPressingTime@ret_val+1,w
  2690  0E0E  00A5               	movwf	?_Button_GetPressingTime+1
  2691  0E0F  0827               	movf	Button_GetPressingTime@ret_val,w
  2692  0E10  00A4               	movwf	?_Button_GetPressingTime
  2693  0E11  0008               	return
  2694  0E12                     __end_of_Button_GetPressingTime:	
  2695                           
  2696                           	psect	text10
  2697  055B                     __ptext10:	
  2698 ;; *************** function _SSD_Update *****************
  2699 ;; Defined at:
  2700 ;;		line 66 in file "SSD.c"
  2701 ;; Parameters:    Size  Location     Type
  2702 ;;		None
  2703 ;; Auto vars:     Size  Location     Type
  2704 ;;  Current_Symb    1   15[BANK0 ] enum E834
  2705 ;; Return value:  Size  Location     Type
  2706 ;;                  1    wreg      void 
  2707 ;; Registers used:
  2708 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2709 ;; Tracked objects:
  2710 ;;		On entry : 0/0
  2711 ;;		On exit  : 0/0
  2712 ;;		Unchanged: 0/0
  2713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2714 ;;      Params:         0       0       0       0       0
  2715 ;;      Locals:         0       1       0       0       0
  2716 ;;      Temps:          0       2       0       0       0
  2717 ;;      Totals:         0       3       0       0       0
  2718 ;;Total ram usage:        3 bytes
  2719 ;; Hardware stack levels used:    1
  2720 ;; Hardware stack levels required when called:    5
  2721 ;; This function calls:
  2722 ;;		_GPIO_SetPortState
  2723 ;;		_SSD_SetCtrlLine
  2724 ;; This function is called by:
  2725 ;;		_OS_Schedule
  2726 ;; This function uses a non-reentrant model
  2727 ;;
  2728                           
  2729                           
  2730                           ;psect for function _SSD_Update
  2731  055B                     _SSD_Update:	
  2732                           
  2733                           ;SSD.c: 68: static tSSD Curr_Active_SSD=SSD_LEFT;;SSD.c: 70: tSSD_Symbol Current_Symbol=
      +                          Segments_Symbols_Array[Curr_Active_SSD];
  2734                           
  2735                           ;incstack = 0
  2736                           ; Regs used in _SSD_Update: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2737  055B  1283               	bcf	3,5	;RP0=0, select bank0
  2738  055C  1303               	bcf	3,6	;RP1=0, select bank0
  2739  055D  083E               	movf	SSD_Update@Curr_Active_SSD,w
  2740  055E  3E34               	addlw	(low (_Segments_Symbols_Array| 0))& (0+255)
  2741  055F  0084               	movwf	4
  2742  0560  1383               	bcf	3,7	;select IRP bank0
  2743  0561  0800               	movf	0,w
  2744  0562  00AD               	movwf	??_SSD_Update
  2745  0563  082D               	movf	??_SSD_Update,w
  2746  0564  00AF               	movwf	SSD_Update@Current_Symbol
  2747                           
  2748                           ;SSD.c: 72: SSD_SetCtrlLine(SSD_LEFT,0);
  2749  0565  01A9               	clrf	SSD_SetCtrlLine@state
  2750  0566  3000               	movlw	0
  2751  0567  120A  118A  2773  120A  118A  	fcall	_SSD_SetCtrlLine
  2752                           
  2753                           ;SSD.c: 73: SSD_SetCtrlLine(SSD_CENTER,0);
  2754  056C  1283               	bcf	3,5	;RP0=0, select bank0
  2755  056D  1303               	bcf	3,6	;RP1=0, select bank0
  2756  056E  01A9               	clrf	SSD_SetCtrlLine@state
  2757  056F  3001               	movlw	1
  2758  0570  120A  118A  2773  120A  118A  	fcall	_SSD_SetCtrlLine
  2759                           
  2760                           ;SSD.c: 74: SSD_SetCtrlLine(SSD_RIGHT,0);
  2761  0575  1283               	bcf	3,5	;RP0=0, select bank0
  2762  0576  1303               	bcf	3,6	;RP1=0, select bank0
  2763  0577  01A9               	clrf	SSD_SetCtrlLine@state
  2764  0578  3002               	movlw	2
  2765  0579  120A  118A  2773  120A  118A  	fcall	_SSD_SetCtrlLine
  2766                           
  2767                           ;SSD.c: 76: GPIO_SetPortState(GPIO_PORTD,0x7f,Symbol_Code_Array[Current_Symbol]);
  2768  057E  307F               	movlw	127
  2769  057F  1283               	bcf	3,5	;RP0=0, select bank0
  2770  0580  1303               	bcf	3,6	;RP1=0, select bank0
  2771  0581  00AD               	movwf	??_SSD_Update
  2772  0582  082D               	movf	??_SSD_Update,w
  2773  0583  00A4               	movwf	GPIO_SetPortState@mask
  2774  0584  082F               	movf	SSD_Update@Current_Symbol,w
  2775  0585  3E01               	addlw	low ((_Symbol_Code_Array-__stringbase)| (0+32768))
  2776  0586  0084               	movwf	4
  2777  0587  120A  158A  2000  120A  118A  	fcall	stringdir
  2778  058C  00AE               	movwf	??_SSD_Update+1
  2779  058D  082E               	movf	??_SSD_Update+1,w
  2780  058E  00A5               	movwf	GPIO_SetPortState@state
  2781  058F  3003               	movlw	3
  2782  0590  120A  118A  26FD  120A  118A  	fcall	_GPIO_SetPortState
  2783                           
  2784                           ;SSD.c: 78: SSD_SetCtrlLine(Curr_Active_SSD,1);
  2785  0595  1283               	bcf	3,5	;RP0=0, select bank0
  2786  0596  1303               	bcf	3,6	;RP1=0, select bank0
  2787  0597  01A9               	clrf	SSD_SetCtrlLine@state
  2788  0598  0AA9               	incf	SSD_SetCtrlLine@state,f
  2789  0599  083E               	movf	SSD_Update@Curr_Active_SSD,w
  2790  059A  120A  118A  2773  120A  118A  	fcall	_SSD_SetCtrlLine
  2791                           
  2792                           ;SSD.c: 80: if(Curr_Active_SSD < SSD_RIGHT)
  2793  059F  3002               	movlw	2
  2794  05A0  1283               	bcf	3,5	;RP0=0, select bank0
  2795  05A1  1303               	bcf	3,6	;RP1=0, select bank0
  2796  05A2  023E               	subwf	SSD_Update@Curr_Active_SSD,w
  2797  05A3  1803               	skipnc
  2798  05A4  2DAA               	goto	l2056
  2799                           
  2800                           ;SSD.c: 81: {;SSD.c: 82: Curr_Active_SSD++;
  2801  05A5  3001               	movlw	1
  2802  05A6  00AD               	movwf	??_SSD_Update
  2803  05A7  082D               	movf	??_SSD_Update,w
  2804  05A8  07BE               	addwf	SSD_Update@Curr_Active_SSD,f
  2805                           
  2806                           ;SSD.c: 83: }
  2807  05A9  0008               	return
  2808  05AA                     l2056:	
  2809                           
  2810                           ;SSD.c: 84: else;SSD.c: 85: {;SSD.c: 86: Curr_Active_SSD=SSD_LEFT;
  2811  05AA  01BE               	clrf	SSD_Update@Curr_Active_SSD
  2812  05AB  0008               	return
  2813  05AC                     __end_of_SSD_Update:	
  2814                           
  2815                           	psect	text11
  2816  0773                     __ptext11:	
  2817 ;; *************** function _SSD_SetCtrlLine *****************
  2818 ;; Defined at:
  2819 ;;		line 47 in file "SSD.c"
  2820 ;; Parameters:    Size  Location     Type
  2821 ;;  ssd             1    wreg     enum E829
  2822 ;;  state           1    9[BANK0 ] unsigned char 
  2823 ;; Auto vars:     Size  Location     Type
  2824 ;;  ssd             1   12[BANK0 ] enum E829
  2825 ;; Return value:  Size  Location     Type
  2826 ;;                  1    wreg      void 
  2827 ;; Registers used:
  2828 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2829 ;; Tracked objects:
  2830 ;;		On entry : 0/0
  2831 ;;		On exit  : 0/0
  2832 ;;		Unchanged: 0/0
  2833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2834 ;;      Params:         0       1       0       0       0
  2835 ;;      Locals:         0       1       0       0       0
  2836 ;;      Temps:          0       2       0       0       0
  2837 ;;      Totals:         0       4       0       0       0
  2838 ;;Total ram usage:        4 bytes
  2839 ;; Hardware stack levels used:    1
  2840 ;; Hardware stack levels required when called:    4
  2841 ;; This function calls:
  2842 ;;		_GPIO_SetPinState
  2843 ;; This function is called by:
  2844 ;;		_SSD_Update
  2845 ;; This function uses a non-reentrant model
  2846 ;;
  2847                           
  2848                           
  2849                           ;psect for function _SSD_SetCtrlLine
  2850  0773                     _SSD_SetCtrlLine:	
  2851                           
  2852                           ;incstack = 0
  2853                           ; Regs used in _SSD_SetCtrlLine: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2854                           ;SSD_SetCtrlLine@ssd stored from wreg
  2855  0773  1283               	bcf	3,5	;RP0=0, select bank0
  2856  0774  1303               	bcf	3,6	;RP1=0, select bank0
  2857  0775  00AC               	movwf	SSD_SetCtrlLine@ssd
  2858                           
  2859                           ;SSD.c: 49: switch(ssd)
  2860  0776  2F9E               	goto	l1966
  2861  0777                     l1958:	
  2862                           
  2863                           ;SSD.c: 52: GPIO_SetPinState(GPIO_PORTB,GPIO_PIN6,state);
  2864  0777  3006               	movlw	6
  2865  0778  00AA               	movwf	??_SSD_SetCtrlLine
  2866  0779  082A               	movf	??_SSD_SetCtrlLine,w
  2867  077A  00A4               	movwf	GPIO_SetPinState@pin
  2868  077B  0829               	movf	SSD_SetCtrlLine@state,w
  2869  077C  00AB               	movwf	??_SSD_SetCtrlLine+1
  2870  077D  082B               	movf	??_SSD_SetCtrlLine+1,w
  2871  077E  00A5               	movwf	GPIO_SetPinState@state
  2872  077F  3001               	movlw	1
  2873  0780  120A  118A  217D   	fcall	_GPIO_SetPinState
  2874                           
  2875                           ;SSD.c: 53: break;
  2876  0783  0008               	return
  2877  0784                     l1960:	
  2878                           
  2879                           ;SSD.c: 55: GPIO_SetPinState(GPIO_PORTB,GPIO_PIN5,state);
  2880  0784  3005               	movlw	5
  2881  0785  00AA               	movwf	??_SSD_SetCtrlLine
  2882  0786  082A               	movf	??_SSD_SetCtrlLine,w
  2883  0787  00A4               	movwf	GPIO_SetPinState@pin
  2884  0788  0829               	movf	SSD_SetCtrlLine@state,w
  2885  0789  00AB               	movwf	??_SSD_SetCtrlLine+1
  2886  078A  082B               	movf	??_SSD_SetCtrlLine+1,w
  2887  078B  00A5               	movwf	GPIO_SetPinState@state
  2888  078C  3001               	movlw	1
  2889  078D  120A  118A  217D   	fcall	_GPIO_SetPinState
  2890                           
  2891                           ;SSD.c: 56: break;
  2892  0790  0008               	return
  2893  0791                     l1962:	
  2894                           
  2895                           ;SSD.c: 58: GPIO_SetPinState(GPIO_PORTB,GPIO_PIN4,state);
  2896  0791  3004               	movlw	4
  2897  0792  00AA               	movwf	??_SSD_SetCtrlLine
  2898  0793  082A               	movf	??_SSD_SetCtrlLine,w
  2899  0794  00A4               	movwf	GPIO_SetPinState@pin
  2900  0795  0829               	movf	SSD_SetCtrlLine@state,w
  2901  0796  00AB               	movwf	??_SSD_SetCtrlLine+1
  2902  0797  082B               	movf	??_SSD_SetCtrlLine+1,w
  2903  0798  00A5               	movwf	GPIO_SetPinState@state
  2904  0799  3001               	movlw	1
  2905  079A  120A  118A  217D   	fcall	_GPIO_SetPinState
  2906                           
  2907                           ;SSD.c: 59: break;
  2908  079D  0008               	return
  2909  079E                     l1966:	
  2910  079E  082C               	movf	SSD_SetCtrlLine@ssd,w
  2911                           
  2912                           ; Switch size 1, requested type "simple"
  2913                           ; Number of cases is 3, Range of values is 0 to 2
  2914                           ; switch strategies available:
  2915                           ; Name         Instructions Cycles
  2916                           ; simple_byte           10     6 (average)
  2917                           ; direct_byte           17     8 (fixed)
  2918                           ; jumptable            260     6 (fixed)
  2919                           ;	Chosen strategy is simple_byte
  2920  079F  3A00               	xorlw	0	; case 0
  2921  07A0  1903               	skipnz
  2922  07A1  2F77               	goto	l1958
  2923  07A2  3A01               	xorlw	1	; case 1
  2924  07A3  1903               	skipnz
  2925  07A4  2F84               	goto	l1960
  2926  07A5  3A03               	xorlw	3	; case 2
  2927  07A6  1903               	skipnz
  2928  07A7  2F91               	goto	l1962
  2929  07A8  2FA9               	goto	l441
  2930  07A9                     l441:	
  2931  07A9  0008               	return
  2932  07AA                     __end_of_SSD_SetCtrlLine:	
  2933                           
  2934                           	psect	text12
  2935  06FD                     __ptext12:	
  2936 ;; *************** function _GPIO_SetPortState *****************
  2937 ;; Defined at:
  2938 ;;		line 78 in file "GPIO.c"
  2939 ;; Parameters:    Size  Location     Type
  2940 ;;  port            1    wreg     enum E829
  2941 ;;  mask            1    4[BANK0 ] unsigned char 
  2942 ;;  state           1    5[BANK0 ] enum E850
  2943 ;; Auto vars:     Size  Location     Type
  2944 ;;  port            1    7[BANK0 ] enum E829
  2945 ;; Return value:  Size  Location     Type
  2946 ;;                  1    wreg      void 
  2947 ;; Registers used:
  2948 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2949 ;; Tracked objects:
  2950 ;;		On entry : 0/0
  2951 ;;		On exit  : 0/0
  2952 ;;		Unchanged: 0/0
  2953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2954 ;;      Params:         0       2       0       0       0
  2955 ;;      Locals:         0       1       0       0       0
  2956 ;;      Temps:          0       1       0       0       0
  2957 ;;      Totals:         0       4       0       0       0
  2958 ;;Total ram usage:        4 bytes
  2959 ;; Hardware stack levels used:    1
  2960 ;; Hardware stack levels required when called:    3
  2961 ;; This function calls:
  2962 ;;		Nothing
  2963 ;; This function is called by:
  2964 ;;		_SSD_Update
  2965 ;; This function uses a non-reentrant model
  2966 ;;
  2967                           
  2968                           
  2969                           ;psect for function _GPIO_SetPortState
  2970  06FD                     _GPIO_SetPortState:	
  2971                           
  2972                           ;incstack = 0
  2973                           ; Regs used in _GPIO_SetPortState: [wreg-fsr0h+status,2+status,0]
  2974                           ;GPIO_SetPortState@port stored from wreg
  2975  06FD  1283               	bcf	3,5	;RP0=0, select bank0
  2976  06FE  1303               	bcf	3,6	;RP1=0, select bank0
  2977  06FF  00A7               	movwf	GPIO_SetPortState@port
  2978                           
  2979                           ;GPIO.c: 80: switch(port)
  2980  0700  2F29               	goto	l1926
  2981  0701                     l1914:	
  2982                           
  2983                           ;GPIO.c: 83: (PORTA = (((PORTA)&(~(mask))) | ((state)&(mask))));
  2984  0701  0824               	movf	GPIO_SetPortState@mask,w
  2985  0702  0525               	andwf	GPIO_SetPortState@state,w
  2986  0703  00A6               	movwf	??_GPIO_SetPortState
  2987  0704  0924               	comf	GPIO_SetPortState@mask,w
  2988  0705  0505               	andwf	5,w	;volatile
  2989  0706  0426               	iorwf	??_GPIO_SetPortState,w
  2990  0707  0085               	movwf	5	;volatile
  2991                           
  2992                           ;GPIO.c: 84: break;
  2993  0708  0008               	return
  2994  0709                     l1916:	
  2995                           
  2996                           ;GPIO.c: 86: (PORTB = (((PORTB)&(~(mask))) | ((state)&(mask))));
  2997  0709  0824               	movf	GPIO_SetPortState@mask,w
  2998  070A  0525               	andwf	GPIO_SetPortState@state,w
  2999  070B  00A6               	movwf	??_GPIO_SetPortState
  3000  070C  0924               	comf	GPIO_SetPortState@mask,w
  3001  070D  0506               	andwf	6,w	;volatile
  3002  070E  0426               	iorwf	??_GPIO_SetPortState,w
  3003  070F  0086               	movwf	6	;volatile
  3004                           
  3005                           ;GPIO.c: 87: break;
  3006  0710  0008               	return
  3007  0711                     l1918:	
  3008                           
  3009                           ;GPIO.c: 89: (PORTC = (((PORTC)&(~(mask))) | ((state)&(mask))));
  3010  0711  0824               	movf	GPIO_SetPortState@mask,w
  3011  0712  0525               	andwf	GPIO_SetPortState@state,w
  3012  0713  00A6               	movwf	??_GPIO_SetPortState
  3013  0714  0924               	comf	GPIO_SetPortState@mask,w
  3014  0715  0507               	andwf	7,w	;volatile
  3015  0716  0426               	iorwf	??_GPIO_SetPortState,w
  3016  0717  0087               	movwf	7	;volatile
  3017                           
  3018                           ;GPIO.c: 90: break;
  3019  0718  0008               	return
  3020  0719                     l1920:	
  3021                           
  3022                           ;GPIO.c: 92: (PORTD = (((PORTD)&(~(mask))) | ((state)&(mask))));
  3023  0719  0824               	movf	GPIO_SetPortState@mask,w
  3024  071A  0525               	andwf	GPIO_SetPortState@state,w
  3025  071B  00A6               	movwf	??_GPIO_SetPortState
  3026  071C  0924               	comf	GPIO_SetPortState@mask,w
  3027  071D  0508               	andwf	8,w	;volatile
  3028  071E  0426               	iorwf	??_GPIO_SetPortState,w
  3029  071F  0088               	movwf	8	;volatile
  3030                           
  3031                           ;GPIO.c: 93: break;
  3032  0720  0008               	return
  3033  0721                     l1922:	
  3034                           
  3035                           ;GPIO.c: 95: (PORTE = (((PORTE)&(~(mask))) | ((state)&(mask))));
  3036  0721  0824               	movf	GPIO_SetPortState@mask,w
  3037  0722  0525               	andwf	GPIO_SetPortState@state,w
  3038  0723  00A6               	movwf	??_GPIO_SetPortState
  3039  0724  0924               	comf	GPIO_SetPortState@mask,w
  3040  0725  0509               	andwf	9,w	;volatile
  3041  0726  0426               	iorwf	??_GPIO_SetPortState,w
  3042  0727  0089               	movwf	9	;volatile
  3043                           
  3044                           ;GPIO.c: 96: break;
  3045  0728  0008               	return
  3046  0729                     l1926:	
  3047  0729  0827               	movf	GPIO_SetPortState@port,w
  3048                           
  3049                           ; Switch size 1, requested type "simple"
  3050                           ; Number of cases is 5, Range of values is 0 to 4
  3051                           ; switch strategies available:
  3052                           ; Name         Instructions Cycles
  3053                           ; simple_byte           16     9 (average)
  3054                           ; direct_byte           23     8 (fixed)
  3055                           ; jumptable            260     6 (fixed)
  3056                           ;	Chosen strategy is simple_byte
  3057  072A  3A00               	xorlw	0	; case 0
  3058  072B  1903               	skipnz
  3059  072C  2F01               	goto	l1914
  3060  072D  3A01               	xorlw	1	; case 1
  3061  072E  1903               	skipnz
  3062  072F  2F09               	goto	l1916
  3063  0730  3A03               	xorlw	3	; case 2
  3064  0731  1903               	skipnz
  3065  0732  2F11               	goto	l1918
  3066  0733  3A01               	xorlw	1	; case 3
  3067  0734  1903               	skipnz
  3068  0735  2F19               	goto	l1920
  3069  0736  3A07               	xorlw	7	; case 4
  3070  0737  1903               	skipnz
  3071  0738  2F21               	goto	l1922
  3072  0739  2F3A               	goto	l134
  3073  073A                     l134:	
  3074  073A  0008               	return
  3075  073B                     __end_of_GPIO_SetPortState:	
  3076                           
  3077                           	psect	text13
  3078  07DE                     __ptext13:	
  3079 ;; *************** function _Motor_SoftSwitchingUpdate *****************
  3080 ;; Defined at:
  3081 ;;		line 32 in file "Motor.c"
  3082 ;; Parameters:    Size  Location     Type
  3083 ;;		None
  3084 ;; Auto vars:     Size  Location     Type
  3085 ;;		None
  3086 ;; Return value:  Size  Location     Type
  3087 ;;                  1    wreg      void 
  3088 ;; Registers used:
  3089 ;;		wreg, status,2, status,0
  3090 ;; Tracked objects:
  3091 ;;		On entry : 0/0
  3092 ;;		On exit  : 0/0
  3093 ;;		Unchanged: 0/0
  3094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3095 ;;      Params:         0       0       0       0       0
  3096 ;;      Locals:         0       0       0       0       0
  3097 ;;      Temps:          0       1       0       0       0
  3098 ;;      Totals:         0       1       0       0       0
  3099 ;;Total ram usage:        1 bytes
  3100 ;; Hardware stack levels used:    1
  3101 ;; Hardware stack levels required when called:    3
  3102 ;; This function calls:
  3103 ;;		Nothing
  3104 ;; This function is called by:
  3105 ;;		_OS_Schedule
  3106 ;; This function uses a non-reentrant model
  3107 ;;
  3108                           
  3109                           
  3110                           ;psect for function _Motor_SoftSwitchingUpdate
  3111  07DE                     _Motor_SoftSwitchingUpdate:	
  3112                           
  3113                           ;Motor.c: 34: if(Current_Motor_State == MOTOR_SOFT_SWITCHING)
  3114                           
  3115                           ;incstack = 0
  3116                           ; Regs used in _Motor_SoftSwitchingUpdate: [wreg+status,2+status,0]
  3117  07DE  1283               	bcf	3,5	;RP0=0, select bank0
  3118  07DF  1303               	bcf	3,6	;RP1=0, select bank0
  3119  07E0  0840               	movf	_Current_Motor_State,w
  3120  07E1  1D03               	btfss	3,2
  3121  07E2  0008               	return
  3122                           
  3123                           ;Motor.c: 35: {;Motor.c: 36: if(Actual_Angle == Target_Angle)
  3124  07E3  084A               	movf	_Actual_Angle,w
  3125  07E4  067D               	xorwf	_Target_Angle,w
  3126  07E5  1D03               	skipz
  3127  07E6  2FEF               	goto	l2130
  3128                           
  3129                           ;Motor.c: 37: {;Motor.c: 38: Current_Motor_State=MOTOR_HARMONIC_REDUCTION;
  3130  07E7  01C0               	clrf	_Current_Motor_State
  3131  07E8  0AC0               	incf	_Current_Motor_State,f
  3132                           
  3133                           ;Motor.c: 39: Harmonic_Angle=Actual_Angle+5;
  3134  07E9  084A               	movf	_Actual_Angle,w
  3135  07EA  3E05               	addlw	5
  3136  07EB  00A4               	movwf	??_Motor_SoftSwitchingUpdate
  3137  07EC  0824               	movf	??_Motor_SoftSwitchingUpdate,w
  3138  07ED  00BF               	movwf	_Harmonic_Angle
  3139                           
  3140                           ;Motor.c: 40: }
  3141  07EE  0008               	return
  3142  07EF                     l2130:	
  3143                           
  3144                           ;Motor.c: 41: else;Motor.c: 42: {;Motor.c: 43: if(Actual_Angle > Target_Angle)
  3145  07EF  084A               	movf	_Actual_Angle,w
  3146  07F0  027D               	subwf	_Target_Angle,w
  3147  07F1  1803               	skipnc
  3148  07F2  2FF6               	goto	l2134
  3149                           
  3150                           ;Motor.c: 44: {;Motor.c: 45: Actual_Angle--;
  3151  07F3  3001               	movlw	1
  3152  07F4  02CA               	subwf	_Actual_Angle,f
  3153                           
  3154                           ;Motor.c: 46: }
  3155  07F5  2FFA               	goto	l2136
  3156  07F6                     l2134:	
  3157                           
  3158                           ;Motor.c: 47: else;Motor.c: 48: {;Motor.c: 49: Actual_Angle++;
  3159  07F6  3001               	movlw	1
  3160  07F7  00A4               	movwf	??_Motor_SoftSwitchingUpdate
  3161  07F8  0824               	movf	??_Motor_SoftSwitchingUpdate,w
  3162  07F9  07CA               	addwf	_Actual_Angle,f
  3163  07FA                     l2136:	
  3164                           
  3165                           ;Motor.c: 50: };Motor.c: 52: OutputAngle=Actual_Angle;
  3166  07FA  084A               	movf	_Actual_Angle,w
  3167  07FB  00A4               	movwf	??_Motor_SoftSwitchingUpdate
  3168  07FC  0824               	movf	??_Motor_SoftSwitchingUpdate,w
  3169  07FD  00CB               	movwf	_OutputAngle
  3170  07FE  0008               	return
  3171  07FF                     __end_of_Motor_SoftSwitchingUpdate:	
  3172                           
  3173                           	psect	text14
  3174  0508                     __ptext14:	
  3175 ;; *************** function _Motor_OutputUpdate *****************
  3176 ;; Defined at:
  3177 ;;		line 84 in file "Motor.c"
  3178 ;; Parameters:    Size  Location     Type
  3179 ;;		None
  3180 ;; Auto vars:     Size  Location     Type
  3181 ;;  Bias_Time_US    2   17[BANK0 ] unsigned int 
  3182 ;; Return value:  Size  Location     Type
  3183 ;;                  1    wreg      void 
  3184 ;; Registers used:
  3185 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3186 ;; Tracked objects:
  3187 ;;		On entry : 0/0
  3188 ;;		On exit  : 0/0
  3189 ;;		Unchanged: 0/0
  3190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3191 ;;      Params:         0       0       0       0       0
  3192 ;;      Locals:         0       2       0       0       0
  3193 ;;      Temps:          0       2       0       0       0
  3194 ;;      Totals:         0       4       0       0       0
  3195 ;;Total ram usage:        4 bytes
  3196 ;; Hardware stack levels used:    1
  3197 ;; Hardware stack levels required when called:    6
  3198 ;; This function calls:
  3199 ;;		_GPIO_SetPinState
  3200 ;;		_TIME_TriggerDelayUS
  3201 ;;		___wmul
  3202 ;; This function is called by:
  3203 ;;		_OS_Schedule
  3204 ;; This function uses a non-reentrant model
  3205 ;;
  3206                           
  3207                           
  3208                           ;psect for function _Motor_OutputUpdate
  3209  0508                     _Motor_OutputUpdate:	
  3210                           
  3211                           ;Motor.c: 86: u16 Bias_Time_US=(55*(OutputAngle-10));
  3212                           
  3213                           ;incstack = 0
  3214                           ; Regs used in _Motor_OutputUpdate: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3215  0508  1283               	bcf	3,5	;RP0=0, select bank0
  3216  0509  1303               	bcf	3,6	;RP1=0, select bank0
  3217  050A  084B               	movf	_OutputAngle,w
  3218  050B  3EF6               	addlw	246
  3219  050C  00A4               	movwf	___wmul@multiplier
  3220  050D  30FF               	movlw	255
  3221  050E  1803               	skipnc
  3222  050F  3000               	movlw	0
  3223  0510  00A5               	movwf	___wmul@multiplier+1
  3224  0511  3037               	movlw	55
  3225  0512  00A6               	movwf	___wmul@multiplicand
  3226  0513  3000               	movlw	0
  3227  0514  00A7               	movwf	___wmul@multiplicand+1
  3228  0515  120A  158A  277C  120A  118A  	fcall	___wmul
  3229  051A  1283               	bcf	3,5	;RP0=0, select bank0
  3230  051B  1303               	bcf	3,6	;RP1=0, select bank0
  3231  051C  0825               	movf	?___wmul+1,w
  3232  051D  00B2               	movwf	Motor_OutputUpdate@Bias_Time_US+1
  3233  051E  0824               	movf	?___wmul,w
  3234  051F  00B1               	movwf	Motor_OutputUpdate@Bias_Time_US
  3235                           
  3236                           ;Motor.c: 88: TIME_TriggerDelayUS(Bias_Time_US);
  3237  0520  0832               	movf	Motor_OutputUpdate@Bias_Time_US+1,w
  3238  0521  00AE               	movwf	TIME_TriggerDelayUS@delay_us+1
  3239  0522  0831               	movf	Motor_OutputUpdate@Bias_Time_US,w
  3240  0523  00AD               	movwf	TIME_TriggerDelayUS@delay_us
  3241  0524  120A  158A  25CE  120A  118A  	fcall	_TIME_TriggerDelayUS
  3242                           
  3243                           ;Motor.c: 90: GPIO_SetPinState(GPIO_PORTC,GPIO_PIN0,GPIO_HIGH);
  3244  0529  1283               	bcf	3,5	;RP0=0, select bank0
  3245  052A  1303               	bcf	3,6	;RP1=0, select bank0
  3246  052B  01A4               	clrf	GPIO_SetPinState@pin
  3247  052C  01A5               	clrf	GPIO_SetPinState@state
  3248  052D  0AA5               	incf	GPIO_SetPinState@state,f
  3249  052E  3002               	movlw	2
  3250  052F  120A  118A  217D  120A  118A  	fcall	_GPIO_SetPinState
  3251                           
  3252                           ;Motor.c: 92: TIME_TriggerDelayUS(100);
  3253  0534  3064               	movlw	100
  3254  0535  1283               	bcf	3,5	;RP0=0, select bank0
  3255  0536  1303               	bcf	3,6	;RP1=0, select bank0
  3256  0537  00AD               	movwf	TIME_TriggerDelayUS@delay_us
  3257  0538  3000               	movlw	0
  3258  0539  00AE               	movwf	TIME_TriggerDelayUS@delay_us+1
  3259  053A  120A  158A  25CE  120A  118A  	fcall	_TIME_TriggerDelayUS
  3260                           
  3261                           ;Motor.c: 94: GPIO_SetPinState(GPIO_PORTC,GPIO_PIN0,GPIO_LOW);
  3262  053F  1283               	bcf	3,5	;RP0=0, select bank0
  3263  0540  1303               	bcf	3,6	;RP1=0, select bank0
  3264  0541  01A4               	clrf	GPIO_SetPinState@pin
  3265  0542  01A5               	clrf	GPIO_SetPinState@state
  3266  0543  3002               	movlw	2
  3267  0544  120A  118A  217D  120A  118A  	fcall	_GPIO_SetPinState
  3268                           
  3269                           ;Motor.c: 96: TIME_TriggerDelayUS((55*160)-Bias_Time_US);
  3270  0549  3060               	movlw	96
  3271  054A  1283               	bcf	3,5	;RP0=0, select bank0
  3272  054B  1303               	bcf	3,6	;RP1=0, select bank0
  3273  054C  00AF               	movwf	??_Motor_OutputUpdate
  3274  054D  3022               	movlw	34
  3275  054E  00B0               	movwf	??_Motor_OutputUpdate+1
  3276  054F  0831               	movf	Motor_OutputUpdate@Bias_Time_US,w
  3277  0550  022F               	subwf	??_Motor_OutputUpdate,w
  3278  0551  00AD               	movwf	TIME_TriggerDelayUS@delay_us
  3279  0552  0832               	movf	Motor_OutputUpdate@Bias_Time_US+1,w
  3280  0553  1C03               	skipc
  3281  0554  0A32               	incf	Motor_OutputUpdate@Bias_Time_US+1,w
  3282  0555  0230               	subwf	??_Motor_OutputUpdate+1,w
  3283  0556  00AE               	movwf	TIME_TriggerDelayUS@delay_us+1
  3284  0557  120A  158A  25CE   	fcall	_TIME_TriggerDelayUS
  3285  055A  0008               	return
  3286  055B                     __end_of_Motor_OutputUpdate:	
  3287                           
  3288                           	psect	text15
  3289  0DCE                     __ptext15:	
  3290 ;; *************** function _TIME_TriggerDelayUS *****************
  3291 ;; Defined at:
  3292 ;;		line 30 in file "Time.c"
  3293 ;; Parameters:    Size  Location     Type
  3294 ;;  delay_us        2   13[BANK0 ] unsigned int 
  3295 ;; Auto vars:     Size  Location     Type
  3296 ;;		None
  3297 ;; Return value:  Size  Location     Type
  3298 ;;                  1    wreg      void 
  3299 ;; Registers used:
  3300 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3301 ;; Tracked objects:
  3302 ;;		On entry : 0/0
  3303 ;;		On exit  : 0/0
  3304 ;;		Unchanged: 0/0
  3305 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3306 ;;      Params:         0       2       0       0       0
  3307 ;;      Locals:         0       0       0       0       0
  3308 ;;      Temps:          0       0       0       0       0
  3309 ;;      Totals:         0       2       0       0       0
  3310 ;;Total ram usage:        2 bytes
  3311 ;; Hardware stack levels used:    1
  3312 ;; Hardware stack levels required when called:    5
  3313 ;; This function calls:
  3314 ;;		_TIME_TriggerTimeSandwichUS
  3315 ;;		_TIME_WaitTimeSandwich
  3316 ;; This function is called by:
  3317 ;;		_Motor_OutputUpdate
  3318 ;; This function uses a non-reentrant model
  3319 ;;
  3320                           
  3321                           
  3322                           ;psect for function _TIME_TriggerDelayUS
  3323  0DCE                     _TIME_TriggerDelayUS:	
  3324                           
  3325                           ;Time.c: 32: TIME_TriggerTimeSandwichUS(delay_us);
  3326                           
  3327                           ;incstack = 0
  3328                           ; Regs used in _TIME_TriggerDelayUS: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3329  0DCE  1283               	bcf	3,5	;RP0=0, select bank0
  3330  0DCF  1303               	bcf	3,6	;RP1=0, select bank0
  3331  0DD0  082E               	movf	TIME_TriggerDelayUS@delay_us+1,w
  3332  0DD1  00AC               	movwf	TIME_TriggerTimeSandwichUS@delay_us+1
  3333  0DD2  082D               	movf	TIME_TriggerDelayUS@delay_us,w
  3334  0DD3  00AB               	movwf	TIME_TriggerTimeSandwichUS@delay_us
  3335  0DD4  120A  158A  266D  120A  158A  	fcall	_TIME_TriggerTimeSandwichUS
  3336                           
  3337                           ;Time.c: 33: TIME_WaitTimeSandwich();
  3338  0DD9  120A  158A  263D   	fcall	_TIME_WaitTimeSandwich
  3339  0DDC  0008               	return
  3340  0DDD                     __end_of_TIME_TriggerDelayUS:	
  3341                           
  3342                           	psect	text16
  3343  0E3D                     __ptext16:	
  3344 ;; *************** function _TIME_WaitTimeSandwich *****************
  3345 ;; Defined at:
  3346 ;;		line 23 in file "Time.c"
  3347 ;; Parameters:    Size  Location     Type
  3348 ;;		None
  3349 ;; Auto vars:     Size  Location     Type
  3350 ;;		None
  3351 ;; Return value:  Size  Location     Type
  3352 ;;                  1    wreg      void 
  3353 ;; Registers used:
  3354 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3355 ;; Tracked objects:
  3356 ;;		On entry : 0/0
  3357 ;;		On exit  : 0/0
  3358 ;;		Unchanged: 0/0
  3359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3360 ;;      Params:         0       0       0       0       0
  3361 ;;      Locals:         0       0       0       0       0
  3362 ;;      Temps:          0       0       0       0       0
  3363 ;;      Totals:         0       0       0       0       0
  3364 ;;Total ram usage:        0 bytes
  3365 ;; Hardware stack levels used:    1
  3366 ;; Hardware stack levels required when called:    4
  3367 ;; This function calls:
  3368 ;;		_Timer_CheckInterruptFlag
  3369 ;;		_Timer_ClearInterruptFlag
  3370 ;;		_Timer_SetState
  3371 ;; This function is called by:
  3372 ;;		_OS_Schedule
  3373 ;;		_TIME_TriggerDelayUS
  3374 ;; This function uses a non-reentrant model
  3375 ;;
  3376                           
  3377                           
  3378                           ;psect for function _TIME_WaitTimeSandwich
  3379  0E3D                     _TIME_WaitTimeSandwich:	
  3380  0E3D                     l1804:	
  3381                           ;Time.c: 25: while(Timer_CheckInterruptFlag(TIMER1)==0);
  3382                           
  3383                           ;incstack = 0
  3384                           ; Regs used in _TIME_WaitTimeSandwich: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3385                           
  3386  0E3D  3001               	movlw	1
  3387  0E3E  120A  158A  2654  120A  158A  	fcall	_Timer_CheckInterruptFlag
  3388  0E43  3A00               	xorlw	0
  3389  0E44  1903               	skipnz
  3390  0E45  2E3D               	goto	l1804
  3391                           
  3392                           ;Time.c: 26: Timer_ClearInterruptFlag(TIMER1);
  3393  0E46  3001               	movlw	1
  3394  0E47  120A  158A  25EE  120A  158A  	fcall	_Timer_ClearInterruptFlag
  3395                           
  3396                           ;Time.c: 27: Timer_SetState(TIMER1,0);
  3397  0E4C  1283               	bcf	3,5	;RP0=0, select bank0
  3398  0E4D  1303               	bcf	3,6	;RP1=0, select bank0
  3399  0E4E  01A4               	clrf	Timer_SetState@state
  3400  0E4F  3001               	movlw	1
  3401  0E50  120A  158A  2626   	fcall	_Timer_SetState
  3402  0E53  0008               	return
  3403  0E54                     __end_of_TIME_WaitTimeSandwich:	
  3404                           
  3405                           	psect	text17
  3406  0E54                     __ptext17:	
  3407 ;; *************** function _Timer_CheckInterruptFlag *****************
  3408 ;; Defined at:
  3409 ;;		line 87 in file "Timer.c"
  3410 ;; Parameters:    Size  Location     Type
  3411 ;;  timer           1    wreg     enum E829
  3412 ;; Auto vars:     Size  Location     Type
  3413 ;;  timer           1    4[BANK0 ] enum E829
  3414 ;;  flag_state      1    5[BANK0 ] unsigned char 
  3415 ;; Return value:  Size  Location     Type
  3416 ;;                  1    wreg      unsigned char 
  3417 ;; Registers used:
  3418 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3419 ;; Tracked objects:
  3420 ;;		On entry : 0/0
  3421 ;;		On exit  : 0/0
  3422 ;;		Unchanged: 0/0
  3423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3424 ;;      Params:         0       0       0       0       0
  3425 ;;      Locals:         0       2       0       0       0
  3426 ;;      Temps:          0       0       0       0       0
  3427 ;;      Totals:         0       2       0       0       0
  3428 ;;Total ram usage:        2 bytes
  3429 ;; Hardware stack levels used:    1
  3430 ;; Hardware stack levels required when called:    3
  3431 ;; This function calls:
  3432 ;;		Nothing
  3433 ;; This function is called by:
  3434 ;;		_TIME_WaitTimeSandwich
  3435 ;; This function uses a non-reentrant model
  3436 ;;
  3437                           
  3438                           
  3439                           ;psect for function _Timer_CheckInterruptFlag
  3440  0E54                     _Timer_CheckInterruptFlag:	
  3441                           
  3442                           ;incstack = 0
  3443                           ; Regs used in _Timer_CheckInterruptFlag: [wreg-fsr0h+status,2+status,0]
  3444                           ;Timer_CheckInterruptFlag@timer stored from wreg
  3445  0E54  1283               	bcf	3,5	;RP0=0, select bank0
  3446  0E55  1303               	bcf	3,6	;RP1=0, select bank0
  3447  0E56  00A4               	movwf	Timer_CheckInterruptFlag@timer
  3448                           
  3449                           ;Timer.c: 89: u8 flag_state=0;
  3450  0E57  01A5               	clrf	Timer_CheckInterruptFlag@flag_state
  3451                           
  3452                           ;Timer.c: 90: switch(timer)
  3453  0E58  2E63               	goto	l1758
  3454  0E59                     l1752:	
  3455                           
  3456                           ;Timer.c: 93: flag_state=(TMR0IF);
  3457  0E59  3000               	movlw	0
  3458  0E5A  190B               	btfsc	11,2	;volatile
  3459  0E5B  3001               	movlw	1
  3460  0E5C  00A5               	movwf	Timer_CheckInterruptFlag@flag_state
  3461                           
  3462                           ;Timer.c: 94: break;
  3463  0E5D  2E6B               	goto	l1760
  3464  0E5E                     l1754:	
  3465                           
  3466                           ;Timer.c: 96: flag_state=(TMR1IF);
  3467  0E5E  3000               	movlw	0
  3468  0E5F  180C               	btfsc	12,0	;volatile
  3469  0E60  3001               	movlw	1
  3470  0E61  00A5               	movwf	Timer_CheckInterruptFlag@flag_state
  3471                           
  3472                           ;Timer.c: 97: break;
  3473  0E62  2E6B               	goto	l1760
  3474  0E63                     l1758:	
  3475  0E63  0824               	movf	Timer_CheckInterruptFlag@timer,w
  3476                           
  3477                           ; Switch size 1, requested type "simple"
  3478                           ; Number of cases is 2, Range of values is 0 to 1
  3479                           ; switch strategies available:
  3480                           ; Name         Instructions Cycles
  3481                           ; simple_byte            7     4 (average)
  3482                           ; direct_byte           14     8 (fixed)
  3483                           ; jumptable            260     6 (fixed)
  3484                           ;	Chosen strategy is simple_byte
  3485  0E64  3A00               	xorlw	0	; case 0
  3486  0E65  1903               	skipnz
  3487  0E66  2E59               	goto	l1752
  3488  0E67  3A01               	xorlw	1	; case 1
  3489  0E68  1903               	skipnz
  3490  0E69  2E5E               	goto	l1754
  3491  0E6A  2E6B               	goto	l1760
  3492  0E6B                     l1760:	
  3493                           
  3494                           ;Timer.c: 99: return flag_state;
  3495  0E6B  0825               	movf	Timer_CheckInterruptFlag@flag_state,w
  3496  0E6C  0008               	return
  3497  0E6D                     __end_of_Timer_CheckInterruptFlag:	
  3498                           
  3499                           	psect	text18
  3500  0E6D                     __ptext18:	
  3501 ;; *************** function _TIME_TriggerTimeSandwichUS *****************
  3502 ;; Defined at:
  3503 ;;		line 16 in file "Time.c"
  3504 ;; Parameters:    Size  Location     Type
  3505 ;;  delay_us        2   11[BANK0 ] unsigned int 
  3506 ;; Auto vars:     Size  Location     Type
  3507 ;;		None
  3508 ;; Return value:  Size  Location     Type
  3509 ;;                  1    wreg      void 
  3510 ;; Registers used:
  3511 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3512 ;; Tracked objects:
  3513 ;;		On entry : 0/0
  3514 ;;		On exit  : 0/0
  3515 ;;		Unchanged: 0/0
  3516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3517 ;;      Params:         0       2       0       0       0
  3518 ;;      Locals:         0       0       0       0       0
  3519 ;;      Temps:          0       0       0       0       0
  3520 ;;      Totals:         0       2       0       0       0
  3521 ;;Total ram usage:        2 bytes
  3522 ;; Hardware stack levels used:    1
  3523 ;; Hardware stack levels required when called:    4
  3524 ;; This function calls:
  3525 ;;		_Timer_ClearInterruptFlag
  3526 ;;		_Timer_SetState
  3527 ;;		_Timer_SetTimeUS
  3528 ;; This function is called by:
  3529 ;;		_OS_Schedule
  3530 ;;		_TIME_TriggerDelayUS
  3531 ;; This function uses a non-reentrant model
  3532 ;;
  3533                           
  3534                           
  3535                           ;psect for function _TIME_TriggerTimeSandwichUS
  3536  0E6D                     _TIME_TriggerTimeSandwichUS:	
  3537                           
  3538                           ;Time.c: 18: Timer_SetTimeUS(TIMER1,delay_us);
  3539                           
  3540                           ;incstack = 0
  3541                           ; Regs used in _TIME_TriggerTimeSandwichUS: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3542  0E6D  1283               	bcf	3,5	;RP0=0, select bank0
  3543  0E6E  1303               	bcf	3,6	;RP1=0, select bank0
  3544  0E6F  082C               	movf	TIME_TriggerTimeSandwichUS@delay_us+1,w
  3545  0E70  00A5               	movwf	Timer_SetTimeUS@time+1
  3546  0E71  082B               	movf	TIME_TriggerTimeSandwichUS@delay_us,w
  3547  0E72  00A4               	movwf	Timer_SetTimeUS@time
  3548  0E73  3001               	movlw	1
  3549  0E74  120A  118A  273B  120A  158A  	fcall	_Timer_SetTimeUS
  3550                           
  3551                           ;Time.c: 19: Timer_ClearInterruptFlag(TIMER1);
  3552  0E79  3001               	movlw	1
  3553  0E7A  120A  158A  25EE  120A  158A  	fcall	_Timer_ClearInterruptFlag
  3554                           
  3555                           ;Time.c: 20: Timer_SetState(TIMER1,1);
  3556  0E7F  1283               	bcf	3,5	;RP0=0, select bank0
  3557  0E80  1303               	bcf	3,6	;RP1=0, select bank0
  3558  0E81  01A4               	clrf	Timer_SetState@state
  3559  0E82  0AA4               	incf	Timer_SetState@state,f
  3560  0E83  3001               	movlw	1
  3561  0E84  120A  158A  2626   	fcall	_Timer_SetState
  3562  0E87  0008               	return
  3563  0E88                     __end_of_TIME_TriggerTimeSandwichUS:	
  3564                           
  3565                           	psect	text19
  3566  073B                     __ptext19:	
  3567 ;; *************** function _Timer_SetTimeUS *****************
  3568 ;; Defined at:
  3569 ;;		line 60 in file "Timer.c"
  3570 ;; Parameters:    Size  Location     Type
  3571 ;;  timer           1    wreg     enum E829
  3572 ;;  time            2    4[BANK0 ] unsigned int 
  3573 ;; Auto vars:     Size  Location     Type
  3574 ;;  timer           1    8[BANK0 ] enum E829
  3575 ;;  count_no        2    9[BANK0 ] unsigned int 
  3576 ;; Return value:  Size  Location     Type
  3577 ;;                  1    wreg      void 
  3578 ;; Registers used:
  3579 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3580 ;; Tracked objects:
  3581 ;;		On entry : 0/0
  3582 ;;		On exit  : 0/0
  3583 ;;		Unchanged: 0/0
  3584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3585 ;;      Params:         0       2       0       0       0
  3586 ;;      Locals:         0       3       0       0       0
  3587 ;;      Temps:          0       2       0       0       0
  3588 ;;      Totals:         0       7       0       0       0
  3589 ;;Total ram usage:        7 bytes
  3590 ;; Hardware stack levels used:    1
  3591 ;; Hardware stack levels required when called:    3
  3592 ;; This function calls:
  3593 ;;		Nothing
  3594 ;; This function is called by:
  3595 ;;		_TIME_TriggerTimeSandwichUS
  3596 ;; This function uses a non-reentrant model
  3597 ;;
  3598                           
  3599                           
  3600                           ;psect for function _Timer_SetTimeUS
  3601  073B                     _Timer_SetTimeUS:	
  3602                           
  3603                           ;incstack = 0
  3604                           ; Regs used in _Timer_SetTimeUS: [wreg-fsr0h+status,2+status,0]
  3605                           ;Timer_SetTimeUS@timer stored from wreg
  3606  073B  1283               	bcf	3,5	;RP0=0, select bank0
  3607  073C  1303               	bcf	3,6	;RP1=0, select bank0
  3608  073D  00A8               	movwf	Timer_SetTimeUS@timer
  3609                           
  3610                           ;Timer.c: 62: u16 count_no;;Timer.c: 63: switch(timer)
  3611  073E  2F6A               	goto	l1748
  3612  073F                     l1738:	
  3613                           
  3614                           ;Timer.c: 66: count_no=(time)/(4*32);
  3615  073F  0825               	movf	Timer_SetTimeUS@time+1,w
  3616  0740  00A7               	movwf	??_Timer_SetTimeUS+1
  3617  0741  0824               	movf	Timer_SetTimeUS@time,w
  3618  0742  00A6               	movwf	??_Timer_SetTimeUS
  3619  0743  3007               	movlw	7
  3620  0744                     u1015:	
  3621  0744  1003               	clrc
  3622  0745  0CA7               	rrf	??_Timer_SetTimeUS+1,f
  3623  0746  0CA6               	rrf	??_Timer_SetTimeUS,f
  3624  0747  3EFF               	addlw	-1
  3625  0748  1D03               	skipz
  3626  0749  2F44               	goto	u1015
  3627  074A  0826               	movf	??_Timer_SetTimeUS,w
  3628  074B  00A9               	movwf	Timer_SetTimeUS@count_no
  3629  074C  0827               	movf	??_Timer_SetTimeUS+1,w
  3630  074D  00AA               	movwf	Timer_SetTimeUS@count_no+1
  3631                           
  3632                           ;Timer.c: 67: (TMR0=(0xff-count_no));
  3633  074E  0929               	comf	Timer_SetTimeUS@count_no,w
  3634  074F  0081               	movwf	1	;volatile
  3635                           
  3636                           ;Timer.c: 68: break;
  3637  0750  0008               	return
  3638  0751                     l1742:	
  3639                           
  3640                           ;Timer.c: 70: count_no=(time)/(4);
  3641  0751  0825               	movf	Timer_SetTimeUS@time+1,w
  3642  0752  00A7               	movwf	??_Timer_SetTimeUS+1
  3643  0753  0824               	movf	Timer_SetTimeUS@time,w
  3644  0754  00A6               	movwf	??_Timer_SetTimeUS
  3645  0755  1003               	clrc
  3646  0756  0CA7               	rrf	??_Timer_SetTimeUS+1,f
  3647  0757  0CA6               	rrf	??_Timer_SetTimeUS,f
  3648  0758  1003               	clrc
  3649  0759  0CA7               	rrf	??_Timer_SetTimeUS+1,f
  3650  075A  0CA6               	rrf	??_Timer_SetTimeUS,f
  3651  075B  0826               	movf	??_Timer_SetTimeUS,w
  3652  075C  00A9               	movwf	Timer_SetTimeUS@count_no
  3653  075D  0827               	movf	??_Timer_SetTimeUS+1,w
  3654  075E  00AA               	movwf	Timer_SetTimeUS@count_no+1
  3655                           
  3656                           ;Timer.c: 71: (TMR1H=((0xffff-count_no)&0xff00)>>8); (TMR1L=((0xffff-count_no)&0x00ff));
  3657  075F  082A               	movf	Timer_SetTimeUS@count_no+1,w
  3658  0760  00A7               	movwf	??_Timer_SetTimeUS+1
  3659  0761  0829               	movf	Timer_SetTimeUS@count_no,w
  3660  0762  00A6               	movwf	??_Timer_SetTimeUS
  3661  0763  09A6               	comf	??_Timer_SetTimeUS,f
  3662  0764  09A7               	comf	??_Timer_SetTimeUS+1,f
  3663  0765  0827               	movf	??_Timer_SetTimeUS+1,w
  3664  0766  008F               	movwf	15	;volatile
  3665  0767  0929               	comf	Timer_SetTimeUS@count_no,w
  3666  0768  008E               	movwf	14	;volatile
  3667                           
  3668                           ;Timer.c: 72: }
  3669  0769  0008               	return
  3670  076A                     l1748:	
  3671  076A  0828               	movf	Timer_SetTimeUS@timer,w
  3672                           
  3673                           ; Switch size 1, requested type "simple"
  3674                           ; Number of cases is 2, Range of values is 0 to 1
  3675                           ; switch strategies available:
  3676                           ; Name         Instructions Cycles
  3677                           ; simple_byte            7     4 (average)
  3678                           ; direct_byte           14     8 (fixed)
  3679                           ; jumptable            260     6 (fixed)
  3680                           ;	Chosen strategy is simple_byte
  3681  076B  3A00               	xorlw	0	; case 0
  3682  076C  1903               	skipnz
  3683  076D  2F3F               	goto	l1738
  3684  076E  3A01               	xorlw	1	; case 1
  3685  076F  1903               	skipnz
  3686  0770  2F51               	goto	l1742
  3687  0771  2F72               	goto	l322
  3688  0772                     l322:	
  3689  0772  0008               	return
  3690  0773                     __end_of_Timer_SetTimeUS:	
  3691                           
  3692                           	psect	text20
  3693  0DEE                     __ptext20:	
  3694 ;; *************** function _Timer_ClearInterruptFlag *****************
  3695 ;; Defined at:
  3696 ;;		line 75 in file "Timer.c"
  3697 ;; Parameters:    Size  Location     Type
  3698 ;;  timer           1    wreg     enum E829
  3699 ;; Auto vars:     Size  Location     Type
  3700 ;;  timer           1    4[BANK0 ] enum E829
  3701 ;; Return value:  Size  Location     Type
  3702 ;;                  1    wreg      void 
  3703 ;; Registers used:
  3704 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3705 ;; Tracked objects:
  3706 ;;		On entry : 0/0
  3707 ;;		On exit  : 0/0
  3708 ;;		Unchanged: 0/0
  3709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3710 ;;      Params:         0       0       0       0       0
  3711 ;;      Locals:         0       1       0       0       0
  3712 ;;      Temps:          0       0       0       0       0
  3713 ;;      Totals:         0       1       0       0       0
  3714 ;;Total ram usage:        1 bytes
  3715 ;; Hardware stack levels used:    1
  3716 ;; Hardware stack levels required when called:    3
  3717 ;; This function calls:
  3718 ;;		Nothing
  3719 ;; This function is called by:
  3720 ;;		_TIME_TriggerTimeSandwichUS
  3721 ;;		_TIME_WaitTimeSandwich
  3722 ;; This function uses a non-reentrant model
  3723 ;;
  3724                           
  3725                           
  3726                           ;psect for function _Timer_ClearInterruptFlag
  3727  0DEE                     _Timer_ClearInterruptFlag:	
  3728                           
  3729                           ;incstack = 0
  3730                           ; Regs used in _Timer_ClearInterruptFlag: [wreg-fsr0h+status,2+status,0]
  3731                           ;Timer_ClearInterruptFlag@timer stored from wreg
  3732  0DEE  1283               	bcf	3,5	;RP0=0, select bank0
  3733  0DEF  1303               	bcf	3,6	;RP1=0, select bank0
  3734  0DF0  00A4               	movwf	Timer_ClearInterruptFlag@timer
  3735                           
  3736                           ;Timer.c: 77: switch(timer)
  3737  0DF1  2DF6               	goto	l1728
  3738  0DF2                     l326:	
  3739                           ;Timer.c: 78: {;Timer.c: 79: case TIMER0:
  3740                           
  3741                           
  3742                           ;Timer.c: 80: (TMR0IF=0);
  3743  0DF2  110B               	bcf	11,2	;volatile
  3744                           
  3745                           ;Timer.c: 81: break;
  3746  0DF3  0008               	return
  3747  0DF4                     l328:	
  3748                           ;Timer.c: 82: case TIMER1:
  3749                           
  3750                           
  3751                           ;Timer.c: 83: (TMR1IF=0);
  3752  0DF4  100C               	bcf	12,0	;volatile
  3753                           
  3754                           ;Timer.c: 84: break;
  3755  0DF5  0008               	return
  3756  0DF6                     l1728:	
  3757  0DF6  0824               	movf	Timer_ClearInterruptFlag@timer,w
  3758                           
  3759                           ; Switch size 1, requested type "simple"
  3760                           ; Number of cases is 2, Range of values is 0 to 1
  3761                           ; switch strategies available:
  3762                           ; Name         Instructions Cycles
  3763                           ; simple_byte            7     4 (average)
  3764                           ; direct_byte           14     8 (fixed)
  3765                           ; jumptable            260     6 (fixed)
  3766                           ;	Chosen strategy is simple_byte
  3767  0DF7  3A00               	xorlw	0	; case 0
  3768  0DF8  1903               	skipnz
  3769  0DF9  2DF2               	goto	l326
  3770  0DFA  3A01               	xorlw	1	; case 1
  3771  0DFB  1903               	skipnz
  3772  0DFC  2DF4               	goto	l328
  3773  0DFD  2DFE               	goto	l329
  3774  0DFE                     l329:	
  3775  0DFE  0008               	return
  3776  0DFF                     __end_of_Timer_ClearInterruptFlag:	
  3777                           
  3778                           	psect	text21
  3779  05AC                     __ptext21:	
  3780 ;; *************** function _Motor_HarmonicReductionUpdate *****************
  3781 ;; Defined at:
  3782 ;;		line 59 in file "Motor.c"
  3783 ;; Parameters:    Size  Location     Type
  3784 ;;		None
  3785 ;; Auto vars:     Size  Location     Type
  3786 ;;		None
  3787 ;; Return value:  Size  Location     Type
  3788 ;;                  1    wreg      void 
  3789 ;; Registers used:
  3790 ;;		wreg, status,2, status,0, btemp+1
  3791 ;; Tracked objects:
  3792 ;;		On entry : 0/0
  3793 ;;		On exit  : 0/0
  3794 ;;		Unchanged: 0/0
  3795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3796 ;;      Params:         0       0       0       0       0
  3797 ;;      Locals:         0       0       0       0       0
  3798 ;;      Temps:          0       2       0       0       0
  3799 ;;      Totals:         0       2       0       0       0
  3800 ;;Total ram usage:        2 bytes
  3801 ;; Hardware stack levels used:    1
  3802 ;; Hardware stack levels required when called:    3
  3803 ;; This function calls:
  3804 ;;		Nothing
  3805 ;; This function is called by:
  3806 ;;		_OS_Schedule
  3807 ;; This function uses a non-reentrant model
  3808 ;;
  3809                           
  3810                           
  3811                           ;psect for function _Motor_HarmonicReductionUpdate
  3812  05AC                     _Motor_HarmonicReductionUpdate:	
  3813                           
  3814                           ;Motor.c: 61: if(Current_Motor_State == MOTOR_HARMONIC_REDUCTION)
  3815                           
  3816                           ;incstack = 0
  3817                           ; Regs used in _Motor_HarmonicReductionUpdate: [wreg+status,2+status,0+btemp+1]
  3818  05AC  1283               	bcf	3,5	;RP0=0, select bank0
  3819  05AD  1303               	bcf	3,6	;RP1=0, select bank0
  3820  05AE  0340               	decf	_Current_Motor_State,w
  3821  05AF  1D03               	btfss	3,2
  3822  05B0  0008               	return
  3823                           
  3824                           ;Motor.c: 62: {;Motor.c: 63: if(Actual_Angle != Target_Angle)
  3825  05B1  084A               	movf	_Actual_Angle,w
  3826  05B2  067D               	xorwf	_Target_Angle,w
  3827  05B3  1903               	skipnz
  3828  05B4  2DB7               	goto	l2144
  3829                           
  3830                           ;Motor.c: 64: {;Motor.c: 65: Current_Motor_State=MOTOR_SOFT_SWITCHING;
  3831  05B5  01C0               	clrf	_Current_Motor_State
  3832                           
  3833                           ;Motor.c: 66: }
  3834  05B6  0008               	return
  3835  05B7                     l2144:	
  3836                           
  3837                           ;Motor.c: 67: else if(Target_Angle-5 >= 10 &&;Motor.c: 68: Target_Angle+5 <= 170)
  3838  05B7  087D               	movf	_Target_Angle,w
  3839  05B8  3EFB               	addlw	251
  3840  05B9  00A4               	movwf	??_Motor_HarmonicReductionUpdate
  3841  05BA  30FF               	movlw	255
  3842  05BB  1803               	skipnc
  3843  05BC  3000               	movlw	0
  3844  05BD  00A5               	movwf	??_Motor_HarmonicReductionUpdate+1
  3845  05BE  0825               	movf	??_Motor_HarmonicReductionUpdate+1,w
  3846  05BF  3A80               	xorlw	128
  3847  05C0  00FF               	movwf	127
  3848  05C1  3080               	movlw	128
  3849  05C2  027F               	subwf	127,w
  3850  05C3  1D03               	skipz
  3851  05C4  2DC7               	goto	u1795
  3852  05C5  300A               	movlw	10
  3853  05C6  0224               	subwf	??_Motor_HarmonicReductionUpdate,w
  3854  05C7                     u1795:	
  3855  05C7  1C03               	skipc
  3856  05C8  0008               	return
  3857  05C9  087D               	movf	_Target_Angle,w
  3858  05CA  3E05               	addlw	5
  3859  05CB  1283               	bcf	3,5	;RP0=0, select bank0
  3860  05CC  1303               	bcf	3,6	;RP1=0, select bank0
  3861  05CD  00A4               	movwf	??_Motor_HarmonicReductionUpdate
  3862  05CE  3000               	movlw	0
  3863  05CF  1803               	skipnc
  3864  05D0  3001               	movlw	1
  3865  05D1  00A5               	movwf	??_Motor_HarmonicReductionUpdate+1
  3866  05D2  0825               	movf	??_Motor_HarmonicReductionUpdate+1,w
  3867  05D3  3A80               	xorlw	128
  3868  05D4  00FF               	movwf	127
  3869  05D5  3080               	movlw	128
  3870  05D6  027F               	subwf	127,w
  3871  05D7  1D03               	skipz
  3872  05D8  2DDB               	goto	u1805
  3873  05D9  30AB               	movlw	171
  3874  05DA  0224               	subwf	??_Motor_HarmonicReductionUpdate,w
  3875  05DB                     u1805:	
  3876  05DB  1803               	skipnc
  3877  05DC  0008               	return
  3878                           
  3879                           ;Motor.c: 69: {;Motor.c: 70: if(Harmonic_Angle > Target_Angle)
  3880  05DD  1283               	bcf	3,5	;RP0=0, select bank0
  3881  05DE  1303               	bcf	3,6	;RP1=0, select bank0
  3882  05DF  083F               	movf	_Harmonic_Angle,w
  3883  05E0  027D               	subwf	_Target_Angle,w
  3884  05E1  1803               	skipnc
  3885  05E2  2DE6               	goto	l2152
  3886                           
  3887                           ;Motor.c: 71: {;Motor.c: 72: Harmonic_Angle-=5*2;
  3888  05E3  300A               	movlw	10
  3889  05E4  02BF               	subwf	_Harmonic_Angle,f
  3890                           
  3891                           ;Motor.c: 73: }
  3892  05E5  2DEE               	goto	l2156
  3893  05E6                     l2152:	
  3894                           
  3895                           ;Motor.c: 74: else if(Harmonic_Angle < Target_Angle)
  3896  05E6  087D               	movf	_Target_Angle,w
  3897  05E7  023F               	subwf	_Harmonic_Angle,w
  3898  05E8  1803               	skipnc
  3899  05E9  2DEE               	goto	l2156
  3900                           
  3901                           ;Motor.c: 75: {;Motor.c: 76: Harmonic_Angle+=5*2;
  3902  05EA  300A               	movlw	10
  3903  05EB  00A4               	movwf	??_Motor_HarmonicReductionUpdate
  3904  05EC  0824               	movf	??_Motor_HarmonicReductionUpdate,w
  3905  05ED  07BF               	addwf	_Harmonic_Angle,f
  3906  05EE                     l2156:	
  3907                           
  3908                           ;Motor.c: 77: };Motor.c: 79: OutputAngle=Harmonic_Angle;
  3909  05EE  083F               	movf	_Harmonic_Angle,w
  3910  05EF  00A4               	movwf	??_Motor_HarmonicReductionUpdate
  3911  05F0  0824               	movf	??_Motor_HarmonicReductionUpdate,w
  3912  05F1  00CB               	movwf	_OutputAngle
  3913  05F2  0008               	return
  3914  05F3                     __end_of_Motor_HarmonicReductionUpdate:	
  3915                           
  3916                           	psect	text22
  3917  0F1B                     __ptext22:	
  3918 ;; *************** function _GPIO_TogglePinState *****************
  3919 ;; Defined at:
  3920 ;;		line 126 in file "GPIO.c"
  3921 ;; Parameters:    Size  Location     Type
  3922 ;;  port            1    wreg     enum E829
  3923 ;;  pin             1   10[BANK0 ] enum E836
  3924 ;; Auto vars:     Size  Location     Type
  3925 ;;  port            1   14[BANK0 ] enum E829
  3926 ;;  current_pin_    1   13[BANK0 ] enum E850
  3927 ;; Return value:  Size  Location     Type
  3928 ;;                  1    wreg      void 
  3929 ;; Registers used:
  3930 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3931 ;; Tracked objects:
  3932 ;;		On entry : 0/0
  3933 ;;		On exit  : 0/0
  3934 ;;		Unchanged: 0/0
  3935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3936 ;;      Params:         0       1       0       0       0
  3937 ;;      Locals:         0       2       0       0       0
  3938 ;;      Temps:          0       2       0       0       0
  3939 ;;      Totals:         0       5       0       0       0
  3940 ;;Total ram usage:        5 bytes
  3941 ;; Hardware stack levels used:    1
  3942 ;; Hardware stack levels required when called:    4
  3943 ;; This function calls:
  3944 ;;		_GPIO_GetPinState
  3945 ;;		_GPIO_SetPinState
  3946 ;; This function is called by:
  3947 ;;		_OS_Schedule
  3948 ;; This function uses a non-reentrant model
  3949 ;;
  3950                           
  3951                           
  3952                           ;psect for function _GPIO_TogglePinState
  3953  0F1B                     _GPIO_TogglePinState:	
  3954                           
  3955                           ;incstack = 0
  3956                           ; Regs used in _GPIO_TogglePinState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3957                           ;GPIO_TogglePinState@port stored from wreg
  3958  0F1B  1283               	bcf	3,5	;RP0=0, select bank0
  3959  0F1C  1303               	bcf	3,6	;RP1=0, select bank0
  3960  0F1D  00AE               	movwf	GPIO_TogglePinState@port
  3961                           
  3962                           ;GPIO.c: 128: tGPIO_State current_pin_state=GPIO_GetPinState(port,pin);
  3963  0F1E  082A               	movf	GPIO_TogglePinState@pin,w
  3964  0F1F  00AB               	movwf	??_GPIO_TogglePinState
  3965  0F20  082B               	movf	??_GPIO_TogglePinState,w
  3966  0F21  00A4               	movwf	GPIO_GetPinState@pin
  3967  0F22  082E               	movf	GPIO_TogglePinState@port,w
  3968  0F23  120A  118A  230B  120A  158A  	fcall	_GPIO_GetPinState
  3969  0F28  1283               	bcf	3,5	;RP0=0, select bank0
  3970  0F29  1303               	bcf	3,6	;RP1=0, select bank0
  3971  0F2A  00AC               	movwf	??_GPIO_TogglePinState+1
  3972  0F2B  082C               	movf	??_GPIO_TogglePinState+1,w
  3973  0F2C  00AD               	movwf	GPIO_TogglePinState@current_pin_state
  3974                           
  3975                           ;GPIO.c: 129: GPIO_SetPinState(port,pin,~current_pin_state);
  3976  0F2D  082A               	movf	GPIO_TogglePinState@pin,w
  3977  0F2E  00AB               	movwf	??_GPIO_TogglePinState
  3978  0F2F  082B               	movf	??_GPIO_TogglePinState,w
  3979  0F30  00A4               	movwf	GPIO_SetPinState@pin
  3980  0F31  092D               	comf	GPIO_TogglePinState@current_pin_state,w
  3981  0F32  00AC               	movwf	??_GPIO_TogglePinState+1
  3982  0F33  082C               	movf	??_GPIO_TogglePinState+1,w
  3983  0F34  00A5               	movwf	GPIO_SetPinState@state
  3984  0F35  082E               	movf	GPIO_TogglePinState@port,w
  3985  0F36  120A  118A  217D   	fcall	_GPIO_SetPinState
  3986  0F39  0008               	return
  3987  0F3A                     __end_of_GPIO_TogglePinState:	
  3988                           
  3989                           	psect	text23
  3990  020B                     __ptext23:	
  3991 ;; *************** function _Display_Update *****************
  3992 ;; Defined at:
  3993 ;;		line 12 in file "Display.c"
  3994 ;; Parameters:    Size  Location     Type
  3995 ;;		None
  3996 ;; Auto vars:     Size  Location     Type
  3997 ;;  dust_bag_sta    1   14[BANK0 ] enum E873
  3998 ;;  speed           1   13[BANK0 ] enum E868
  3999 ;; Return value:  Size  Location     Type
  4000 ;;                  1    wreg      void 
  4001 ;; Registers used:
  4002 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4003 ;; Tracked objects:
  4004 ;;		On entry : 0/0
  4005 ;;		On exit  : 0/0
  4006 ;;		Unchanged: 0/0
  4007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4008 ;;      Params:         0       0       0       0       0
  4009 ;;      Locals:         0       2       0       0       0
  4010 ;;      Temps:          0       1       0       0       0
  4011 ;;      Totals:         0       3       0       0       0
  4012 ;;Total ram usage:        3 bytes
  4013 ;; Hardware stack levels used:    1
  4014 ;; Hardware stack levels required when called:    5
  4015 ;; This function calls:
  4016 ;;		_LED_SetState
  4017 ;;		_SSD_SetSymbol
  4018 ;;		_VC_GetDustState
  4019 ;;		_VC_GetSpeedLevel
  4020 ;; This function is called by:
  4021 ;;		_OS_Schedule
  4022 ;; This function uses a non-reentrant model
  4023 ;;
  4024                           
  4025                           
  4026                           ;psect for function _Display_Update
  4027  020B                     _Display_Update:	
  4028                           
  4029                           ;Display.c: 14: tVC_Speed speed=VC_GetSpeedLevel();
  4030                           
  4031                           ;incstack = 0
  4032                           ; Regs used in _Display_Update: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4033  020B  120A  158A  258D  120A  118A  	fcall	_VC_GetSpeedLevel
  4034  0210  1283               	bcf	3,5	;RP0=0, select bank0
  4035  0211  1303               	bcf	3,6	;RP1=0, select bank0
  4036  0212  00AC               	movwf	??_Display_Update
  4037  0213  082C               	movf	??_Display_Update,w
  4038  0214  00AD               	movwf	Display_Update@speed
  4039                           
  4040                           ;Display.c: 15: tVC_DustBagState dust_bag_state=VC_GetDustState();
  4041  0215  120A  158A  2589  120A  118A  	fcall	_VC_GetDustState
  4042  021A  1283               	bcf	3,5	;RP0=0, select bank0
  4043  021B  1303               	bcf	3,6	;RP1=0, select bank0
  4044  021C  00AC               	movwf	??_Display_Update
  4045  021D  082C               	movf	??_Display_Update,w
  4046  021E  00AE               	movwf	Display_Update@dust_bag_state
  4047                           
  4048                           ;Display.c: 17: LED_SetState(LED_DUST_INDICATOR,dust_bag_state);
  4049  021F  082E               	movf	Display_Update@dust_bag_state,w
  4050  0220  00AC               	movwf	??_Display_Update
  4051  0221  082C               	movf	??_Display_Update,w
  4052  0222  00A9               	movwf	LED_SetState@state
  4053  0223  3000               	movlw	0
  4054  0224  120A  158A  2612  120A  118A  	fcall	_LED_SetState
  4055                           
  4056                           ;Display.c: 19: switch(speed)
  4057  0229  2A7E               	goto	l2108
  4058  022A                     l2100:	
  4059                           
  4060                           ;Display.c: 22: SSD_SetSymbol(SSD_LEFT,SSD_ONE_DASH);
  4061  022A  01A4               	clrf	SSD_SetSymbol@symbol
  4062  022B  0AA4               	incf	SSD_SetSymbol@symbol,f
  4063  022C  3000               	movlw	0
  4064  022D  120A  158A  25B4  120A  118A  	fcall	_SSD_SetSymbol
  4065                           
  4066                           ;Display.c: 23: SSD_SetSymbol(SSD_CENTER,SSD_NO_DASH);
  4067  0232  1283               	bcf	3,5	;RP0=0, select bank0
  4068  0233  1303               	bcf	3,6	;RP1=0, select bank0
  4069  0234  01A4               	clrf	SSD_SetSymbol@symbol
  4070  0235  3001               	movlw	1
  4071  0236  120A  158A  25B4  120A  118A  	fcall	_SSD_SetSymbol
  4072                           
  4073                           ;Display.c: 24: SSD_SetSymbol(SSD_RIGHT,SSD_NO_DASH);
  4074  023B  1283               	bcf	3,5	;RP0=0, select bank0
  4075  023C  1303               	bcf	3,6	;RP1=0, select bank0
  4076  023D  01A4               	clrf	SSD_SetSymbol@symbol
  4077  023E  3002               	movlw	2
  4078  023F  120A  158A  25B4   	fcall	_SSD_SetSymbol
  4079                           
  4080                           ;Display.c: 25: break;
  4081  0242  0008               	return
  4082  0243                     l2102:	
  4083                           
  4084                           ;Display.c: 27: SSD_SetSymbol(SSD_LEFT,SSD_ONE_DASH);
  4085  0243  01A4               	clrf	SSD_SetSymbol@symbol
  4086  0244  0AA4               	incf	SSD_SetSymbol@symbol,f
  4087  0245  3000               	movlw	0
  4088  0246  120A  158A  25B4  120A  118A  	fcall	_SSD_SetSymbol
  4089                           
  4090                           ;Display.c: 28: SSD_SetSymbol(SSD_CENTER,SSD_TWO_DASH);
  4091  024B  3002               	movlw	2
  4092  024C  1283               	bcf	3,5	;RP0=0, select bank0
  4093  024D  1303               	bcf	3,6	;RP1=0, select bank0
  4094  024E  00AC               	movwf	??_Display_Update
  4095  024F  082C               	movf	??_Display_Update,w
  4096  0250  00A4               	movwf	SSD_SetSymbol@symbol
  4097  0251  3001               	movlw	1
  4098  0252  120A  158A  25B4  120A  118A  	fcall	_SSD_SetSymbol
  4099                           
  4100                           ;Display.c: 29: SSD_SetSymbol(SSD_RIGHT,SSD_NO_DASH);
  4101  0257  1283               	bcf	3,5	;RP0=0, select bank0
  4102  0258  1303               	bcf	3,6	;RP1=0, select bank0
  4103  0259  01A4               	clrf	SSD_SetSymbol@symbol
  4104  025A  3002               	movlw	2
  4105  025B  120A  158A  25B4   	fcall	_SSD_SetSymbol
  4106                           
  4107                           ;Display.c: 30: break;
  4108  025E  0008               	return
  4109  025F                     l2104:	
  4110                           
  4111                           ;Display.c: 33: SSD_SetSymbol(SSD_LEFT,SSD_ONE_DASH);
  4112  025F  01A4               	clrf	SSD_SetSymbol@symbol
  4113  0260  0AA4               	incf	SSD_SetSymbol@symbol,f
  4114  0261  3000               	movlw	0
  4115  0262  120A  158A  25B4  120A  118A  	fcall	_SSD_SetSymbol
  4116                           
  4117                           ;Display.c: 34: SSD_SetSymbol(SSD_CENTER,SSD_TWO_DASH);
  4118  0267  3002               	movlw	2
  4119  0268  1283               	bcf	3,5	;RP0=0, select bank0
  4120  0269  1303               	bcf	3,6	;RP1=0, select bank0
  4121  026A  00AC               	movwf	??_Display_Update
  4122  026B  082C               	movf	??_Display_Update,w
  4123  026C  00A4               	movwf	SSD_SetSymbol@symbol
  4124  026D  3001               	movlw	1
  4125  026E  120A  158A  25B4  120A  118A  	fcall	_SSD_SetSymbol
  4126                           
  4127                           ;Display.c: 35: SSD_SetSymbol(SSD_RIGHT,SSD_THREE_DASH);
  4128  0273  3003               	movlw	3
  4129  0274  1283               	bcf	3,5	;RP0=0, select bank0
  4130  0275  1303               	bcf	3,6	;RP1=0, select bank0
  4131  0276  00AC               	movwf	??_Display_Update
  4132  0277  082C               	movf	??_Display_Update,w
  4133  0278  00A4               	movwf	SSD_SetSymbol@symbol
  4134  0279  3002               	movlw	2
  4135  027A  120A  158A  25B4   	fcall	_SSD_SetSymbol
  4136                           
  4137                           ;Display.c: 36: break;
  4138  027D  0008               	return
  4139  027E                     l2108:	
  4140  027E  1283               	bcf	3,5	;RP0=0, select bank0
  4141  027F  1303               	bcf	3,6	;RP1=0, select bank0
  4142  0280  082D               	movf	Display_Update@speed,w
  4143                           
  4144                           ; Switch size 1, requested type "simple"
  4145                           ; Number of cases is 3, Range of values is 0 to 2
  4146                           ; switch strategies available:
  4147                           ; Name         Instructions Cycles
  4148                           ; simple_byte           10     6 (average)
  4149                           ; direct_byte           17     8 (fixed)
  4150                           ; jumptable            260     6 (fixed)
  4151                           ;	Chosen strategy is simple_byte
  4152  0281  3A00               	xorlw	0	; case 0
  4153  0282  1903               	skipnz
  4154  0283  2A2A               	goto	l2100
  4155  0284  3A01               	xorlw	1	; case 1
  4156  0285  1903               	skipnz
  4157  0286  2A43               	goto	l2102
  4158  0287  3A03               	xorlw	3	; case 2
  4159  0288  1903               	skipnz
  4160  0289  2A5F               	goto	l2104
  4161  028A  2A8B               	goto	l363
  4162  028B                     l363:	
  4163  028B  0008               	return
  4164  028C                     __end_of_Display_Update:	
  4165                           
  4166                           	psect	text24
  4167  0D8D                     __ptext24:	
  4168 ;; *************** function _VC_GetSpeedLevel *****************
  4169 ;; Defined at:
  4170 ;;		line 13 in file "VC.c"
  4171 ;; Parameters:    Size  Location     Type
  4172 ;;		None
  4173 ;; Auto vars:     Size  Location     Type
  4174 ;;		None
  4175 ;; Return value:  Size  Location     Type
  4176 ;;                  1    wreg      enum E868
  4177 ;; Registers used:
  4178 ;;		wreg
  4179 ;; Tracked objects:
  4180 ;;		On entry : 0/0
  4181 ;;		On exit  : 0/0
  4182 ;;		Unchanged: 0/0
  4183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4184 ;;      Params:         0       0       0       0       0
  4185 ;;      Locals:         0       0       0       0       0
  4186 ;;      Temps:          0       0       0       0       0
  4187 ;;      Totals:         0       0       0       0       0
  4188 ;;Total ram usage:        0 bytes
  4189 ;; Hardware stack levels used:    1
  4190 ;; Hardware stack levels required when called:    3
  4191 ;; This function calls:
  4192 ;;		Nothing
  4193 ;; This function is called by:
  4194 ;;		_Display_Update
  4195 ;; This function uses a non-reentrant model
  4196 ;;
  4197                           
  4198                           
  4199                           ;psect for function _VC_GetSpeedLevel
  4200  0D8D                     _VC_GetSpeedLevel:	
  4201                           
  4202                           ;VC.c: 15: return Speed_Level;
  4203                           
  4204                           ;incstack = 0
  4205                           ; Regs used in _VC_GetSpeedLevel: [wreg]
  4206  0D8D  1283               	bcf	3,5	;RP0=0, select bank0
  4207  0D8E  1303               	bcf	3,6	;RP1=0, select bank0
  4208  0D8F  0849               	movf	_Speed_Level,w
  4209  0D90  0008               	return
  4210  0D91                     __end_of_VC_GetSpeedLevel:	
  4211                           
  4212                           	psect	text25
  4213  0D89                     __ptext25:	
  4214 ;; *************** function _VC_GetDustState *****************
  4215 ;; Defined at:
  4216 ;;		line 17 in file "VC.c"
  4217 ;; Parameters:    Size  Location     Type
  4218 ;;		None
  4219 ;; Auto vars:     Size  Location     Type
  4220 ;;		None
  4221 ;; Return value:  Size  Location     Type
  4222 ;;                  1    wreg      enum E873
  4223 ;; Registers used:
  4224 ;;		wreg
  4225 ;; Tracked objects:
  4226 ;;		On entry : 0/0
  4227 ;;		On exit  : 0/0
  4228 ;;		Unchanged: 0/0
  4229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4230 ;;      Params:         0       0       0       0       0
  4231 ;;      Locals:         0       0       0       0       0
  4232 ;;      Temps:          0       0       0       0       0
  4233 ;;      Totals:         0       0       0       0       0
  4234 ;;Total ram usage:        0 bytes
  4235 ;; Hardware stack levels used:    1
  4236 ;; Hardware stack levels required when called:    3
  4237 ;; This function calls:
  4238 ;;		Nothing
  4239 ;; This function is called by:
  4240 ;;		_Display_Update
  4241 ;; This function uses a non-reentrant model
  4242 ;;
  4243                           
  4244                           
  4245                           ;psect for function _VC_GetDustState
  4246  0D89                     _VC_GetDustState:	
  4247                           
  4248                           ;VC.c: 19: return Dust_Bag_State;
  4249                           
  4250                           ;incstack = 0
  4251                           ; Regs used in _VC_GetDustState: [wreg]
  4252  0D89  1283               	bcf	3,5	;RP0=0, select bank0
  4253  0D8A  1303               	bcf	3,6	;RP1=0, select bank0
  4254  0D8B  083D               	movf	_Dust_Bag_State,w
  4255  0D8C  0008               	return
  4256  0D8D                     __end_of_VC_GetDustState:	
  4257                           
  4258                           	psect	text26
  4259  0DB4                     __ptext26:	
  4260 ;; *************** function _SSD_SetSymbol *****************
  4261 ;; Defined at:
  4262 ;;		line 43 in file "SSD.c"
  4263 ;; Parameters:    Size  Location     Type
  4264 ;;  ssd             1    wreg     enum E829
  4265 ;;  symbol          1    4[BANK0 ] enum E834
  4266 ;; Auto vars:     Size  Location     Type
  4267 ;;  ssd             1    6[BANK0 ] enum E829
  4268 ;; Return value:  Size  Location     Type
  4269 ;;                  1    wreg      void 
  4270 ;; Registers used:
  4271 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4272 ;; Tracked objects:
  4273 ;;		On entry : 0/0
  4274 ;;		On exit  : 0/0
  4275 ;;		Unchanged: 0/0
  4276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4277 ;;      Params:         0       1       0       0       0
  4278 ;;      Locals:         0       1       0       0       0
  4279 ;;      Temps:          0       1       0       0       0
  4280 ;;      Totals:         0       3       0       0       0
  4281 ;;Total ram usage:        3 bytes
  4282 ;; Hardware stack levels used:    1
  4283 ;; Hardware stack levels required when called:    3
  4284 ;; This function calls:
  4285 ;;		Nothing
  4286 ;; This function is called by:
  4287 ;;		_Display_Update
  4288 ;;		_SSD_Init
  4289 ;; This function uses a non-reentrant model
  4290 ;;
  4291                           
  4292                           
  4293                           ;psect for function _SSD_SetSymbol
  4294  0DB4                     _SSD_SetSymbol:	
  4295                           
  4296                           ;incstack = 0
  4297                           ; Regs used in _SSD_SetSymbol: [wreg-fsr0h+status,2+status,0]
  4298                           ;SSD_SetSymbol@ssd stored from wreg
  4299  0DB4  1283               	bcf	3,5	;RP0=0, select bank0
  4300  0DB5  1303               	bcf	3,6	;RP1=0, select bank0
  4301  0DB6  00A6               	movwf	SSD_SetSymbol@ssd
  4302                           
  4303                           ;SSD.c: 45: Segments_Symbols_Array[ssd]=symbol;
  4304  0DB7  0824               	movf	SSD_SetSymbol@symbol,w
  4305  0DB8  00A5               	movwf	??_SSD_SetSymbol
  4306  0DB9  0826               	movf	SSD_SetSymbol@ssd,w
  4307  0DBA  3E34               	addlw	(low (_Segments_Symbols_Array| 0))& (0+255)
  4308  0DBB  0084               	movwf	4
  4309  0DBC  0825               	movf	??_SSD_SetSymbol,w
  4310  0DBD  1383               	bcf	3,7	;select IRP bank0
  4311  0DBE  0080               	movwf	0
  4312  0DBF  0008               	return
  4313  0DC0                     __end_of_SSD_SetSymbol:	
  4314                           
  4315                           	psect	text27
  4316  0E12                     __ptext27:	
  4317 ;; *************** function _LED_SetState *****************
  4318 ;; Defined at:
  4319 ;;		line 17 in file "LED.c"
  4320 ;; Parameters:    Size  Location     Type
  4321 ;;  led             1    wreg     enum E1
  4322 ;;  state           1    9[BANK0 ] enum E4
  4323 ;; Auto vars:     Size  Location     Type
  4324 ;;  led             1   11[BANK0 ] enum E1
  4325 ;; Return value:  Size  Location     Type
  4326 ;;                  1    wreg      void 
  4327 ;; Registers used:
  4328 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4329 ;; Tracked objects:
  4330 ;;		On entry : 0/0
  4331 ;;		On exit  : 0/0
  4332 ;;		Unchanged: 0/0
  4333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4334 ;;      Params:         0       1       0       0       0
  4335 ;;      Locals:         0       1       0       0       0
  4336 ;;      Temps:          0       1       0       0       0
  4337 ;;      Totals:         0       3       0       0       0
  4338 ;;Total ram usage:        3 bytes
  4339 ;; Hardware stack levels used:    1
  4340 ;; Hardware stack levels required when called:    4
  4341 ;; This function calls:
  4342 ;;		_GPIO_SetPinState
  4343 ;; This function is called by:
  4344 ;;		_Display_Update
  4345 ;; This function uses a non-reentrant model
  4346 ;;
  4347                           
  4348                           
  4349                           ;psect for function _LED_SetState
  4350  0E12                     _LED_SetState:	
  4351                           
  4352                           ;incstack = 0
  4353                           ; Regs used in _LED_SetState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4354                           ;LED_SetState@led stored from wreg
  4355  0E12  1283               	bcf	3,5	;RP0=0, select bank0
  4356  0E13  1303               	bcf	3,6	;RP1=0, select bank0
  4357  0E14  00AB               	movwf	LED_SetState@led
  4358                           
  4359                           ;LED.c: 19: switch(led)
  4360  0E15  2E20               	goto	l1934
  4361  0E16                     l1930:	
  4362                           
  4363                           ;LED.c: 22: GPIO_SetPinState(GPIO_PORTB,GPIO_PIN0,state);
  4364  0E16  01A4               	clrf	GPIO_SetPinState@pin
  4365  0E17  0829               	movf	LED_SetState@state,w
  4366  0E18  00AA               	movwf	??_LED_SetState
  4367  0E19  082A               	movf	??_LED_SetState,w
  4368  0E1A  00A5               	movwf	GPIO_SetPinState@state
  4369  0E1B  3001               	movlw	1
  4370  0E1C  120A  118A  217D   	fcall	_GPIO_SetPinState
  4371                           
  4372                           ;LED.c: 23: break;
  4373  0E1F  0008               	return
  4374  0E20                     l1934:	
  4375  0E20  082B               	movf	LED_SetState@led,w
  4376                           
  4377                           ; Switch size 1, requested type "simple"
  4378                           ; Number of cases is 1, Range of values is 0 to 0
  4379                           ; switch strategies available:
  4380                           ; Name         Instructions Cycles
  4381                           ; simple_byte            4     3 (average)
  4382                           ; direct_byte           11     8 (fixed)
  4383                           ; jumptable            260     6 (fixed)
  4384                           ;	Chosen strategy is simple_byte
  4385  0E21  3A00               	xorlw	0	; case 0
  4386  0E22  1903               	skipnz
  4387  0E23  2E16               	goto	l1930
  4388  0E24  2E25               	goto	l164
  4389  0E25                     l164:	
  4390  0E25  0008               	return
  4391  0E26                     __end_of_LED_SetState:	
  4392                           
  4393                           	psect	text28
  4394  0DC0                     __ptext28:	
  4395 ;; *************** function _Button_Update *****************
  4396 ;; Defined at:
  4397 ;;		line 175 in file "Button.c"
  4398 ;; Parameters:    Size  Location     Type
  4399 ;;		None
  4400 ;; Auto vars:     Size  Location     Type
  4401 ;;		None
  4402 ;; Return value:  Size  Location     Type
  4403 ;;                  1    wreg      void 
  4404 ;; Registers used:
  4405 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4406 ;; Tracked objects:
  4407 ;;		On entry : 0/0
  4408 ;;		On exit  : 0/0
  4409 ;;		Unchanged: 0/0
  4410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4411 ;;      Params:         0       0       0       0       0
  4412 ;;      Locals:         0       0       0       0       0
  4413 ;;      Temps:          0       0       0       0       0
  4414 ;;      Totals:         0       0       0       0       0
  4415 ;;Total ram usage:        0 bytes
  4416 ;; Hardware stack levels used:    1
  4417 ;; Hardware stack levels required when called:    5
  4418 ;; This function calls:
  4419 ;;		_Button_Dust_Update
  4420 ;;		_Button_Minus_Update
  4421 ;;		_Button_Plus_Update
  4422 ;; This function is called by:
  4423 ;;		_OS_Schedule
  4424 ;; This function uses a non-reentrant model
  4425 ;;
  4426                           
  4427                           
  4428                           ;psect for function _Button_Update
  4429  0DC0                     _Button_Update:	
  4430                           
  4431                           ;Button.c: 177: Button_Plus_Update();
  4432                           
  4433                           ;incstack = 0
  4434                           ; Regs used in _Button_Update: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4435  0DC0  120A  118A  26BC  120A  158A  	fcall	_Button_Plus_Update
  4436                           
  4437                           ;Button.c: 178: Button_Minus_Update();
  4438  0DC5  120A  118A  2637  120A  158A  	fcall	_Button_Minus_Update
  4439                           
  4440                           ;Button.c: 179: Button_Dust_Update();
  4441  0DCA  120A  118A  24B3   	fcall	_Button_Dust_Update
  4442  0DCD  0008               	return
  4443  0DCE                     __end_of_Button_Update:	
  4444                           
  4445                           	psect	text29
  4446  06BC                     __ptext29:	
  4447 ;; *************** function _Button_Plus_Update *****************
  4448 ;; Defined at:
  4449 ;;		line 48 in file "Button.c"
  4450 ;; Parameters:    Size  Location     Type
  4451 ;;		None
  4452 ;; Auto vars:     Size  Location     Type
  4453 ;;  ButtonCurrSa    1   11[BANK0 ] enum E869
  4454 ;; Return value:  Size  Location     Type
  4455 ;;                  1    wreg      void 
  4456 ;; Registers used:
  4457 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4458 ;; Tracked objects:
  4459 ;;		On entry : 0/0
  4460 ;;		On exit  : 0/0
  4461 ;;		Unchanged: 0/0
  4462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4463 ;;      Params:         0       0       0       0       0
  4464 ;;      Locals:         0       1       0       0       0
  4465 ;;      Temps:          0       1       0       0       0
  4466 ;;      Totals:         0       2       0       0       0
  4467 ;;Total ram usage:        2 bytes
  4468 ;; Hardware stack levels used:    1
  4469 ;; Hardware stack levels required when called:    4
  4470 ;; This function calls:
  4471 ;;		_GPIO_GetPinState
  4472 ;; This function is called by:
  4473 ;;		_Button_Update
  4474 ;; This function uses a non-reentrant model
  4475 ;;
  4476                           
  4477                           
  4478                           ;psect for function _Button_Plus_Update
  4479  06BC                     _Button_Plus_Update:	
  4480                           
  4481                           ;Button.c: 50: tGPIO_State ButtonCurrSample;;Button.c: 52: ButtonCurrSample=GPIO_GetPinS
      +                          tate(GPIO_PORTB,GPIO_PIN1);
  4482                           
  4483                           ;incstack = 0
  4484                           ; Regs used in _Button_Plus_Update: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4485  06BC  1283               	bcf	3,5	;RP0=0, select bank0
  4486  06BD  1303               	bcf	3,6	;RP1=0, select bank0
  4487  06BE  01A4               	clrf	GPIO_GetPinState@pin
  4488  06BF  0AA4               	incf	GPIO_GetPinState@pin,f
  4489  06C0  3001               	movlw	1
  4490  06C1  120A  118A  230B  120A  118A  	fcall	_GPIO_GetPinState
  4491  06C6  1283               	bcf	3,5	;RP0=0, select bank0
  4492  06C7  1303               	bcf	3,6	;RP1=0, select bank0
  4493  06C8  00AA               	movwf	??_Button_Plus_Update
  4494  06C9  082A               	movf	??_Button_Plus_Update,w
  4495  06CA  00AB               	movwf	Button_Plus_Update@ButtonCurrSample
  4496                           
  4497                           ;Button.c: 54: switch(ButtonState[BUTTON_PLUS])
  4498  06CB  2EEA               	goto	l1848
  4499  06CC                     l1826:	
  4500                           
  4501                           ;Button.c: 57: if((ButtonCurrSample== GPIO_LOW) && (ButtonPrevSample[BUTTON_PLUS]== GPIO
      +                          _LOW))
  4502  06CC  082B               	movf	Button_Plus_Update@ButtonCurrSample,w
  4503  06CD  1D03               	btfss	3,2
  4504  06CE  2EF8               	goto	l1850
  4505  06CF  0837               	movf	_ButtonPrevSample,w
  4506  06D0  1D03               	btfss	3,2
  4507  06D1  2EF8               	goto	l1850
  4508                           
  4509                           ;Button.c: 58: {;Button.c: 59: ButtonState[BUTTON_PLUS]=BUTTON_PRE_PRESSED;
  4510  06D2  01BA               	clrf	_ButtonState
  4511  06D3  0ABA               	incf	_ButtonState,f
  4512  06D4  2EF8               	goto	l1850
  4513  06D5                     l1832:	
  4514                           
  4515                           ;Button.c: 64: if(ButtonCurrSample== GPIO_LOW)
  4516  06D5  082B               	movf	Button_Plus_Update@ButtonCurrSample,w
  4517  06D6  1D03               	btfss	3,2
  4518  06D7  2EF8               	goto	l1850
  4519                           
  4520                           ;Button.c: 65: {;Button.c: 66: ButtonState[BUTTON_PLUS]=BUTTON_PRESSED;
  4521  06D8  3002               	movlw	2
  4522  06D9  2EE1               	goto	L2
  4523  06DA                     l1836:	
  4524                           
  4525                           ;Button.c: 71: if((ButtonCurrSample == GPIO_HIGH) && (ButtonPrevSample[BUTTON_PLUS]== GP
      +                          IO_HIGH))
  4526  06DA  032B               	decf	Button_Plus_Update@ButtonCurrSample,w
  4527  06DB  1D03               	btfss	3,2
  4528  06DC  2EF8               	goto	l1850
  4529  06DD  0337               	decf	_ButtonPrevSample,w
  4530  06DE  1D03               	btfss	3,2
  4531  06DF  2EF8               	goto	l1850
  4532                           
  4533                           ;Button.c: 72: {;Button.c: 73: ButtonState[BUTTON_PLUS]=BUTTON_PRE_RELEASED;
  4534  06E0  3003               	movlw	3
  4535  06E1                     L2:	
  4536  06E1  00AA               	movwf	??_Button_Plus_Update
  4537  06E2  082A               	movf	??_Button_Plus_Update,w
  4538  06E3  00BA               	movwf	_ButtonState
  4539  06E4  2EF8               	goto	l1850
  4540  06E5                     l1842:	
  4541                           
  4542                           ;Button.c: 78: if(ButtonCurrSample == GPIO_HIGH)
  4543  06E5  032B               	decf	Button_Plus_Update@ButtonCurrSample,w
  4544  06E6  1D03               	btfss	3,2
  4545  06E7  2EF8               	goto	l1850
  4546                           
  4547                           ;Button.c: 79: {;Button.c: 80: ButtonState[BUTTON_PLUS]=BUTTON_RELEASED;
  4548  06E8  01BA               	clrf	_ButtonState
  4549  06E9  2EF8               	goto	l1850
  4550  06EA                     l1848:	
  4551  06EA  083A               	movf	_ButtonState,w
  4552                           
  4553                           ; Switch size 1, requested type "simple"
  4554                           ; Number of cases is 4, Range of values is 0 to 3
  4555                           ; switch strategies available:
  4556                           ; Name         Instructions Cycles
  4557                           ; simple_byte           13     7 (average)
  4558                           ; direct_byte           20     8 (fixed)
  4559                           ; jumptable            260     6 (fixed)
  4560                           ;	Chosen strategy is simple_byte
  4561  06EB  3A00               	xorlw	0	; case 0
  4562  06EC  1903               	skipnz
  4563  06ED  2ECC               	goto	l1826
  4564  06EE  3A01               	xorlw	1	; case 1
  4565  06EF  1903               	skipnz
  4566  06F0  2ED5               	goto	l1832
  4567  06F1  3A03               	xorlw	3	; case 2
  4568  06F2  1903               	skipnz
  4569  06F3  2EDA               	goto	l1836
  4570  06F4  3A01               	xorlw	1	; case 3
  4571  06F5  1903               	skipnz
  4572  06F6  2EE5               	goto	l1842
  4573  06F7  2EF8               	goto	l1850
  4574  06F8                     l1850:	
  4575                           
  4576                           ;Button.c: 85: ButtonPrevSample[BUTTON_PLUS]=ButtonCurrSample;
  4577  06F8  082B               	movf	Button_Plus_Update@ButtonCurrSample,w
  4578  06F9  00AA               	movwf	??_Button_Plus_Update
  4579  06FA  082A               	movf	??_Button_Plus_Update,w
  4580  06FB  00B7               	movwf	_ButtonPrevSample
  4581  06FC  0008               	return
  4582  06FD                     __end_of_Button_Plus_Update:	
  4583                           
  4584                           	psect	text30
  4585  0637                     __ptext30:	
  4586 ;; *************** function _Button_Minus_Update *****************
  4587 ;; Defined at:
  4588 ;;		line 88 in file "Button.c"
  4589 ;; Parameters:    Size  Location     Type
  4590 ;;		None
  4591 ;; Auto vars:     Size  Location     Type
  4592 ;;  ButtonCurrSa    1   12[BANK0 ] enum E869
  4593 ;; Return value:  Size  Location     Type
  4594 ;;                  1    wreg      void 
  4595 ;; Registers used:
  4596 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4597 ;; Tracked objects:
  4598 ;;		On entry : 0/0
  4599 ;;		On exit  : 0/0
  4600 ;;		Unchanged: 0/0
  4601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4602 ;;      Params:         0       0       0       0       0
  4603 ;;      Locals:         0       1       0       0       0
  4604 ;;      Temps:          0       2       0       0       0
  4605 ;;      Totals:         0       3       0       0       0
  4606 ;;Total ram usage:        3 bytes
  4607 ;; Hardware stack levels used:    1
  4608 ;; Hardware stack levels required when called:    4
  4609 ;; This function calls:
  4610 ;;		_GPIO_GetPinState
  4611 ;; This function is called by:
  4612 ;;		_Button_Update
  4613 ;; This function uses a non-reentrant model
  4614 ;;
  4615                           
  4616                           
  4617                           ;psect for function _Button_Minus_Update
  4618  0637                     _Button_Minus_Update:	
  4619                           
  4620                           ;Button.c: 90: tGPIO_State ButtonCurrSample;;Button.c: 92: ButtonCurrSample=GPIO_GetPinS
      +                          tate(GPIO_PORTB,GPIO_PIN2);
  4621                           
  4622                           ;incstack = 0
  4623                           ; Regs used in _Button_Minus_Update: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4624  0637  3002               	movlw	2
  4625  0638  1283               	bcf	3,5	;RP0=0, select bank0
  4626  0639  1303               	bcf	3,6	;RP1=0, select bank0
  4627  063A  00AA               	movwf	??_Button_Minus_Update
  4628  063B  082A               	movf	??_Button_Minus_Update,w
  4629  063C  00A4               	movwf	GPIO_GetPinState@pin
  4630  063D  3001               	movlw	1
  4631  063E  120A  118A  230B  120A  118A  	fcall	_GPIO_GetPinState
  4632  0643  1283               	bcf	3,5	;RP0=0, select bank0
  4633  0644  1303               	bcf	3,6	;RP1=0, select bank0
  4634  0645  00AB               	movwf	??_Button_Minus_Update+1
  4635  0646  082B               	movf	??_Button_Minus_Update+1,w
  4636  0647  00AC               	movwf	Button_Minus_Update@ButtonCurrSample
  4637                           
  4638                           ;Button.c: 94: switch(ButtonState[BUTTON_MINUS])
  4639  0648  2E67               	goto	l1876
  4640  0649                     l1854:	
  4641                           
  4642                           ;Button.c: 97: if((ButtonCurrSample== GPIO_LOW)&& (ButtonPrevSample[BUTTON_MINUS]== GPIO
      +                          _LOW))
  4643  0649  082C               	movf	Button_Minus_Update@ButtonCurrSample,w
  4644  064A  1D03               	btfss	3,2
  4645  064B  2E75               	goto	l1878
  4646  064C  0838               	movf	_ButtonPrevSample+1,w
  4647  064D  1D03               	btfss	3,2
  4648  064E  2E75               	goto	l1878
  4649                           
  4650                           ;Button.c: 98: {;Button.c: 99: ButtonState[BUTTON_MINUS]=BUTTON_PRE_PRESSED;
  4651  064F  01BB               	clrf	_ButtonState+1
  4652  0650  0ABB               	incf	_ButtonState+1,f
  4653  0651  2E75               	goto	l1878
  4654  0652                     l1860:	
  4655                           
  4656                           ;Button.c: 104: if(ButtonCurrSample== GPIO_LOW)
  4657  0652  082C               	movf	Button_Minus_Update@ButtonCurrSample,w
  4658  0653  1D03               	btfss	3,2
  4659  0654  2E75               	goto	l1878
  4660                           
  4661                           ;Button.c: 105: {;Button.c: 106: ButtonState[BUTTON_MINUS]=BUTTON_PRESSED;
  4662  0655  3002               	movlw	2
  4663  0656  2E5E               	goto	L3
  4664  0657                     l1864:	
  4665                           
  4666                           ;Button.c: 111: if((ButtonCurrSample == GPIO_HIGH) && (ButtonPrevSample[BUTTON_MINUS]== 
      +                          GPIO_HIGH))
  4667  0657  032C               	decf	Button_Minus_Update@ButtonCurrSample,w
  4668  0658  1D03               	btfss	3,2
  4669  0659  2E75               	goto	l1878
  4670  065A  0338               	decf	_ButtonPrevSample+1,w
  4671  065B  1D03               	btfss	3,2
  4672  065C  2E75               	goto	l1878
  4673                           
  4674                           ;Button.c: 112: {;Button.c: 113: ButtonState[BUTTON_MINUS]=BUTTON_PRE_RELEASED;
  4675  065D  3003               	movlw	3
  4676  065E                     L3:	
  4677  065E  00AA               	movwf	??_Button_Minus_Update
  4678  065F  082A               	movf	??_Button_Minus_Update,w
  4679  0660  00BB               	movwf	_ButtonState+1
  4680  0661  2E75               	goto	l1878
  4681  0662                     l1870:	
  4682                           
  4683                           ;Button.c: 118: if(ButtonCurrSample == GPIO_HIGH)
  4684  0662  032C               	decf	Button_Minus_Update@ButtonCurrSample,w
  4685  0663  1D03               	btfss	3,2
  4686  0664  2E75               	goto	l1878
  4687                           
  4688                           ;Button.c: 119: {;Button.c: 120: ButtonState[BUTTON_MINUS]=BUTTON_RELEASED;
  4689  0665  01BB               	clrf	_ButtonState+1
  4690  0666  2E75               	goto	l1878
  4691  0667                     l1876:	
  4692  0667  083B               	movf	_ButtonState+1,w
  4693                           
  4694                           ; Switch size 1, requested type "simple"
  4695                           ; Number of cases is 4, Range of values is 0 to 3
  4696                           ; switch strategies available:
  4697                           ; Name         Instructions Cycles
  4698                           ; simple_byte           13     7 (average)
  4699                           ; direct_byte           20     8 (fixed)
  4700                           ; jumptable            260     6 (fixed)
  4701                           ;	Chosen strategy is simple_byte
  4702  0668  3A00               	xorlw	0	; case 0
  4703  0669  1903               	skipnz
  4704  066A  2E49               	goto	l1854
  4705  066B  3A01               	xorlw	1	; case 1
  4706  066C  1903               	skipnz
  4707  066D  2E52               	goto	l1860
  4708  066E  3A03               	xorlw	3	; case 2
  4709  066F  1903               	skipnz
  4710  0670  2E57               	goto	l1864
  4711  0671  3A01               	xorlw	1	; case 3
  4712  0672  1903               	skipnz
  4713  0673  2E62               	goto	l1870
  4714  0674  2E75               	goto	l1878
  4715  0675                     l1878:	
  4716                           
  4717                           ;Button.c: 125: ButtonPrevSample[BUTTON_MINUS]=ButtonCurrSample;
  4718  0675  082C               	movf	Button_Minus_Update@ButtonCurrSample,w
  4719  0676  00AA               	movwf	??_Button_Minus_Update
  4720  0677  082A               	movf	??_Button_Minus_Update,w
  4721  0678  00B8               	movwf	_ButtonPrevSample+1
  4722  0679  0008               	return
  4723  067A                     __end_of_Button_Minus_Update:	
  4724                           
  4725                           	psect	text31
  4726  04B3                     __ptext31:	
  4727 ;; *************** function _Button_Dust_Update *****************
  4728 ;; Defined at:
  4729 ;;		line 128 in file "Button.c"
  4730 ;; Parameters:    Size  Location     Type
  4731 ;;		None
  4732 ;; Auto vars:     Size  Location     Type
  4733 ;;  ButtonCurrSa    1   12[BANK0 ] enum E869
  4734 ;; Return value:  Size  Location     Type
  4735 ;;                  1    wreg      void 
  4736 ;; Registers used:
  4737 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4738 ;; Tracked objects:
  4739 ;;		On entry : 0/0
  4740 ;;		On exit  : 0/0
  4741 ;;		Unchanged: 0/0
  4742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4743 ;;      Params:         0       0       0       0       0
  4744 ;;      Locals:         0       1       0       0       0
  4745 ;;      Temps:          0       2       0       0       0
  4746 ;;      Totals:         0       3       0       0       0
  4747 ;;Total ram usage:        3 bytes
  4748 ;; Hardware stack levels used:    1
  4749 ;; Hardware stack levels required when called:    4
  4750 ;; This function calls:
  4751 ;;		_GPIO_GetPinState
  4752 ;; This function is called by:
  4753 ;;		_Button_Update
  4754 ;; This function uses a non-reentrant model
  4755 ;;
  4756                           
  4757                           
  4758                           ;psect for function _Button_Dust_Update
  4759  04B3                     _Button_Dust_Update:	
  4760                           
  4761                           ;Button.c: 130: tGPIO_State ButtonCurrSample;;Button.c: 132: ButtonCurrSample=GPIO_GetPi
      +                          nState(GPIO_PORTB,GPIO_PIN3);
  4762                           
  4763                           ;incstack = 0
  4764                           ; Regs used in _Button_Dust_Update: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4765  04B3  3003               	movlw	3
  4766  04B4  1283               	bcf	3,5	;RP0=0, select bank0
  4767  04B5  1303               	bcf	3,6	;RP1=0, select bank0
  4768  04B6  00AA               	movwf	??_Button_Dust_Update
  4769  04B7  082A               	movf	??_Button_Dust_Update,w
  4770  04B8  00A4               	movwf	GPIO_GetPinState@pin
  4771  04B9  3001               	movlw	1
  4772  04BA  120A  118A  230B  120A  118A  	fcall	_GPIO_GetPinState
  4773  04BF  1283               	bcf	3,5	;RP0=0, select bank0
  4774  04C0  1303               	bcf	3,6	;RP1=0, select bank0
  4775  04C1  00AB               	movwf	??_Button_Dust_Update+1
  4776  04C2  082B               	movf	??_Button_Dust_Update+1,w
  4777  04C3  00AC               	movwf	Button_Dust_Update@ButtonCurrSample
  4778                           
  4779                           ;Button.c: 134: switch(ButtonState[BUTTON_DUST])
  4780  04C4  2CF5               	goto	l1908
  4781  04C5                     l1882:	
  4782                           
  4783                           ;Button.c: 137: if((ButtonCurrSample== GPIO_LOW)&& (ButtonPrevSample[BUTTON_DUST]== GPIO
      +                          _LOW))
  4784  04C5  082C               	movf	Button_Dust_Update@ButtonCurrSample,w
  4785  04C6  1D03               	btfss	3,2
  4786  04C7  2D03               	goto	l1910
  4787  04C8  0839               	movf	_ButtonPrevSample+2,w
  4788  04C9  1D03               	btfss	3,2
  4789  04CA  2D03               	goto	l1910
  4790                           
  4791                           ;Button.c: 138: {;Button.c: 139: ButtonState[BUTTON_DUST]=BUTTON_PRE_PRESSED;
  4792  04CB  01BC               	clrf	_ButtonState+2
  4793  04CC  0ABC               	incf	_ButtonState+2,f
  4794  04CD  2D03               	goto	l1910
  4795  04CE                     l1888:	
  4796                           
  4797                           ;Button.c: 144: if(ButtonCurrSample== GPIO_LOW)
  4798  04CE  082C               	movf	Button_Dust_Update@ButtonCurrSample,w
  4799  04CF  1D03               	btfss	3,2
  4800  04D0  2D03               	goto	l1910
  4801                           
  4802                           ;Button.c: 145: {;Button.c: 146: ButtonState[BUTTON_DUST]=BUTTON_PRESSED;
  4803  04D1  3002               	movlw	2
  4804  04D2  00AA               	movwf	??_Button_Dust_Update
  4805  04D3  082A               	movf	??_Button_Dust_Update,w
  4806  04D4  00BC               	movwf	_ButtonState+2
  4807  04D5  2D03               	goto	l1910
  4808  04D6                     l1892:	
  4809                           
  4810                           ;Button.c: 151: if((ButtonCurrSample == GPIO_HIGH) && (ButtonPrevSample[BUTTON_DUST]== G
      +                          PIO_HIGH))
  4811  04D6  032C               	decf	Button_Dust_Update@ButtonCurrSample,w
  4812  04D7  1D03               	btfss	3,2
  4813  04D8  2CE4               	goto	l1898
  4814  04D9  0339               	decf	_ButtonPrevSample+2,w
  4815  04DA  1D03               	btfss	3,2
  4816  04DB  2CE4               	goto	l1898
  4817                           
  4818                           ;Button.c: 152: {;Button.c: 153: ButtonState[BUTTON_DUST]=BUTTON_PRE_RELEASED;
  4819  04DC  3003               	movlw	3
  4820  04DD  00AA               	movwf	??_Button_Dust_Update
  4821  04DE  082A               	movf	??_Button_Dust_Update,w
  4822  04DF  00BC               	movwf	_ButtonState+2
  4823                           
  4824                           ;Button.c: 154: Dust_Button_Pressing_Time=20;
  4825  04E0  3014               	movlw	20
  4826  04E1  00C7               	movwf	_Dust_Button_Pressing_Time
  4827  04E2  3000               	movlw	0
  4828  04E3  00C8               	movwf	_Dust_Button_Pressing_Time+1
  4829  04E4                     l1898:	
  4830                           
  4831                           ;Button.c: 155: };Button.c: 157: if(Dust_Button_Pressing_Time<65535)
  4832  04E4  0A47               	incf	_Dust_Button_Pressing_Time,w
  4833  04E5  1903               	btfsc	3,2
  4834  04E6  0A48               	incf	_Dust_Button_Pressing_Time+1,w
  4835  04E7  1903               	btfsc	3,2
  4836  04E8  2D03               	goto	l1910
  4837                           
  4838                           ;Button.c: 158: {;Button.c: 159: Dust_Button_Pressing_Time+=20;
  4839  04E9  3014               	movlw	20
  4840  04EA  07C7               	addwf	_Dust_Button_Pressing_Time,f
  4841  04EB  1803               	skipnc
  4842  04EC  0AC8               	incf	_Dust_Button_Pressing_Time+1,f
  4843  04ED  3000               	movlw	0
  4844  04EE  07C8               	addwf	_Dust_Button_Pressing_Time+1,f
  4845  04EF  2D03               	goto	l1910
  4846  04F0                     l1902:	
  4847                           
  4848                           ;Button.c: 165: if(ButtonCurrSample == GPIO_HIGH)
  4849  04F0  032C               	decf	Button_Dust_Update@ButtonCurrSample,w
  4850  04F1  1D03               	btfss	3,2
  4851  04F2  2D03               	goto	l1910
  4852                           
  4853                           ;Button.c: 166: {;Button.c: 167: ButtonState[BUTTON_DUST]=BUTTON_RELEASED;
  4854  04F3  01BC               	clrf	_ButtonState+2
  4855  04F4  2D03               	goto	l1910
  4856  04F5                     l1908:	
  4857  04F5  083C               	movf	_ButtonState+2,w
  4858                           
  4859                           ; Switch size 1, requested type "simple"
  4860                           ; Number of cases is 4, Range of values is 0 to 3
  4861                           ; switch strategies available:
  4862                           ; Name         Instructions Cycles
  4863                           ; simple_byte           13     7 (average)
  4864                           ; direct_byte           20     8 (fixed)
  4865                           ; jumptable            260     6 (fixed)
  4866                           ;	Chosen strategy is simple_byte
  4867  04F6  3A00               	xorlw	0	; case 0
  4868  04F7  1903               	skipnz
  4869  04F8  2CC5               	goto	l1882
  4870  04F9  3A01               	xorlw	1	; case 1
  4871  04FA  1903               	skipnz
  4872  04FB  2CCE               	goto	l1888
  4873  04FC  3A03               	xorlw	3	; case 2
  4874  04FD  1903               	skipnz
  4875  04FE  2CD6               	goto	l1892
  4876  04FF  3A01               	xorlw	1	; case 3
  4877  0500  1903               	skipnz
  4878  0501  2CF0               	goto	l1902
  4879  0502  2D03               	goto	l1910
  4880  0503                     l1910:	
  4881                           
  4882                           ;Button.c: 172: ButtonPrevSample[BUTTON_DUST]=ButtonCurrSample;
  4883  0503  082C               	movf	Button_Dust_Update@ButtonCurrSample,w
  4884  0504  00AA               	movwf	??_Button_Dust_Update
  4885  0505  082A               	movf	??_Button_Dust_Update,w
  4886  0506  00B9               	movwf	_ButtonPrevSample+2
  4887  0507  0008               	return
  4888  0508                     __end_of_Button_Dust_Update:	
  4889                           
  4890                           	psect	text32
  4891  030B                     __ptext32:	
  4892 ;; *************** function _GPIO_GetPinState *****************
  4893 ;; Defined at:
  4894 ;;		line 51 in file "GPIO.c"
  4895 ;; Parameters:    Size  Location     Type
  4896 ;;  port            1    wreg     enum E829
  4897 ;;  pin             1    4[BANK0 ] enum E836
  4898 ;; Auto vars:     Size  Location     Type
  4899 ;;  port            1    8[BANK0 ] enum E829
  4900 ;;  state           1    9[BANK0 ] enum E850
  4901 ;; Return value:  Size  Location     Type
  4902 ;;                  1    wreg      enum E869
  4903 ;; Registers used:
  4904 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4905 ;; Tracked objects:
  4906 ;;		On entry : 0/0
  4907 ;;		On exit  : 0/0
  4908 ;;		Unchanged: 0/0
  4909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4910 ;;      Params:         0       1       0       0       0
  4911 ;;      Locals:         0       2       0       0       0
  4912 ;;      Temps:          0       3       0       0       0
  4913 ;;      Totals:         0       6       0       0       0
  4914 ;;Total ram usage:        6 bytes
  4915 ;; Hardware stack levels used:    1
  4916 ;; Hardware stack levels required when called:    3
  4917 ;; This function calls:
  4918 ;;		Nothing
  4919 ;; This function is called by:
  4920 ;;		_Button_Plus_Update
  4921 ;;		_Button_Minus_Update
  4922 ;;		_Button_Dust_Update
  4923 ;;		_GPIO_TogglePinState
  4924 ;; This function uses a non-reentrant model
  4925 ;;
  4926                           
  4927                           
  4928                           ;psect for function _GPIO_GetPinState
  4929  030B                     _GPIO_GetPinState:	
  4930                           
  4931                           ;incstack = 0
  4932                           ; Regs used in _GPIO_GetPinState: [wreg-fsr0h+status,2+status,0]
  4933                           ;GPIO_GetPinState@port stored from wreg
  4934  030B  1283               	bcf	3,5	;RP0=0, select bank0
  4935  030C  1303               	bcf	3,6	;RP1=0, select bank0
  4936  030D  00A8               	movwf	GPIO_GetPinState@port
  4937                           
  4938                           ;GPIO.c: 53: tGPIO_State state;;GPIO.c: 55: switch(port)
  4939  030E  2B77               	goto	l1778
  4940  030F                     l1766:	
  4941                           
  4942                           ;GPIO.c: 58: state=(((PORTA) & (1<<(pin))) >> (pin));
  4943  030F  3001               	movlw	1
  4944  0310  00A5               	movwf	??_GPIO_GetPinState
  4945  0311  0A24               	incf	GPIO_GetPinState@pin,w
  4946  0312  2B15               	goto	u1024
  4947  0313                     u1025:	
  4948  0313  1003               	clrc
  4949  0314  0DA5               	rlf	??_GPIO_GetPinState,f
  4950  0315                     u1024:	
  4951  0315  3EFF               	addlw	-1
  4952  0316  1D03               	skipz
  4953  0317  2B13               	goto	u1025
  4954  0318  0825               	movf	??_GPIO_GetPinState,w
  4955  0319  0505               	andwf	5,w	;volatile
  4956  031A  00A6               	movwf	??_GPIO_GetPinState+1
  4957  031B  0A24               	incf	GPIO_GetPinState@pin,w
  4958  031C  2B1F               	goto	u1034
  4959  031D                     u1035:	
  4960  031D  1003               	clrc
  4961  031E  0CA6               	rrf	??_GPIO_GetPinState+1,f
  4962  031F                     u1034:	
  4963  031F  3EFF               	addlw	-1
  4964  0320  1D03               	skipz
  4965  0321  2B1D               	goto	u1035
  4966  0322  2B72               	goto	L7
  4967  0323                     l1768:	
  4968                           ;GPIO.c: 59: break;
  4969                           
  4970                           
  4971                           ;GPIO.c: 61: state=(((PORTB) & (1<<(pin))) >> (pin));
  4972  0323  3001               	movlw	1
  4973  0324  00A5               	movwf	??_GPIO_GetPinState
  4974  0325  0A24               	incf	GPIO_GetPinState@pin,w
  4975  0326  2B29               	goto	u1044
  4976  0327                     u1045:	
  4977  0327  1003               	clrc
  4978  0328  0DA5               	rlf	??_GPIO_GetPinState,f
  4979  0329                     u1044:	
  4980  0329  3EFF               	addlw	-1
  4981  032A  1D03               	skipz
  4982  032B  2B27               	goto	u1045
  4983  032C  0825               	movf	??_GPIO_GetPinState,w
  4984  032D  0506               	andwf	6,w	;volatile
  4985  032E  00A6               	movwf	??_GPIO_GetPinState+1
  4986  032F  0A24               	incf	GPIO_GetPinState@pin,w
  4987  0330  2B33               	goto	u1054
  4988  0331                     u1055:	
  4989  0331  1003               	clrc
  4990  0332  0CA6               	rrf	??_GPIO_GetPinState+1,f
  4991  0333                     u1054:	
  4992  0333  3EFF               	addlw	-1
  4993  0334  1D03               	skipz
  4994  0335  2B31               	goto	u1055
  4995  0336  2B72               	goto	L7
  4996  0337                     l1770:	
  4997                           ;GPIO.c: 62: break;
  4998                           
  4999                           
  5000                           ;GPIO.c: 64: state=(((PORTC) & (1<<(pin))) >> (pin));
  5001  0337  3001               	movlw	1
  5002  0338  00A5               	movwf	??_GPIO_GetPinState
  5003  0339  0A24               	incf	GPIO_GetPinState@pin,w
  5004  033A  2B3D               	goto	u1064
  5005  033B                     u1065:	
  5006  033B  1003               	clrc
  5007  033C  0DA5               	rlf	??_GPIO_GetPinState,f
  5008  033D                     u1064:	
  5009  033D  3EFF               	addlw	-1
  5010  033E  1D03               	skipz
  5011  033F  2B3B               	goto	u1065
  5012  0340  0825               	movf	??_GPIO_GetPinState,w
  5013  0341  0507               	andwf	7,w	;volatile
  5014  0342  00A6               	movwf	??_GPIO_GetPinState+1
  5015  0343  0A24               	incf	GPIO_GetPinState@pin,w
  5016  0344  2B47               	goto	u1074
  5017  0345                     u1075:	
  5018  0345  1003               	clrc
  5019  0346  0CA6               	rrf	??_GPIO_GetPinState+1,f
  5020  0347                     u1074:	
  5021  0347  3EFF               	addlw	-1
  5022  0348  1D03               	skipz
  5023  0349  2B45               	goto	u1075
  5024  034A  2B72               	goto	L7
  5025  034B                     l1772:	
  5026                           ;GPIO.c: 65: break;
  5027                           
  5028                           
  5029                           ;GPIO.c: 67: state=(((PORTD) & (1<<(pin))) >> (pin));
  5030  034B  3001               	movlw	1
  5031  034C  00A5               	movwf	??_GPIO_GetPinState
  5032  034D  0A24               	incf	GPIO_GetPinState@pin,w
  5033  034E  2B51               	goto	u1084
  5034  034F                     u1085:	
  5035  034F  1003               	clrc
  5036  0350  0DA5               	rlf	??_GPIO_GetPinState,f
  5037  0351                     u1084:	
  5038  0351  3EFF               	addlw	-1
  5039  0352  1D03               	skipz
  5040  0353  2B4F               	goto	u1085
  5041  0354  0825               	movf	??_GPIO_GetPinState,w
  5042  0355  0508               	andwf	8,w	;volatile
  5043  0356  00A6               	movwf	??_GPIO_GetPinState+1
  5044  0357  0A24               	incf	GPIO_GetPinState@pin,w
  5045  0358  2B5B               	goto	u1094
  5046  0359                     u1095:	
  5047  0359  1003               	clrc
  5048  035A  0CA6               	rrf	??_GPIO_GetPinState+1,f
  5049  035B                     u1094:	
  5050  035B  3EFF               	addlw	-1
  5051  035C  1D03               	skipz
  5052  035D  2B59               	goto	u1095
  5053  035E  2B72               	goto	L7
  5054  035F                     l1774:	
  5055                           ;GPIO.c: 68: break;
  5056                           
  5057                           
  5058                           ;GPIO.c: 70: state=(((PORTE) & (1<<(pin))) >> (pin));
  5059  035F  3001               	movlw	1
  5060  0360  00A5               	movwf	??_GPIO_GetPinState
  5061  0361  0A24               	incf	GPIO_GetPinState@pin,w
  5062  0362  2B65               	goto	u1104
  5063  0363                     u1105:	
  5064  0363  1003               	clrc
  5065  0364  0DA5               	rlf	??_GPIO_GetPinState,f
  5066  0365                     u1104:	
  5067  0365  3EFF               	addlw	-1
  5068  0366  1D03               	skipz
  5069  0367  2B63               	goto	u1105
  5070  0368  0825               	movf	??_GPIO_GetPinState,w
  5071  0369  0509               	andwf	9,w	;volatile
  5072  036A  00A6               	movwf	??_GPIO_GetPinState+1
  5073  036B  0A24               	incf	GPIO_GetPinState@pin,w
  5074  036C  2B6F               	goto	u1114
  5075  036D                     u1115:	
  5076  036D  1003               	clrc
  5077  036E  0CA6               	rrf	??_GPIO_GetPinState+1,f
  5078  036F                     u1114:	
  5079  036F  3EFF               	addlw	-1
  5080  0370  1D03               	skipz
  5081  0371  2B6D               	goto	u1115
  5082  0372                     L7:	
  5083  0372  0826               	movf	??_GPIO_GetPinState+1,w
  5084  0373  00A7               	movwf	??_GPIO_GetPinState+2
  5085  0374  0827               	movf	??_GPIO_GetPinState+2,w
  5086  0375  00A9               	movwf	GPIO_GetPinState@state
  5087                           
  5088                           ;GPIO.c: 71: break;
  5089  0376  2B88               	goto	l1780
  5090  0377                     l1778:	
  5091  0377  0828               	movf	GPIO_GetPinState@port,w
  5092                           
  5093                           ; Switch size 1, requested type "simple"
  5094                           ; Number of cases is 5, Range of values is 0 to 4
  5095                           ; switch strategies available:
  5096                           ; Name         Instructions Cycles
  5097                           ; simple_byte           16     9 (average)
  5098                           ; direct_byte           23     8 (fixed)
  5099                           ; jumptable            260     6 (fixed)
  5100                           ;	Chosen strategy is simple_byte
  5101  0378  3A00               	xorlw	0	; case 0
  5102  0379  1903               	skipnz
  5103  037A  2B0F               	goto	l1766
  5104  037B  3A01               	xorlw	1	; case 1
  5105  037C  1903               	skipnz
  5106  037D  2B23               	goto	l1768
  5107  037E  3A03               	xorlw	3	; case 2
  5108  037F  1903               	skipnz
  5109  0380  2B37               	goto	l1770
  5110  0381  3A01               	xorlw	1	; case 3
  5111  0382  1903               	skipnz
  5112  0383  2B4B               	goto	l1772
  5113  0384  3A07               	xorlw	7	; case 4
  5114  0385  1903               	skipnz
  5115  0386  2B5F               	goto	l1774
  5116  0387  2B88               	goto	l1780
  5117  0388                     l1780:	
  5118                           
  5119                           ;GPIO.c: 75: return state;
  5120  0388  0829               	movf	GPIO_GetPinState@state,w
  5121  0389  0008               	return
  5122  038A                     __end_of_GPIO_GetPinState:	
  5123                           
  5124                           	psect	text33
  5125  0FCE                     __ptext33:	
  5126 ;; *************** function _OS_Init *****************
  5127 ;; Defined at:
  5128 ;;		line 90 in file "OS.c"
  5129 ;; Parameters:    Size  Location     Type
  5130 ;;		None
  5131 ;; Auto vars:     Size  Location     Type
  5132 ;;		None
  5133 ;; Return value:  Size  Location     Type
  5134 ;;                  1    wreg      void 
  5135 ;; Registers used:
  5136 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5137 ;; Tracked objects:
  5138 ;;		On entry : 0/0
  5139 ;;		On exit  : 0/0
  5140 ;;		Unchanged: 0/0
  5141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5142 ;;      Params:         0       0       0       0       0
  5143 ;;      Locals:         0       0       0       0       0
  5144 ;;      Temps:          0       0       0       0       0
  5145 ;;      Totals:         0       0       0       0       0
  5146 ;;Total ram usage:        0 bytes
  5147 ;; Hardware stack levels used:    1
  5148 ;; Hardware stack levels required when called:    5
  5149 ;; This function calls:
  5150 ;;		_GPIO_InitPin
  5151 ;;		_Timer_Init
  5152 ;;		_Timer_SetInterruptEn
  5153 ;;		_Timer_SetState
  5154 ;;		_Timer_SetTimeMS
  5155 ;; This function is called by:
  5156 ;;		_main
  5157 ;; This function uses a non-reentrant model
  5158 ;;
  5159                           
  5160                           
  5161                           ;psect for function _OS_Init
  5162  0FCE                     _OS_Init:	
  5163                           
  5164                           ;OS.c: 92: Timer_Init(TIMER0);
  5165                           
  5166                           ;incstack = 0
  5167                           ; Regs used in _OS_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5168  0FCE  3000               	movlw	0
  5169  0FCF  120A  158A  26A4  120A  158A  	fcall	_Timer_Init
  5170                           
  5171                           ;OS.c: 93: Timer_SetTimeMS(TIMER0,10);
  5172  0FD4  300A               	movlw	10
  5173  0FD5  1283               	bcf	3,5	;RP0=0, select bank0
  5174  0FD6  1303               	bcf	3,6	;RP1=0, select bank0
  5175  0FD7  00AA               	movwf	Timer_SetTimeMS@time
  5176  0FD8  3000               	movlw	0
  5177  0FD9  00AB               	movwf	Timer_SetTimeMS@time+1
  5178  0FDA  3000               	movlw	0
  5179  0FDB  120A  118A  25F3  120A  158A  	fcall	_Timer_SetTimeMS
  5180                           
  5181                           ;OS.c: 94: Timer_SetInterruptEn(TIMER0,1);
  5182  0FE0  1283               	bcf	3,5	;RP0=0, select bank0
  5183  0FE1  1303               	bcf	3,6	;RP1=0, select bank0
  5184  0FE2  01A4               	clrf	Timer_SetInterruptEn@state
  5185  0FE3  0AA4               	incf	Timer_SetInterruptEn@state,f
  5186  0FE4  3000               	movlw	0
  5187  0FE5  120A  158A  26C1  120A  158A  	fcall	_Timer_SetInterruptEn
  5188                           
  5189                           ;OS.c: 95: PEIE=1;
  5190  0FEA  170B               	bsf	11,6	;volatile
  5191                           
  5192                           ;OS.c: 96: GIE=1;
  5193  0FEB  178B               	bsf	11,7	;volatile
  5194                           
  5195                           ;OS.c: 97: Timer_SetState(TIMER0,1);
  5196  0FEC  1283               	bcf	3,5	;RP0=0, select bank0
  5197  0FED  1303               	bcf	3,6	;RP1=0, select bank0
  5198  0FEE  01A4               	clrf	Timer_SetState@state
  5199  0FEF  0AA4               	incf	Timer_SetState@state,f
  5200  0FF0  3000               	movlw	0
  5201  0FF1  120A  158A  2626  120A  158A  	fcall	_Timer_SetState
  5202                           
  5203                           ;OS.c: 100: GPIO_InitPin(GPIO_PORTC,GPIO_PIN1,GPIO_OUTPUT_DIR);
  5204  0FF6  1283               	bcf	3,5	;RP0=0, select bank0
  5205  0FF7  1303               	bcf	3,6	;RP1=0, select bank0
  5206  0FF8  01A4               	clrf	GPIO_InitPin@pin
  5207  0FF9  0AA4               	incf	GPIO_InitPin@pin,f
  5208  0FFA  01A5               	clrf	GPIO_InitPin@dir
  5209  0FFB  3002               	movlw	2
  5210  0FFC  120A  118A  203D   	fcall	_GPIO_InitPin
  5211  0FFF  0008               	return
  5212  1000                     __end_of_OS_Init:	
  5213                           
  5214                           	psect	text34
  5215  05F3                     __ptext34:	
  5216 ;; *************** function _Timer_SetTimeMS *****************
  5217 ;; Defined at:
  5218 ;;		line 44 in file "Timer.c"
  5219 ;; Parameters:    Size  Location     Type
  5220 ;;  timer           1    wreg     enum E829
  5221 ;;  time            2   10[BANK0 ] unsigned int 
  5222 ;; Auto vars:     Size  Location     Type
  5223 ;;  timer           1   14[BANK0 ] enum E829
  5224 ;;  count_no        2   15[BANK0 ] unsigned int 
  5225 ;; Return value:  Size  Location     Type
  5226 ;;                  1    wreg      void 
  5227 ;; Registers used:
  5228 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5229 ;; Tracked objects:
  5230 ;;		On entry : 0/0
  5231 ;;		On exit  : 0/0
  5232 ;;		Unchanged: 0/0
  5233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5234 ;;      Params:         0       2       0       0       0
  5235 ;;      Locals:         0       3       0       0       0
  5236 ;;      Temps:          0       2       0       0       0
  5237 ;;      Totals:         0       7       0       0       0
  5238 ;;Total ram usage:        7 bytes
  5239 ;; Hardware stack levels used:    1
  5240 ;; Hardware stack levels required when called:    4
  5241 ;; This function calls:
  5242 ;;		___wmul
  5243 ;; This function is called by:
  5244 ;;		_OS_Init
  5245 ;; This function uses a non-reentrant model
  5246 ;;
  5247                           
  5248                           
  5249                           ;psect for function _Timer_SetTimeMS
  5250  05F3                     _Timer_SetTimeMS:	
  5251                           
  5252                           ;incstack = 0
  5253                           ; Regs used in _Timer_SetTimeMS: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5254                           ;Timer_SetTimeMS@timer stored from wreg
  5255  05F3  1283               	bcf	3,5	;RP0=0, select bank0
  5256  05F4  1303               	bcf	3,6	;RP1=0, select bank0
  5257  05F5  00AE               	movwf	Timer_SetTimeMS@timer
  5258                           
  5259                           ;Timer.c: 46: u16 count_no;;Timer.c: 47: switch(timer)
  5260  05F6  2E2E               	goto	l2172
  5261  05F7                     l2160:	
  5262                           
  5263                           ;Timer.c: 50: count_no=(time*(2000))/(256);
  5264  05F7  082B               	movf	Timer_SetTimeMS@time+1,w
  5265  05F8  00A5               	movwf	___wmul@multiplier+1
  5266  05F9  082A               	movf	Timer_SetTimeMS@time,w
  5267  05FA  00A4               	movwf	___wmul@multiplier
  5268  05FB  30D0               	movlw	208
  5269  05FC  00A6               	movwf	___wmul@multiplicand
  5270  05FD  3007               	movlw	7
  5271  05FE  00A7               	movwf	___wmul@multiplicand+1
  5272  05FF  120A  158A  277C   	fcall	___wmul
  5273  0602  1283               	bcf	3,5	;RP0=0, select bank0
  5274  0603  1303               	bcf	3,6	;RP1=0, select bank0
  5275  0604  0824               	movf	?___wmul,w
  5276  0605  00AC               	movwf	??_Timer_SetTimeMS
  5277  0606  0825               	movf	?___wmul+1,w
  5278  0607  00AD               	movwf	??_Timer_SetTimeMS+1
  5279  0608  082D               	movf	??_Timer_SetTimeMS+1,w
  5280  0609  00AC               	movwf	??_Timer_SetTimeMS
  5281  060A  01AD               	clrf	??_Timer_SetTimeMS+1
  5282  060B  082C               	movf	??_Timer_SetTimeMS,w
  5283  060C  00AF               	movwf	Timer_SetTimeMS@count_no
  5284  060D  082D               	movf	??_Timer_SetTimeMS+1,w
  5285  060E  00B0               	movwf	Timer_SetTimeMS@count_no+1
  5286                           
  5287                           ;Timer.c: 51: (TMR0=(0xff-count_no));
  5288  060F  092F               	comf	Timer_SetTimeMS@count_no,w
  5289  0610  0081               	movwf	1	;volatile
  5290                           
  5291                           ;Timer.c: 52: break;
  5292  0611  0008               	return
  5293  0612                     l2164:	
  5294                           
  5295                           ;Timer.c: 54: count_no=(time*(250));
  5296  0612  082B               	movf	Timer_SetTimeMS@time+1,w
  5297  0613  00A5               	movwf	___wmul@multiplier+1
  5298  0614  082A               	movf	Timer_SetTimeMS@time,w
  5299  0615  00A4               	movwf	___wmul@multiplier
  5300  0616  30FA               	movlw	250
  5301  0617  00A6               	movwf	___wmul@multiplicand
  5302  0618  3000               	movlw	0
  5303  0619  00A7               	movwf	___wmul@multiplicand+1
  5304  061A  120A  158A  277C   	fcall	___wmul
  5305  061D  1283               	bcf	3,5	;RP0=0, select bank0
  5306  061E  1303               	bcf	3,6	;RP1=0, select bank0
  5307  061F  0825               	movf	?___wmul+1,w
  5308  0620  00B0               	movwf	Timer_SetTimeMS@count_no+1
  5309  0621  0824               	movf	?___wmul,w
  5310  0622  00AF               	movwf	Timer_SetTimeMS@count_no
  5311                           
  5312                           ;Timer.c: 55: (TMR1H=((0xffff-count_no)&0xff00)>>8); (TMR1L=((0xffff-count_no)&0x00ff));
  5313  0623  0830               	movf	Timer_SetTimeMS@count_no+1,w
  5314  0624  00AD               	movwf	??_Timer_SetTimeMS+1
  5315  0625  082F               	movf	Timer_SetTimeMS@count_no,w
  5316  0626  00AC               	movwf	??_Timer_SetTimeMS
  5317  0627  09AC               	comf	??_Timer_SetTimeMS,f
  5318  0628  09AD               	comf	??_Timer_SetTimeMS+1,f
  5319  0629  082D               	movf	??_Timer_SetTimeMS+1,w
  5320  062A  008F               	movwf	15	;volatile
  5321  062B  092F               	comf	Timer_SetTimeMS@count_no,w
  5322  062C  008E               	movwf	14	;volatile
  5323                           
  5324                           ;Timer.c: 56: break;
  5325  062D  0008               	return
  5326  062E                     l2172:	
  5327  062E  082E               	movf	Timer_SetTimeMS@timer,w
  5328                           
  5329                           ; Switch size 1, requested type "simple"
  5330                           ; Number of cases is 2, Range of values is 0 to 1
  5331                           ; switch strategies available:
  5332                           ; Name         Instructions Cycles
  5333                           ; simple_byte            7     4 (average)
  5334                           ; direct_byte           14     8 (fixed)
  5335                           ; jumptable            260     6 (fixed)
  5336                           ;	Chosen strategy is simple_byte
  5337  062F  3A00               	xorlw	0	; case 0
  5338  0630  1903               	skipnz
  5339  0631  2DF7               	goto	l2160
  5340  0632  3A01               	xorlw	1	; case 1
  5341  0633  1903               	skipnz
  5342  0634  2E12               	goto	l2164
  5343  0635  2E36               	goto	l315
  5344  0636                     l315:	
  5345  0636  0008               	return
  5346  0637                     __end_of_Timer_SetTimeMS:	
  5347                           
  5348                           	psect	text35
  5349  0F7C                     __ptext35:	
  5350 ;; *************** function ___wmul *****************
  5351 ;; Defined at:
  5352 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\Umul16.c"
  5353 ;; Parameters:    Size  Location     Type
  5354 ;;  multiplier      2    4[BANK0 ] unsigned int 
  5355 ;;  multiplicand    2    6[BANK0 ] unsigned int 
  5356 ;; Auto vars:     Size  Location     Type
  5357 ;;  product         2    8[BANK0 ] unsigned int 
  5358 ;; Return value:  Size  Location     Type
  5359 ;;                  2    4[BANK0 ] unsigned int 
  5360 ;; Registers used:
  5361 ;;		wreg, status,2, status,0
  5362 ;; Tracked objects:
  5363 ;;		On entry : 0/0
  5364 ;;		On exit  : 0/0
  5365 ;;		Unchanged: 0/0
  5366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5367 ;;      Params:         0       4       0       0       0
  5368 ;;      Locals:         0       2       0       0       0
  5369 ;;      Temps:          0       0       0       0       0
  5370 ;;      Totals:         0       6       0       0       0
  5371 ;;Total ram usage:        6 bytes
  5372 ;; Hardware stack levels used:    1
  5373 ;; Hardware stack levels required when called:    3
  5374 ;; This function calls:
  5375 ;;		Nothing
  5376 ;; This function is called by:
  5377 ;;		_Timer_SetTimeMS
  5378 ;;		_Motor_OutputUpdate
  5379 ;; This function uses a non-reentrant model
  5380 ;;
  5381                           
  5382                           
  5383                           ;psect for function ___wmul
  5384  0F7C                     ___wmul:	
  5385                           
  5386                           ;incstack = 0
  5387                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  5388  0F7C  1283               	bcf	3,5	;RP0=0, select bank0
  5389  0F7D  1303               	bcf	3,6	;RP1=0, select bank0
  5390  0F7E  01A8               	clrf	___wmul@product
  5391  0F7F  01A9               	clrf	___wmul@product+1
  5392  0F80                     l1970:	
  5393  0F80  1C24               	btfss	___wmul@multiplier,0
  5394  0F81  2F88               	goto	l598
  5395  0F82  0826               	movf	___wmul@multiplicand,w
  5396  0F83  07A8               	addwf	___wmul@product,f
  5397  0F84  1803               	skipnc
  5398  0F85  0AA9               	incf	___wmul@product+1,f
  5399  0F86  0827               	movf	___wmul@multiplicand+1,w
  5400  0F87  07A9               	addwf	___wmul@product+1,f
  5401  0F88                     l598:	
  5402  0F88  3001               	movlw	1
  5403  0F89                     u1475:	
  5404  0F89  1003               	clrc
  5405  0F8A  0DA6               	rlf	___wmul@multiplicand,f
  5406  0F8B  0DA7               	rlf	___wmul@multiplicand+1,f
  5407  0F8C  3EFF               	addlw	-1
  5408  0F8D  1D03               	skipz
  5409  0F8E  2F89               	goto	u1475
  5410  0F8F  3001               	movlw	1
  5411  0F90                     u1485:	
  5412  0F90  1003               	clrc
  5413  0F91  0CA5               	rrf	___wmul@multiplier+1,f
  5414  0F92  0CA4               	rrf	___wmul@multiplier,f
  5415  0F93  3EFF               	addlw	-1
  5416  0F94  1D03               	skipz
  5417  0F95  2F90               	goto	u1485
  5418  0F96  0824               	movf	___wmul@multiplier,w
  5419  0F97  0425               	iorwf	___wmul@multiplier+1,w
  5420  0F98  1D03               	btfss	3,2
  5421  0F99  2F80               	goto	l1970
  5422  0F9A  0829               	movf	___wmul@product+1,w
  5423  0F9B  00A5               	movwf	?___wmul+1
  5424  0F9C  0828               	movf	___wmul@product,w
  5425  0F9D  00A4               	movwf	?___wmul
  5426  0F9E  0008               	return
  5427  0F9F                     __end_of___wmul:	
  5428                           
  5429                           	psect	text36
  5430  0E26                     __ptext36:	
  5431 ;; *************** function _Timer_SetState *****************
  5432 ;; Defined at:
  5433 ;;		line 103 in file "Timer.c"
  5434 ;; Parameters:    Size  Location     Type
  5435 ;;  timer           1    wreg     enum E829
  5436 ;;  state           1    4[BANK0 ] unsigned char 
  5437 ;; Auto vars:     Size  Location     Type
  5438 ;;  timer           1    5[BANK0 ] enum E829
  5439 ;; Return value:  Size  Location     Type
  5440 ;;                  1    wreg      void 
  5441 ;; Registers used:
  5442 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5443 ;; Tracked objects:
  5444 ;;		On entry : 0/0
  5445 ;;		On exit  : 0/0
  5446 ;;		Unchanged: 0/0
  5447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5448 ;;      Params:         0       1       0       0       0
  5449 ;;      Locals:         0       1       0       0       0
  5450 ;;      Temps:          0       0       0       0       0
  5451 ;;      Totals:         0       2       0       0       0
  5452 ;;Total ram usage:        2 bytes
  5453 ;; Hardware stack levels used:    1
  5454 ;; Hardware stack levels required when called:    3
  5455 ;; This function calls:
  5456 ;;		Nothing
  5457 ;; This function is called by:
  5458 ;;		_OS_Init
  5459 ;;		_TIME_TriggerTimeSandwichUS
  5460 ;;		_TIME_WaitTimeSandwich
  5461 ;; This function uses a non-reentrant model
  5462 ;;
  5463                           
  5464                           
  5465                           ;psect for function _Timer_SetState
  5466  0E26                     _Timer_SetState:	
  5467                           
  5468                           ;incstack = 0
  5469                           ; Regs used in _Timer_SetState: [wreg-fsr0h+status,2+status,0]
  5470                           ;Timer_SetState@timer stored from wreg
  5471  0E26  1283               	bcf	3,5	;RP0=0, select bank0
  5472  0E27  1303               	bcf	3,6	;RP1=0, select bank0
  5473  0E28  00A5               	movwf	Timer_SetState@timer
  5474                           
  5475                           ;Timer.c: 105: switch(timer)
  5476  0E29  2E34               	goto	l1734
  5477  0E2A                     l342:	
  5478                           ;Timer.c: 110: case TIMER1:
  5479                           
  5480                           
  5481                           ;Timer.c: 111: (TMR1ON=state);
  5482  0E2A  1C24               	btfss	Timer_SetState@state,0
  5483  0E2B  2E30               	goto	u990
  5484  0E2C  1283               	bcf	3,5	;RP0=0, select bank0
  5485  0E2D  1303               	bcf	3,6	;RP1=0, select bank0
  5486  0E2E  1410               	bsf	16,0	;volatile
  5487  0E2F  0008               	return
  5488  0E30                     u990:	
  5489  0E30  1283               	bcf	3,5	;RP0=0, select bank0
  5490  0E31  1303               	bcf	3,6	;RP1=0, select bank0
  5491  0E32  1010               	bcf	16,0	;volatile
  5492                           
  5493                           ;Timer.c: 112: break;
  5494  0E33  0008               	return
  5495  0E34                     l1734:	
  5496  0E34  0825               	movf	Timer_SetState@timer,w
  5497                           
  5498                           ; Switch size 1, requested type "simple"
  5499                           ; Number of cases is 2, Range of values is 0 to 1
  5500                           ; switch strategies available:
  5501                           ; Name         Instructions Cycles
  5502                           ; simple_byte            7     4 (average)
  5503                           ; direct_byte           14     8 (fixed)
  5504                           ; jumptable            260     6 (fixed)
  5505                           ;	Chosen strategy is simple_byte
  5506  0E35  3A00               	xorlw	0	; case 0
  5507  0E36  1903               	skipnz
  5508  0E37  2E3C               	goto	l343
  5509  0E38  3A01               	xorlw	1	; case 1
  5510  0E39  1903               	skipnz
  5511  0E3A  2E2A               	goto	l342
  5512  0E3B  2E3C               	goto	l343
  5513  0E3C                     l343:	
  5514  0E3C  0008               	return
  5515  0E3D                     __end_of_Timer_SetState:	
  5516                           
  5517                           	psect	text37
  5518  0EC1                     __ptext37:	
  5519 ;; *************** function _Timer_SetInterruptEn *****************
  5520 ;; Defined at:
  5521 ;;		line 17 in file "Timer.c"
  5522 ;; Parameters:    Size  Location     Type
  5523 ;;  timer           1    wreg     enum E829
  5524 ;;  state           1    4[BANK0 ] unsigned char 
  5525 ;; Auto vars:     Size  Location     Type
  5526 ;;  timer           1    5[BANK0 ] enum E829
  5527 ;; Return value:  Size  Location     Type
  5528 ;;                  1    wreg      void 
  5529 ;; Registers used:
  5530 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5531 ;; Tracked objects:
  5532 ;;		On entry : 0/0
  5533 ;;		On exit  : 0/0
  5534 ;;		Unchanged: 0/0
  5535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5536 ;;      Params:         0       1       0       0       0
  5537 ;;      Locals:         0       1       0       0       0
  5538 ;;      Temps:          0       0       0       0       0
  5539 ;;      Totals:         0       2       0       0       0
  5540 ;;Total ram usage:        2 bytes
  5541 ;; Hardware stack levels used:    1
  5542 ;; Hardware stack levels required when called:    3
  5543 ;; This function calls:
  5544 ;;		Nothing
  5545 ;; This function is called by:
  5546 ;;		_OS_Init
  5547 ;; This function uses a non-reentrant model
  5548 ;;
  5549                           
  5550                           
  5551                           ;psect for function _Timer_SetInterruptEn
  5552  0EC1                     _Timer_SetInterruptEn:	
  5553                           
  5554                           ;incstack = 0
  5555                           ; Regs used in _Timer_SetInterruptEn: [wreg-fsr0h+status,2+status,0]
  5556                           ;Timer_SetInterruptEn@timer stored from wreg
  5557  0EC1  1283               	bcf	3,5	;RP0=0, select bank0
  5558  0EC2  1303               	bcf	3,6	;RP1=0, select bank0
  5559  0EC3  00A5               	movwf	Timer_SetInterruptEn@timer
  5560                           
  5561                           ;Timer.c: 19: switch(timer)
  5562  0EC4  2ED5               	goto	l2186
  5563  0EC5                     l298:	
  5564                           ;Timer.c: 20: {;Timer.c: 21: case TIMER0:
  5565                           
  5566                           
  5567                           ;Timer.c: 22: (TMR0IE=state);
  5568  0EC5  1C24               	btfss	Timer_SetInterruptEn@state,0
  5569  0EC6  2EC9               	goto	u1830
  5570  0EC7  168B               	bsf	11,5	;volatile
  5571  0EC8  0008               	return
  5572  0EC9                     u1830:	
  5573  0EC9  128B               	bcf	11,5	;volatile
  5574                           
  5575                           ;Timer.c: 23: break;
  5576  0ECA  0008               	return
  5577  0ECB                     l300:	
  5578                           ;Timer.c: 24: case TIMER1:
  5579                           
  5580                           
  5581                           ;Timer.c: 25: (TMR1IE=state);
  5582  0ECB  1C24               	btfss	Timer_SetInterruptEn@state,0
  5583  0ECC  2ED1               	goto	u1850
  5584  0ECD  1683               	bsf	3,5	;RP0=1, select bank1
  5585  0ECE  1303               	bcf	3,6	;RP1=0, select bank1
  5586  0ECF  140C               	bsf	12,0	;volatile
  5587  0ED0  0008               	return
  5588  0ED1                     u1850:	
  5589  0ED1  1683               	bsf	3,5	;RP0=1, select bank1
  5590  0ED2  1303               	bcf	3,6	;RP1=0, select bank1
  5591  0ED3  100C               	bcf	12,0	;volatile
  5592                           
  5593                           ;Timer.c: 26: break;
  5594  0ED4  0008               	return
  5595  0ED5                     l2186:	
  5596  0ED5  0825               	movf	Timer_SetInterruptEn@timer,w
  5597                           
  5598                           ; Switch size 1, requested type "simple"
  5599                           ; Number of cases is 2, Range of values is 0 to 1
  5600                           ; switch strategies available:
  5601                           ; Name         Instructions Cycles
  5602                           ; simple_byte            7     4 (average)
  5603                           ; direct_byte           14     8 (fixed)
  5604                           ; jumptable            260     6 (fixed)
  5605                           ;	Chosen strategy is simple_byte
  5606  0ED6  3A00               	xorlw	0	; case 0
  5607  0ED7  1903               	skipnz
  5608  0ED8  2EC5               	goto	l298
  5609  0ED9  3A01               	xorlw	1	; case 1
  5610  0EDA  1903               	skipnz
  5611  0EDB  2ECB               	goto	l300
  5612  0EDC  2EDD               	goto	l301
  5613  0EDD                     l301:	
  5614  0EDD  0008               	return
  5615  0EDE                     __end_of_Timer_SetInterruptEn:	
  5616                           
  5617                           	psect	text38
  5618  0EA4                     __ptext38:	
  5619 ;; *************** function _Timer_Init *****************
  5620 ;; Defined at:
  5621 ;;		line 30 in file "Timer.c"
  5622 ;; Parameters:    Size  Location     Type
  5623 ;;  timer           1    wreg     enum E829
  5624 ;; Auto vars:     Size  Location     Type
  5625 ;;  timer           1    6[BANK0 ] enum E829
  5626 ;; Return value:  Size  Location     Type
  5627 ;;                  1    wreg      void 
  5628 ;; Registers used:
  5629 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5630 ;; Tracked objects:
  5631 ;;		On entry : 0/0
  5632 ;;		On exit  : 0/0
  5633 ;;		Unchanged: 0/0
  5634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5635 ;;      Params:         0       0       0       0       0
  5636 ;;      Locals:         0       1       0       0       0
  5637 ;;      Temps:          0       0       0       0       0
  5638 ;;      Totals:         0       1       0       0       0
  5639 ;;Total ram usage:        1 bytes
  5640 ;; Hardware stack levels used:    1
  5641 ;; Hardware stack levels required when called:    4
  5642 ;; This function calls:
  5643 ;;		_Timer_SetMode
  5644 ;; This function is called by:
  5645 ;;		_OS_Init
  5646 ;;		_TIME_Init
  5647 ;; This function uses a non-reentrant model
  5648 ;;
  5649                           
  5650                           
  5651                           ;psect for function _Timer_Init
  5652  0EA4                     _Timer_Init:	
  5653                           
  5654                           ;incstack = 0
  5655                           ; Regs used in _Timer_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5656                           ;Timer_Init@timer stored from wreg
  5657  0EA4  1283               	bcf	3,5	;RP0=0, select bank0
  5658  0EA5  1303               	bcf	3,6	;RP1=0, select bank0
  5659  0EA6  00A6               	movwf	Timer_Init@timer
  5660                           
  5661                           ;Timer.c: 32: switch(timer)
  5662  0EA7  2EB2               	goto	l2178
  5663  0EA8                     l305:	
  5664                           ;Timer.c: 33: {;Timer.c: 34: case TIMER0:
  5665                           
  5666                           
  5667                           ;Timer.c: 35: PS0=1; PS1=1; PS2=1; PSA=0;;
  5668  0EA8  1683               	bsf	3,5	;RP0=1, select bank1
  5669  0EA9  1303               	bcf	3,6	;RP1=0, select bank1
  5670  0EAA  1401               	bsf	1,0	;volatile
  5671  0EAB  1481               	bsf	1,1	;volatile
  5672  0EAC  1501               	bsf	1,2	;volatile
  5673  0EAD  1181               	bcf	1,3	;volatile
  5674                           
  5675                           ;Timer.c: 36: break;
  5676  0EAE  2EBA               	goto	l2180
  5677  0EAF                     l307:	
  5678                           ;Timer.c: 37: case TIMER1:
  5679                           
  5680                           
  5681                           ;Timer.c: 38: T1CKPS0=1; T1CKPS1=1;
  5682  0EAF  1610               	bsf	16,4	;volatile
  5683  0EB0  1690               	bsf	16,5	;volatile
  5684                           
  5685                           ;Timer.c: 39: break;
  5686  0EB1  2EBA               	goto	l2180
  5687  0EB2                     l2178:	
  5688  0EB2  0826               	movf	Timer_Init@timer,w
  5689                           
  5690                           ; Switch size 1, requested type "simple"
  5691                           ; Number of cases is 2, Range of values is 0 to 1
  5692                           ; switch strategies available:
  5693                           ; Name         Instructions Cycles
  5694                           ; simple_byte            7     4 (average)
  5695                           ; direct_byte           14     8 (fixed)
  5696                           ; jumptable            260     6 (fixed)
  5697                           ;	Chosen strategy is simple_byte
  5698  0EB3  3A00               	xorlw	0	; case 0
  5699  0EB4  1903               	skipnz
  5700  0EB5  2EA8               	goto	l305
  5701  0EB6  3A01               	xorlw	1	; case 1
  5702  0EB7  1903               	skipnz
  5703  0EB8  2EAF               	goto	l307
  5704  0EB9  2EBA               	goto	l2180
  5705  0EBA                     l2180:	
  5706                           
  5707                           ;Timer.c: 41: Timer_SetMode(timer,TIMER_MODE);
  5708  0EBA  1283               	bcf	3,5	;RP0=0, select bank0
  5709  0EBB  01A4               	clrf	Timer_SetMode@mode
  5710  0EBC  0826               	movf	Timer_Init@timer,w
  5711  0EBD  120A  158A  275B   	fcall	_Timer_SetMode
  5712  0EC0  0008               	return
  5713  0EC1                     __end_of_Timer_Init:	
  5714                           
  5715                           	psect	text39
  5716  0F5B                     __ptext39:	
  5717 ;; *************** function _Timer_SetMode *****************
  5718 ;; Defined at:
  5719 ;;		line 4 in file "Timer.c"
  5720 ;; Parameters:    Size  Location     Type
  5721 ;;  timer           1    wreg     enum E829
  5722 ;;  mode            1    4[BANK0 ] enum E834
  5723 ;; Auto vars:     Size  Location     Type
  5724 ;;  timer           1    5[BANK0 ] enum E829
  5725 ;; Return value:  Size  Location     Type
  5726 ;;                  1    wreg      void 
  5727 ;; Registers used:
  5728 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5729 ;; Tracked objects:
  5730 ;;		On entry : 0/0
  5731 ;;		On exit  : 0/0
  5732 ;;		Unchanged: 0/0
  5733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5734 ;;      Params:         0       1       0       0       0
  5735 ;;      Locals:         0       1       0       0       0
  5736 ;;      Temps:          0       0       0       0       0
  5737 ;;      Totals:         0       2       0       0       0
  5738 ;;Total ram usage:        2 bytes
  5739 ;; Hardware stack levels used:    1
  5740 ;; Hardware stack levels required when called:    3
  5741 ;; This function calls:
  5742 ;;		Nothing
  5743 ;; This function is called by:
  5744 ;;		_Timer_Init
  5745 ;; This function uses a non-reentrant model
  5746 ;;
  5747                           
  5748                           
  5749                           ;psect for function _Timer_SetMode
  5750  0F5B                     _Timer_SetMode:	
  5751                           
  5752                           ;incstack = 0
  5753                           ; Regs used in _Timer_SetMode: [wreg-fsr0h+status,2+status,0]
  5754                           ;Timer_SetMode@timer stored from wreg
  5755  0F5B  1283               	bcf	3,5	;RP0=0, select bank0
  5756  0F5C  1303               	bcf	3,6	;RP1=0, select bank0
  5757  0F5D  00A5               	movwf	Timer_SetMode@timer
  5758                           
  5759                           ;Timer.c: 6: switch(timer)
  5760  0F5E  2F73               	goto	l1940
  5761  0F5F                     l291:	
  5762                           ;Timer.c: 7: {;Timer.c: 8: case TIMER0:
  5763                           
  5764                           
  5765                           ;Timer.c: 9: (T0CS=mode);
  5766  0F5F  1C24               	btfss	Timer_SetMode@mode,0
  5767  0F60  2F65               	goto	u1420
  5768  0F61  1683               	bsf	3,5	;RP0=1, select bank1
  5769  0F62  1303               	bcf	3,6	;RP1=0, select bank1
  5770  0F63  1681               	bsf	1,5	;volatile
  5771  0F64  0008               	return
  5772  0F65                     u1420:	
  5773  0F65  1683               	bsf	3,5	;RP0=1, select bank1
  5774  0F66  1303               	bcf	3,6	;RP1=0, select bank1
  5775  0F67  1281               	bcf	1,5	;volatile
  5776                           
  5777                           ;Timer.c: 10: break;
  5778  0F68  0008               	return
  5779  0F69                     l293:	
  5780                           ;Timer.c: 11: case TIMER1:
  5781                           
  5782                           
  5783                           ;Timer.c: 12: (TMR1CS=mode);
  5784  0F69  1C24               	btfss	Timer_SetMode@mode,0
  5785  0F6A  2F6F               	goto	u1440
  5786  0F6B  1283               	bcf	3,5	;RP0=0, select bank0
  5787  0F6C  1303               	bcf	3,6	;RP1=0, select bank0
  5788  0F6D  1490               	bsf	16,1	;volatile
  5789  0F6E  0008               	return
  5790  0F6F                     u1440:	
  5791  0F6F  1283               	bcf	3,5	;RP0=0, select bank0
  5792  0F70  1303               	bcf	3,6	;RP1=0, select bank0
  5793  0F71  1090               	bcf	16,1	;volatile
  5794                           
  5795                           ;Timer.c: 13: break;
  5796  0F72  0008               	return
  5797  0F73                     l1940:	
  5798  0F73  0825               	movf	Timer_SetMode@timer,w
  5799                           
  5800                           ; Switch size 1, requested type "simple"
  5801                           ; Number of cases is 2, Range of values is 0 to 1
  5802                           ; switch strategies available:
  5803                           ; Name         Instructions Cycles
  5804                           ; simple_byte            7     4 (average)
  5805                           ; direct_byte           14     8 (fixed)
  5806                           ; jumptable            260     6 (fixed)
  5807                           ;	Chosen strategy is simple_byte
  5808  0F74  3A00               	xorlw	0	; case 0
  5809  0F75  1903               	skipnz
  5810  0F76  2F5F               	goto	l291
  5811  0F77  3A01               	xorlw	1	; case 1
  5812  0F78  1903               	skipnz
  5813  0F79  2F69               	goto	l293
  5814  0F7A  2F7B               	goto	l294
  5815  0F7B                     l294:	
  5816  0F7B  0008               	return
  5817  0F7C                     __end_of_Timer_SetMode:	
  5818                           
  5819                           	psect	text40
  5820  0E88                     __ptext40:	
  5821 ;; *************** function _Motor_Init *****************
  5822 ;; Defined at:
  5823 ;;		line 24 in file "Motor.c"
  5824 ;; Parameters:    Size  Location     Type
  5825 ;;  initial_targ    1    wreg     enum E1
  5826 ;; Auto vars:     Size  Location     Type
  5827 ;;  initial_targ    1    9[BANK0 ] enum E1
  5828 ;; Return value:  Size  Location     Type
  5829 ;;                  1    wreg      void 
  5830 ;; Registers used:
  5831 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5832 ;; Tracked objects:
  5833 ;;		On entry : 0/0
  5834 ;;		On exit  : 0/0
  5835 ;;		Unchanged: 0/0
  5836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5837 ;;      Params:         0       0       0       0       0
  5838 ;;      Locals:         0       1       0       0       0
  5839 ;;      Temps:          0       0       0       0       0
  5840 ;;      Totals:         0       1       0       0       0
  5841 ;;Total ram usage:        1 bytes
  5842 ;; Hardware stack levels used:    1
  5843 ;; Hardware stack levels required when called:    4
  5844 ;; This function calls:
  5845 ;;		_GPIO_InitPin
  5846 ;;		_GPIO_SetPinState
  5847 ;;		_Motor_SetTargetAngle
  5848 ;; This function is called by:
  5849 ;;		_main
  5850 ;; This function uses a non-reentrant model
  5851 ;;
  5852                           
  5853                           
  5854                           ;psect for function _Motor_Init
  5855  0E88                     _Motor_Init:	
  5856                           
  5857                           ;incstack = 0
  5858                           ; Regs used in _Motor_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5859                           ;Motor_Init@initial_target_angle stored from wreg
  5860  0E88  1283               	bcf	3,5	;RP0=0, select bank0
  5861  0E89  1303               	bcf	3,6	;RP1=0, select bank0
  5862  0E8A  00A9               	movwf	Motor_Init@initial_target_angle
  5863                           
  5864                           ;Motor.c: 26: GPIO_InitPin(GPIO_PORTC,GPIO_PIN0,GPIO_OUTPUT_DIR);
  5865  0E8B  01A4               	clrf	GPIO_InitPin@pin
  5866  0E8C  01A5               	clrf	GPIO_InitPin@dir
  5867  0E8D  3002               	movlw	2
  5868  0E8E  120A  118A  203D  120A  158A  	fcall	_GPIO_InitPin
  5869                           
  5870                           ;Motor.c: 28: GPIO_SetPinState(GPIO_PORTC,GPIO_PIN0,GPIO_LOW);
  5871  0E93  1283               	bcf	3,5	;RP0=0, select bank0
  5872  0E94  1303               	bcf	3,6	;RP1=0, select bank0
  5873  0E95  01A4               	clrf	GPIO_SetPinState@pin
  5874  0E96  01A5               	clrf	GPIO_SetPinState@state
  5875  0E97  3002               	movlw	2
  5876  0E98  120A  118A  217D  120A  158A  	fcall	_GPIO_SetPinState
  5877                           
  5878                           ;Motor.c: 30: Motor_SetTargetAngle(initial_target_angle);
  5879  0E9D  1283               	bcf	3,5	;RP0=0, select bank0
  5880  0E9E  1303               	bcf	3,6	;RP1=0, select bank0
  5881  0E9F  0829               	movf	Motor_Init@initial_target_angle,w
  5882  0EA0  120A  158A  259B   	fcall	_Motor_SetTargetAngle
  5883  0EA3  0008               	return
  5884  0EA4                     __end_of_Motor_Init:	
  5885                           
  5886                           	psect	text41
  5887  0D9B                     __ptext41:	
  5888 ;; *************** function _Motor_SetTargetAngle *****************
  5889 ;; Defined at:
  5890 ;;		line 19 in file "Motor.c"
  5891 ;; Parameters:    Size  Location     Type
  5892 ;;  target_angle    1    wreg     enum E1
  5893 ;; Auto vars:     Size  Location     Type
  5894 ;;  target_angle    1    5[BANK0 ] enum E1
  5895 ;; Return value:  Size  Location     Type
  5896 ;;                  1    wreg      void 
  5897 ;; Registers used:
  5898 ;;		wreg
  5899 ;; Tracked objects:
  5900 ;;		On entry : 0/0
  5901 ;;		On exit  : 0/0
  5902 ;;		Unchanged: 0/0
  5903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5904 ;;      Params:         0       0       0       0       0
  5905 ;;      Locals:         0       1       0       0       0
  5906 ;;      Temps:          0       1       0       0       0
  5907 ;;      Totals:         0       2       0       0       0
  5908 ;;Total ram usage:        2 bytes
  5909 ;; Hardware stack levels used:    1
  5910 ;; Hardware stack levels required when called:    3
  5911 ;; This function calls:
  5912 ;;		Nothing
  5913 ;; This function is called by:
  5914 ;;		_Motor_Init
  5915 ;;		_VC_Update
  5916 ;; This function uses a non-reentrant model
  5917 ;;
  5918                           
  5919                           
  5920                           ;psect for function _Motor_SetTargetAngle
  5921  0D9B                     _Motor_SetTargetAngle:	
  5922                           
  5923                           ;incstack = 0
  5924                           ; Regs used in _Motor_SetTargetAngle: [wreg]
  5925                           ;Motor_SetTargetAngle@target_angle stored from wreg
  5926  0D9B  1283               	bcf	3,5	;RP0=0, select bank0
  5927  0D9C  1303               	bcf	3,6	;RP1=0, select bank0
  5928  0D9D  00A5               	movwf	Motor_SetTargetAngle@target_angle
  5929                           
  5930                           ;Motor.c: 21: Target_Angle=target_angle;
  5931  0D9E  0825               	movf	Motor_SetTargetAngle@target_angle,w
  5932  0D9F  00A4               	movwf	??_Motor_SetTargetAngle
  5933  0DA0  0824               	movf	??_Motor_SetTargetAngle,w
  5934  0DA1  00FD               	movwf	_Target_Angle
  5935  0DA2  0008               	return
  5936  0DA3                     __end_of_Motor_SetTargetAngle:	
  5937                           
  5938                           	psect	text42
  5939  0EDE                     __ptext42:	
  5940 ;; *************** function _LED_Init *****************
  5941 ;; Defined at:
  5942 ;;		line 6 in file "LED.c"
  5943 ;; Parameters:    Size  Location     Type
  5944 ;;  led             1    wreg     enum E1
  5945 ;;  inital_state    1    9[BANK0 ] enum E4
  5946 ;; Auto vars:     Size  Location     Type
  5947 ;;  led             1   11[BANK0 ] enum E1
  5948 ;; Return value:  Size  Location     Type
  5949 ;;                  1    wreg      void 
  5950 ;; Registers used:
  5951 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5952 ;; Tracked objects:
  5953 ;;		On entry : 0/0
  5954 ;;		On exit  : 0/0
  5955 ;;		Unchanged: 0/0
  5956 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5957 ;;      Params:         0       1       0       0       0
  5958 ;;      Locals:         0       1       0       0       0
  5959 ;;      Temps:          0       1       0       0       0
  5960 ;;      Totals:         0       3       0       0       0
  5961 ;;Total ram usage:        3 bytes
  5962 ;; Hardware stack levels used:    1
  5963 ;; Hardware stack levels required when called:    4
  5964 ;; This function calls:
  5965 ;;		_GPIO_InitPin
  5966 ;;		_GPIO_SetPinState
  5967 ;; This function is called by:
  5968 ;;		_main
  5969 ;; This function uses a non-reentrant model
  5970 ;;
  5971                           
  5972                           
  5973                           ;psect for function _LED_Init
  5974  0EDE                     _LED_Init:	
  5975                           
  5976                           ;incstack = 0
  5977                           ; Regs used in _LED_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5978                           ;LED_Init@led stored from wreg
  5979  0EDE  1283               	bcf	3,5	;RP0=0, select bank0
  5980  0EDF  1303               	bcf	3,6	;RP1=0, select bank0
  5981  0EE0  00AB               	movwf	LED_Init@led
  5982                           
  5983                           ;LED.c: 8: switch(led)
  5984  0EE1  2EF6               	goto	l2220
  5985  0EE2                     l2216:	
  5986                           
  5987                           ;LED.c: 11: GPIO_InitPin(GPIO_PORTB,GPIO_PIN0,GPIO_OUTPUT_DIR);
  5988  0EE2  01A4               	clrf	GPIO_InitPin@pin
  5989  0EE3  01A5               	clrf	GPIO_InitPin@dir
  5990  0EE4  3001               	movlw	1
  5991  0EE5  120A  118A  203D  120A  158A  	fcall	_GPIO_InitPin
  5992                           
  5993                           ;LED.c: 12: GPIO_SetPinState(GPIO_PORTB,GPIO_PIN0,inital_state);
  5994  0EEA  1283               	bcf	3,5	;RP0=0, select bank0
  5995  0EEB  1303               	bcf	3,6	;RP1=0, select bank0
  5996  0EEC  01A4               	clrf	GPIO_SetPinState@pin
  5997  0EED  0829               	movf	LED_Init@inital_state,w
  5998  0EEE  00AA               	movwf	??_LED_Init
  5999  0EEF  082A               	movf	??_LED_Init,w
  6000  0EF0  00A5               	movwf	GPIO_SetPinState@state
  6001  0EF1  3001               	movlw	1
  6002  0EF2  120A  118A  217D   	fcall	_GPIO_SetPinState
  6003                           
  6004                           ;LED.c: 13: break;
  6005  0EF5  0008               	return
  6006  0EF6                     l2220:	
  6007  0EF6  082B               	movf	LED_Init@led,w
  6008                           
  6009                           ; Switch size 1, requested type "simple"
  6010                           ; Number of cases is 1, Range of values is 0 to 0
  6011                           ; switch strategies available:
  6012                           ; Name         Instructions Cycles
  6013                           ; simple_byte            4     3 (average)
  6014                           ; direct_byte           11     8 (fixed)
  6015                           ; jumptable            260     6 (fixed)
  6016                           ;	Chosen strategy is simple_byte
  6017  0EF7  3A00               	xorlw	0	; case 0
  6018  0EF8  1903               	skipnz
  6019  0EF9  2EE2               	goto	l2216
  6020  0EFA  2EFB               	goto	l158
  6021  0EFB                     l158:	
  6022  0EFB  0008               	return
  6023  0EFC                     __end_of_LED_Init:	
  6024                           
  6025                           	psect	text43
  6026  017D                     __ptext43:	
  6027 ;; *************** function _GPIO_SetPinState *****************
  6028 ;; Defined at:
  6029 ;;		line 102 in file "GPIO.c"
  6030 ;; Parameters:    Size  Location     Type
  6031 ;;  port            1    wreg     enum E829
  6032 ;;  pin             1    4[BANK0 ] enum E836
  6033 ;;  state           1    5[BANK0 ] enum E850
  6034 ;; Auto vars:     Size  Location     Type
  6035 ;;  port            1    8[BANK0 ] enum E829
  6036 ;; Return value:  Size  Location     Type
  6037 ;;                  1    wreg      void 
  6038 ;; Registers used:
  6039 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6040 ;; Tracked objects:
  6041 ;;		On entry : 0/0
  6042 ;;		On exit  : 0/0
  6043 ;;		Unchanged: 0/0
  6044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6045 ;;      Params:         0       2       0       0       0
  6046 ;;      Locals:         0       1       0       0       0
  6047 ;;      Temps:          0       2       0       0       0
  6048 ;;      Totals:         0       5       0       0       0
  6049 ;;Total ram usage:        5 bytes
  6050 ;; Hardware stack levels used:    1
  6051 ;; Hardware stack levels required when called:    3
  6052 ;; This function calls:
  6053 ;;		Nothing
  6054 ;; This function is called by:
  6055 ;;		_GPIO_TogglePinState
  6056 ;;		_LED_Init
  6057 ;;		_LED_SetState
  6058 ;;		_Motor_Init
  6059 ;;		_Motor_OutputUpdate
  6060 ;;		_SSD_Init
  6061 ;;		_SSD_SetCtrlLine
  6062 ;; This function uses a non-reentrant model
  6063 ;;
  6064                           
  6065                           
  6066                           ;psect for function _GPIO_SetPinState
  6067  017D                     _GPIO_SetPinState:	
  6068                           
  6069                           ;incstack = 0
  6070                           ; Regs used in _GPIO_SetPinState: [wreg-fsr0h+status,2+status,0]
  6071                           ;GPIO_SetPinState@port stored from wreg
  6072  017D  1283               	bcf	3,5	;RP0=0, select bank0
  6073  017E  1303               	bcf	3,6	;RP1=0, select bank0
  6074  017F  00A8               	movwf	GPIO_SetPinState@port
  6075                           
  6076                           ;GPIO.c: 104: switch(port)
  6077  0180  29F9               	goto	l1798
  6078  0181                     l1786:	
  6079                           
  6080                           ;GPIO.c: 107: (PORTA = (((PORTA)&(~(1<<(pin)))) | ((state)<<(pin))));
  6081  0181  0825               	movf	GPIO_SetPinState@state,w
  6082  0182  00A6               	movwf	??_GPIO_SetPinState
  6083  0183  0A24               	incf	GPIO_SetPinState@pin,w
  6084  0184  2987               	goto	u1124
  6085  0185                     u1125:	
  6086  0185  1003               	clrc
  6087  0186  0DA6               	rlf	??_GPIO_SetPinState,f
  6088  0187                     u1124:	
  6089  0187  3EFF               	addlw	-1
  6090  0188  1D03               	skipz
  6091  0189  2985               	goto	u1125
  6092  018A  3001               	movlw	1
  6093  018B  00A7               	movwf	??_GPIO_SetPinState+1
  6094  018C  0A24               	incf	GPIO_SetPinState@pin,w
  6095  018D  2990               	goto	u1134
  6096  018E                     u1135:	
  6097  018E  1003               	clrc
  6098  018F  0DA7               	rlf	??_GPIO_SetPinState+1,f
  6099  0190                     u1134:	
  6100  0190  3EFF               	addlw	-1
  6101  0191  1D03               	skipz
  6102  0192  298E               	goto	u1135
  6103  0193  0827               	movf	??_GPIO_SetPinState+1,w
  6104  0194  3AFF               	xorlw	255
  6105  0195  0505               	andwf	5,w	;volatile
  6106  0196  0426               	iorwf	??_GPIO_SetPinState,w
  6107  0197  0085               	movwf	5	;volatile
  6108                           
  6109                           ;GPIO.c: 108: break;
  6110  0198  0008               	return
  6111  0199                     l1788:	
  6112                           
  6113                           ;GPIO.c: 110: (PORTB = (((PORTB)&(~(1<<(pin)))) | ((state)<<(pin))));
  6114  0199  0825               	movf	GPIO_SetPinState@state,w
  6115  019A  00A6               	movwf	??_GPIO_SetPinState
  6116  019B  0A24               	incf	GPIO_SetPinState@pin,w
  6117  019C  299F               	goto	u1144
  6118  019D                     u1145:	
  6119  019D  1003               	clrc
  6120  019E  0DA6               	rlf	??_GPIO_SetPinState,f
  6121  019F                     u1144:	
  6122  019F  3EFF               	addlw	-1
  6123  01A0  1D03               	skipz
  6124  01A1  299D               	goto	u1145
  6125  01A2  3001               	movlw	1
  6126  01A3  00A7               	movwf	??_GPIO_SetPinState+1
  6127  01A4  0A24               	incf	GPIO_SetPinState@pin,w
  6128  01A5  29A8               	goto	u1154
  6129  01A6                     u1155:	
  6130  01A6  1003               	clrc
  6131  01A7  0DA7               	rlf	??_GPIO_SetPinState+1,f
  6132  01A8                     u1154:	
  6133  01A8  3EFF               	addlw	-1
  6134  01A9  1D03               	skipz
  6135  01AA  29A6               	goto	u1155
  6136  01AB  0827               	movf	??_GPIO_SetPinState+1,w
  6137  01AC  3AFF               	xorlw	255
  6138  01AD  0506               	andwf	6,w	;volatile
  6139  01AE  0426               	iorwf	??_GPIO_SetPinState,w
  6140  01AF  0086               	movwf	6	;volatile
  6141                           
  6142                           ;GPIO.c: 111: break;
  6143  01B0  0008               	return
  6144  01B1                     l1790:	
  6145                           
  6146                           ;GPIO.c: 113: (PORTC = (((PORTC)&(~(1<<(pin)))) | ((state)<<(pin))));
  6147  01B1  0825               	movf	GPIO_SetPinState@state,w
  6148  01B2  00A6               	movwf	??_GPIO_SetPinState
  6149  01B3  0A24               	incf	GPIO_SetPinState@pin,w
  6150  01B4  29B7               	goto	u1164
  6151  01B5                     u1165:	
  6152  01B5  1003               	clrc
  6153  01B6  0DA6               	rlf	??_GPIO_SetPinState,f
  6154  01B7                     u1164:	
  6155  01B7  3EFF               	addlw	-1
  6156  01B8  1D03               	skipz
  6157  01B9  29B5               	goto	u1165
  6158  01BA  3001               	movlw	1
  6159  01BB  00A7               	movwf	??_GPIO_SetPinState+1
  6160  01BC  0A24               	incf	GPIO_SetPinState@pin,w
  6161  01BD  29C0               	goto	u1174
  6162  01BE                     u1175:	
  6163  01BE  1003               	clrc
  6164  01BF  0DA7               	rlf	??_GPIO_SetPinState+1,f
  6165  01C0                     u1174:	
  6166  01C0  3EFF               	addlw	-1
  6167  01C1  1D03               	skipz
  6168  01C2  29BE               	goto	u1175
  6169  01C3  0827               	movf	??_GPIO_SetPinState+1,w
  6170  01C4  3AFF               	xorlw	255
  6171  01C5  0507               	andwf	7,w	;volatile
  6172  01C6  0426               	iorwf	??_GPIO_SetPinState,w
  6173  01C7  0087               	movwf	7	;volatile
  6174                           
  6175                           ;GPIO.c: 114: break;
  6176  01C8  0008               	return
  6177  01C9                     l1792:	
  6178                           
  6179                           ;GPIO.c: 116: (PORTD = (((PORTD)&(~(1<<(pin)))) | ((state)<<(pin))));
  6180  01C9  0825               	movf	GPIO_SetPinState@state,w
  6181  01CA  00A6               	movwf	??_GPIO_SetPinState
  6182  01CB  0A24               	incf	GPIO_SetPinState@pin,w
  6183  01CC  29CF               	goto	u1184
  6184  01CD                     u1185:	
  6185  01CD  1003               	clrc
  6186  01CE  0DA6               	rlf	??_GPIO_SetPinState,f
  6187  01CF                     u1184:	
  6188  01CF  3EFF               	addlw	-1
  6189  01D0  1D03               	skipz
  6190  01D1  29CD               	goto	u1185
  6191  01D2  3001               	movlw	1
  6192  01D3  00A7               	movwf	??_GPIO_SetPinState+1
  6193  01D4  0A24               	incf	GPIO_SetPinState@pin,w
  6194  01D5  29D8               	goto	u1194
  6195  01D6                     u1195:	
  6196  01D6  1003               	clrc
  6197  01D7  0DA7               	rlf	??_GPIO_SetPinState+1,f
  6198  01D8                     u1194:	
  6199  01D8  3EFF               	addlw	-1
  6200  01D9  1D03               	skipz
  6201  01DA  29D6               	goto	u1195
  6202  01DB  0827               	movf	??_GPIO_SetPinState+1,w
  6203  01DC  3AFF               	xorlw	255
  6204  01DD  0508               	andwf	8,w	;volatile
  6205  01DE  0426               	iorwf	??_GPIO_SetPinState,w
  6206  01DF  0088               	movwf	8	;volatile
  6207                           
  6208                           ;GPIO.c: 117: break;
  6209  01E0  0008               	return
  6210  01E1                     l1794:	
  6211                           
  6212                           ;GPIO.c: 119: (PORTE = (((PORTE)&(~(1<<(pin)))) | ((state)<<(pin))));
  6213  01E1  0825               	movf	GPIO_SetPinState@state,w
  6214  01E2  00A6               	movwf	??_GPIO_SetPinState
  6215  01E3  0A24               	incf	GPIO_SetPinState@pin,w
  6216  01E4  29E7               	goto	u1204
  6217  01E5                     u1205:	
  6218  01E5  1003               	clrc
  6219  01E6  0DA6               	rlf	??_GPIO_SetPinState,f
  6220  01E7                     u1204:	
  6221  01E7  3EFF               	addlw	-1
  6222  01E8  1D03               	skipz
  6223  01E9  29E5               	goto	u1205
  6224  01EA  3001               	movlw	1
  6225  01EB  00A7               	movwf	??_GPIO_SetPinState+1
  6226  01EC  0A24               	incf	GPIO_SetPinState@pin,w
  6227  01ED  29F0               	goto	u1214
  6228  01EE                     u1215:	
  6229  01EE  1003               	clrc
  6230  01EF  0DA7               	rlf	??_GPIO_SetPinState+1,f
  6231  01F0                     u1214:	
  6232  01F0  3EFF               	addlw	-1
  6233  01F1  1D03               	skipz
  6234  01F2  29EE               	goto	u1215
  6235  01F3  0827               	movf	??_GPIO_SetPinState+1,w
  6236  01F4  3AFF               	xorlw	255
  6237  01F5  0509               	andwf	9,w	;volatile
  6238  01F6  0426               	iorwf	??_GPIO_SetPinState,w
  6239  01F7  0089               	movwf	9	;volatile
  6240                           
  6241                           ;GPIO.c: 120: break;
  6242  01F8  0008               	return
  6243  01F9                     l1798:	
  6244  01F9  0828               	movf	GPIO_SetPinState@port,w
  6245                           
  6246                           ; Switch size 1, requested type "simple"
  6247                           ; Number of cases is 5, Range of values is 0 to 4
  6248                           ; switch strategies available:
  6249                           ; Name         Instructions Cycles
  6250                           ; simple_byte           16     9 (average)
  6251                           ; direct_byte           23     8 (fixed)
  6252                           ; jumptable            260     6 (fixed)
  6253                           ;	Chosen strategy is simple_byte
  6254  01FA  3A00               	xorlw	0	; case 0
  6255  01FB  1903               	skipnz
  6256  01FC  2981               	goto	l1786
  6257  01FD  3A01               	xorlw	1	; case 1
  6258  01FE  1903               	skipnz
  6259  01FF  2999               	goto	l1788
  6260  0200  3A03               	xorlw	3	; case 2
  6261  0201  1903               	skipnz
  6262  0202  29B1               	goto	l1790
  6263  0203  3A01               	xorlw	1	; case 3
  6264  0204  1903               	skipnz
  6265  0205  29C9               	goto	l1792
  6266  0206  3A07               	xorlw	7	; case 4
  6267  0207  1903               	skipnz
  6268  0208  29E1               	goto	l1794
  6269  0209  2A0A               	goto	l145
  6270  020A                     l145:	
  6271  020A  0008               	return
  6272  020B                     __end_of_GPIO_SetPinState:	
  6273                           
  6274                           	psect	text44
  6275  0003                     __ptext44:	
  6276 ;; *************** function _Display_Init *****************
  6277 ;; Defined at:
  6278 ;;		line 7 in file "Display.c"
  6279 ;; Parameters:    Size  Location     Type
  6280 ;;		None
  6281 ;; Auto vars:     Size  Location     Type
  6282 ;;		None
  6283 ;; Return value:  Size  Location     Type
  6284 ;;                  1    wreg      void 
  6285 ;; Registers used:
  6286 ;;		None
  6287 ;; Tracked objects:
  6288 ;;		On entry : 0/0
  6289 ;;		On exit  : 0/0
  6290 ;;		Unchanged: 0/0
  6291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6292 ;;      Params:         0       0       0       0       0
  6293 ;;      Locals:         0       0       0       0       0
  6294 ;;      Temps:          0       0       0       0       0
  6295 ;;      Totals:         0       0       0       0       0
  6296 ;;Total ram usage:        0 bytes
  6297 ;; Hardware stack levels used:    1
  6298 ;; Hardware stack levels required when called:    3
  6299 ;; This function calls:
  6300 ;;		Nothing
  6301 ;; This function is called by:
  6302 ;;		_main
  6303 ;; This function uses a non-reentrant model
  6304 ;;
  6305                           
  6306                           
  6307                           ;psect for function _Display_Init
  6308  0003                     _Display_Init:	
  6309                           
  6310                           ;incstack = 0
  6311                           ; Regs used in _Display_Init: []
  6312  0003  0008               	return
  6313  0004                     __end_of_Display_Init:	
  6314                           
  6315                           	psect	text45
  6316  0F9F                     __ptext45:	
  6317 ;; *************** function _Button_Init *****************
  6318 ;; Defined at:
  6319 ;;		line 13 in file "Button.c"
  6320 ;; Parameters:    Size  Location     Type
  6321 ;;  button          1    wreg     enum E829
  6322 ;; Auto vars:     Size  Location     Type
  6323 ;;  button          1   10[BANK0 ] enum E829
  6324 ;; Return value:  Size  Location     Type
  6325 ;;                  1    wreg      void 
  6326 ;; Registers used:
  6327 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6328 ;; Tracked objects:
  6329 ;;		On entry : 0/0
  6330 ;;		On exit  : 0/0
  6331 ;;		Unchanged: 0/0
  6332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6333 ;;      Params:         0       0       0       0       0
  6334 ;;      Locals:         0       1       0       0       0
  6335 ;;      Temps:          0       1       0       0       0
  6336 ;;      Totals:         0       2       0       0       0
  6337 ;;Total ram usage:        2 bytes
  6338 ;; Hardware stack levels used:    1
  6339 ;; Hardware stack levels required when called:    4
  6340 ;; This function calls:
  6341 ;;		_GPIO_InitPin
  6342 ;; This function is called by:
  6343 ;;		_main
  6344 ;; This function uses a non-reentrant model
  6345 ;;
  6346                           
  6347                           
  6348                           ;psect for function _Button_Init
  6349  0F9F                     _Button_Init:	
  6350                           
  6351                           ;incstack = 0
  6352                           ; Regs used in _Button_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6353                           ;Button_Init@button stored from wreg
  6354  0F9F  1283               	bcf	3,5	;RP0=0, select bank0
  6355  0FA0  1303               	bcf	3,6	;RP1=0, select bank0
  6356  0FA1  00AA               	movwf	Button_Init@button
  6357                           
  6358                           ;Button.c: 15: switch(button)
  6359  0FA2  2FC2               	goto	l2212
  6360  0FA3                     l2204:	
  6361                           
  6362                           ;Button.c: 18: GPIO_InitPin(GPIO_PORTB,GPIO_PIN1,GPIO_INPUT_DIR);
  6363  0FA3  01A4               	clrf	GPIO_InitPin@pin
  6364  0FA4  0AA4               	incf	GPIO_InitPin@pin,f
  6365  0FA5  01A5               	clrf	GPIO_InitPin@dir
  6366  0FA6  0AA5               	incf	GPIO_InitPin@dir,f
  6367  0FA7  3001               	movlw	1
  6368  0FA8  120A  118A  203D   	fcall	_GPIO_InitPin
  6369                           
  6370                           ;Button.c: 19: break;
  6371  0FAB  0008               	return
  6372  0FAC                     l2206:	
  6373                           
  6374                           ;Button.c: 22: GPIO_InitPin(GPIO_PORTB,GPIO_PIN2,GPIO_INPUT_DIR);
  6375  0FAC  3002               	movlw	2
  6376  0FAD  00A9               	movwf	??_Button_Init
  6377  0FAE  0829               	movf	??_Button_Init,w
  6378  0FAF  00A4               	movwf	GPIO_InitPin@pin
  6379  0FB0  01A5               	clrf	GPIO_InitPin@dir
  6380  0FB1  0AA5               	incf	GPIO_InitPin@dir,f
  6381  0FB2  3001               	movlw	1
  6382  0FB3  120A  118A  203D   	fcall	_GPIO_InitPin
  6383                           
  6384                           ;Button.c: 23: break;
  6385  0FB6  0008               	return
  6386  0FB7                     l2208:	
  6387                           
  6388                           ;Button.c: 26: GPIO_InitPin(GPIO_PORTB,GPIO_PIN3,GPIO_INPUT_DIR);
  6389  0FB7  3003               	movlw	3
  6390  0FB8  00A9               	movwf	??_Button_Init
  6391  0FB9  0829               	movf	??_Button_Init,w
  6392  0FBA  00A4               	movwf	GPIO_InitPin@pin
  6393  0FBB  01A5               	clrf	GPIO_InitPin@dir
  6394  0FBC  0AA5               	incf	GPIO_InitPin@dir,f
  6395  0FBD  3001               	movlw	1
  6396  0FBE  120A  118A  203D   	fcall	_GPIO_InitPin
  6397                           
  6398                           ;Button.c: 27: break;
  6399  0FC1  0008               	return
  6400  0FC2                     l2212:	
  6401  0FC2  082A               	movf	Button_Init@button,w
  6402                           
  6403                           ; Switch size 1, requested type "simple"
  6404                           ; Number of cases is 3, Range of values is 0 to 2
  6405                           ; switch strategies available:
  6406                           ; Name         Instructions Cycles
  6407                           ; simple_byte           10     6 (average)
  6408                           ; direct_byte           17     8 (fixed)
  6409                           ; jumptable            260     6 (fixed)
  6410                           ;	Chosen strategy is simple_byte
  6411  0FC3  3A00               	xorlw	0	; case 0
  6412  0FC4  1903               	skipnz
  6413  0FC5  2FA3               	goto	l2204
  6414  0FC6  3A01               	xorlw	1	; case 1
  6415  0FC7  1903               	skipnz
  6416  0FC8  2FAC               	goto	l2206
  6417  0FC9  3A03               	xorlw	3	; case 2
  6418  0FCA  1903               	skipnz
  6419  0FCB  2FB7               	goto	l2208
  6420  0FCC  2FCD               	goto	l18
  6421  0FCD                     l18:	
  6422  0FCD  0008               	return
  6423  0FCE                     __end_of_Button_Init:	
  6424                           
  6425                           	psect	text46
  6426  003D                     __ptext46:	
  6427 ;; *************** function _GPIO_InitPin *****************
  6428 ;; Defined at:
  6429 ;;		line 27 in file "GPIO.c"
  6430 ;; Parameters:    Size  Location     Type
  6431 ;;  port            1    wreg     enum E829
  6432 ;;  pin             1    4[BANK0 ] enum E836
  6433 ;;  dir             1    5[BANK0 ] enum E846
  6434 ;; Auto vars:     Size  Location     Type
  6435 ;;  port            1    8[BANK0 ] enum E829
  6436 ;; Return value:  Size  Location     Type
  6437 ;;                  1    wreg      void 
  6438 ;; Registers used:
  6439 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6440 ;; Tracked objects:
  6441 ;;		On entry : 0/0
  6442 ;;		On exit  : 0/0
  6443 ;;		Unchanged: 0/0
  6444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6445 ;;      Params:         0       2       0       0       0
  6446 ;;      Locals:         0       1       0       0       0
  6447 ;;      Temps:          0       2       0       0       0
  6448 ;;      Totals:         0       5       0       0       0
  6449 ;;Total ram usage:        5 bytes
  6450 ;; Hardware stack levels used:    1
  6451 ;; Hardware stack levels required when called:    3
  6452 ;; This function calls:
  6453 ;;		Nothing
  6454 ;; This function is called by:
  6455 ;;		_Button_Init
  6456 ;;		_LED_Init
  6457 ;;		_OS_Init
  6458 ;;		_Motor_Init
  6459 ;;		_SSD_Init
  6460 ;; This function uses a non-reentrant model
  6461 ;;
  6462                           
  6463                           
  6464                           ;psect for function _GPIO_InitPin
  6465  003D                     _GPIO_InitPin:	
  6466                           
  6467                           ;incstack = 0
  6468                           ; Regs used in _GPIO_InitPin: [wreg-fsr0h+status,2+status,0]
  6469                           ;GPIO_InitPin@port stored from wreg
  6470  003D  1283               	bcf	3,5	;RP0=0, select bank0
  6471  003E  1303               	bcf	3,6	;RP1=0, select bank0
  6472  003F  00A8               	movwf	GPIO_InitPin@port
  6473                           
  6474                           ;GPIO.c: 29: switch(port)
  6475  0040  28D7               	goto	l2018
  6476  0041                     l2006:	
  6477                           
  6478                           ;GPIO.c: 32: (TRISA = (((TRISA)&(~(1<<(pin)))) | ((dir)<<(pin))));
  6479  0041  0825               	movf	GPIO_InitPin@dir,w
  6480  0042  00A6               	movwf	??_GPIO_InitPin
  6481  0043  0A24               	incf	GPIO_InitPin@pin,w
  6482  0044  2847               	goto	u1564
  6483  0045                     u1565:	
  6484  0045  1003               	clrc
  6485  0046  0DA6               	rlf	??_GPIO_InitPin,f
  6486  0047                     u1564:	
  6487  0047  3EFF               	addlw	-1
  6488  0048  1D03               	skipz
  6489  0049  2845               	goto	u1565
  6490  004A  3001               	movlw	1
  6491  004B  00A7               	movwf	??_GPIO_InitPin+1
  6492  004C  0A24               	incf	GPIO_InitPin@pin,w
  6493  004D  2850               	goto	u1574
  6494  004E                     u1575:	
  6495  004E  1003               	clrc
  6496  004F  0DA7               	rlf	??_GPIO_InitPin+1,f
  6497  0050                     u1574:	
  6498  0050  3EFF               	addlw	-1
  6499  0051  1D03               	skipz
  6500  0052  284E               	goto	u1575
  6501  0053  0827               	movf	??_GPIO_InitPin+1,w
  6502  0054  3AFF               	xorlw	255
  6503  0055  1683               	bsf	3,5	;RP0=1, select bank1
  6504  0056  1303               	bcf	3,6	;RP1=0, select bank1
  6505  0057  0505               	andwf	5,w	;volatile
  6506  0058  1283               	bcf	3,5	;RP0=0, select bank0
  6507  0059  1303               	bcf	3,6	;RP1=0, select bank0
  6508  005A  0426               	iorwf	??_GPIO_InitPin,w
  6509  005B  1683               	bsf	3,5	;RP0=1, select bank1
  6510  005C  1303               	bcf	3,6	;RP1=0, select bank1
  6511  005D  0085               	movwf	5	;volatile
  6512                           
  6513                           ;GPIO.c: 33: break;
  6514  005E  0008               	return
  6515  005F                     l2008:	
  6516                           
  6517                           ;GPIO.c: 35: (TRISB = (((TRISB)&(~(1<<(pin)))) | ((dir)<<(pin))));
  6518  005F  0825               	movf	GPIO_InitPin@dir,w
  6519  0060  00A6               	movwf	??_GPIO_InitPin
  6520  0061  0A24               	incf	GPIO_InitPin@pin,w
  6521  0062  2865               	goto	u1584
  6522  0063                     u1585:	
  6523  0063  1003               	clrc
  6524  0064  0DA6               	rlf	??_GPIO_InitPin,f
  6525  0065                     u1584:	
  6526  0065  3EFF               	addlw	-1
  6527  0066  1D03               	skipz
  6528  0067  2863               	goto	u1585
  6529  0068  3001               	movlw	1
  6530  0069  00A7               	movwf	??_GPIO_InitPin+1
  6531  006A  0A24               	incf	GPIO_InitPin@pin,w
  6532  006B  286E               	goto	u1594
  6533  006C                     u1595:	
  6534  006C  1003               	clrc
  6535  006D  0DA7               	rlf	??_GPIO_InitPin+1,f
  6536  006E                     u1594:	
  6537  006E  3EFF               	addlw	-1
  6538  006F  1D03               	skipz
  6539  0070  286C               	goto	u1595
  6540  0071  0827               	movf	??_GPIO_InitPin+1,w
  6541  0072  3AFF               	xorlw	255
  6542  0073  1683               	bsf	3,5	;RP0=1, select bank1
  6543  0074  1303               	bcf	3,6	;RP1=0, select bank1
  6544  0075  0506               	andwf	6,w	;volatile
  6545  0076  1283               	bcf	3,5	;RP0=0, select bank0
  6546  0077  1303               	bcf	3,6	;RP1=0, select bank0
  6547  0078  0426               	iorwf	??_GPIO_InitPin,w
  6548  0079  1683               	bsf	3,5	;RP0=1, select bank1
  6549  007A  1303               	bcf	3,6	;RP1=0, select bank1
  6550  007B  0086               	movwf	6	;volatile
  6551                           
  6552                           ;GPIO.c: 36: break;
  6553  007C  0008               	return
  6554  007D                     l2010:	
  6555                           
  6556                           ;GPIO.c: 38: (TRISC = (((TRISC)&(~(1<<(pin)))) | ((dir)<<(pin))));
  6557  007D  0825               	movf	GPIO_InitPin@dir,w
  6558  007E  00A6               	movwf	??_GPIO_InitPin
  6559  007F  0A24               	incf	GPIO_InitPin@pin,w
  6560  0080  2883               	goto	u1604
  6561  0081                     u1605:	
  6562  0081  1003               	clrc
  6563  0082  0DA6               	rlf	??_GPIO_InitPin,f
  6564  0083                     u1604:	
  6565  0083  3EFF               	addlw	-1
  6566  0084  1D03               	skipz
  6567  0085  2881               	goto	u1605
  6568  0086  3001               	movlw	1
  6569  0087  00A7               	movwf	??_GPIO_InitPin+1
  6570  0088  0A24               	incf	GPIO_InitPin@pin,w
  6571  0089  288C               	goto	u1614
  6572  008A                     u1615:	
  6573  008A  1003               	clrc
  6574  008B  0DA7               	rlf	??_GPIO_InitPin+1,f
  6575  008C                     u1614:	
  6576  008C  3EFF               	addlw	-1
  6577  008D  1D03               	skipz
  6578  008E  288A               	goto	u1615
  6579  008F  0827               	movf	??_GPIO_InitPin+1,w
  6580  0090  3AFF               	xorlw	255
  6581  0091  1683               	bsf	3,5	;RP0=1, select bank1
  6582  0092  1303               	bcf	3,6	;RP1=0, select bank1
  6583  0093  0507               	andwf	7,w	;volatile
  6584  0094  1283               	bcf	3,5	;RP0=0, select bank0
  6585  0095  1303               	bcf	3,6	;RP1=0, select bank0
  6586  0096  0426               	iorwf	??_GPIO_InitPin,w
  6587  0097  1683               	bsf	3,5	;RP0=1, select bank1
  6588  0098  1303               	bcf	3,6	;RP1=0, select bank1
  6589  0099  0087               	movwf	7	;volatile
  6590                           
  6591                           ;GPIO.c: 39: break;
  6592  009A  0008               	return
  6593  009B                     l2012:	
  6594                           
  6595                           ;GPIO.c: 41: (TRISD = (((TRISD)&(~(1<<(pin)))) | ((dir)<<(pin))));
  6596  009B  0825               	movf	GPIO_InitPin@dir,w
  6597  009C  00A6               	movwf	??_GPIO_InitPin
  6598  009D  0A24               	incf	GPIO_InitPin@pin,w
  6599  009E  28A1               	goto	u1624
  6600  009F                     u1625:	
  6601  009F  1003               	clrc
  6602  00A0  0DA6               	rlf	??_GPIO_InitPin,f
  6603  00A1                     u1624:	
  6604  00A1  3EFF               	addlw	-1
  6605  00A2  1D03               	skipz
  6606  00A3  289F               	goto	u1625
  6607  00A4  3001               	movlw	1
  6608  00A5  00A7               	movwf	??_GPIO_InitPin+1
  6609  00A6  0A24               	incf	GPIO_InitPin@pin,w
  6610  00A7  28AA               	goto	u1634
  6611  00A8                     u1635:	
  6612  00A8  1003               	clrc
  6613  00A9  0DA7               	rlf	??_GPIO_InitPin+1,f
  6614  00AA                     u1634:	
  6615  00AA  3EFF               	addlw	-1
  6616  00AB  1D03               	skipz
  6617  00AC  28A8               	goto	u1635
  6618  00AD  0827               	movf	??_GPIO_InitPin+1,w
  6619  00AE  3AFF               	xorlw	255
  6620  00AF  1683               	bsf	3,5	;RP0=1, select bank1
  6621  00B0  1303               	bcf	3,6	;RP1=0, select bank1
  6622  00B1  0508               	andwf	8,w	;volatile
  6623  00B2  1283               	bcf	3,5	;RP0=0, select bank0
  6624  00B3  1303               	bcf	3,6	;RP1=0, select bank0
  6625  00B4  0426               	iorwf	??_GPIO_InitPin,w
  6626  00B5  1683               	bsf	3,5	;RP0=1, select bank1
  6627  00B6  1303               	bcf	3,6	;RP1=0, select bank1
  6628  00B7  0088               	movwf	8	;volatile
  6629                           
  6630                           ;GPIO.c: 42: break;
  6631  00B8  0008               	return
  6632  00B9                     l2014:	
  6633                           
  6634                           ;GPIO.c: 44: (TRISE = (((TRISE)&(~(1<<(pin)))) | ((dir)<<(pin))));
  6635  00B9  0825               	movf	GPIO_InitPin@dir,w
  6636  00BA  00A6               	movwf	??_GPIO_InitPin
  6637  00BB  0A24               	incf	GPIO_InitPin@pin,w
  6638  00BC  28BF               	goto	u1644
  6639  00BD                     u1645:	
  6640  00BD  1003               	clrc
  6641  00BE  0DA6               	rlf	??_GPIO_InitPin,f
  6642  00BF                     u1644:	
  6643  00BF  3EFF               	addlw	-1
  6644  00C0  1D03               	skipz
  6645  00C1  28BD               	goto	u1645
  6646  00C2  3001               	movlw	1
  6647  00C3  00A7               	movwf	??_GPIO_InitPin+1
  6648  00C4  0A24               	incf	GPIO_InitPin@pin,w
  6649  00C5  28C8               	goto	u1654
  6650  00C6                     u1655:	
  6651  00C6  1003               	clrc
  6652  00C7  0DA7               	rlf	??_GPIO_InitPin+1,f
  6653  00C8                     u1654:	
  6654  00C8  3EFF               	addlw	-1
  6655  00C9  1D03               	skipz
  6656  00CA  28C6               	goto	u1655
  6657  00CB  0827               	movf	??_GPIO_InitPin+1,w
  6658  00CC  3AFF               	xorlw	255
  6659  00CD  1683               	bsf	3,5	;RP0=1, select bank1
  6660  00CE  1303               	bcf	3,6	;RP1=0, select bank1
  6661  00CF  0509               	andwf	9,w	;volatile
  6662  00D0  1283               	bcf	3,5	;RP0=0, select bank0
  6663  00D1  1303               	bcf	3,6	;RP1=0, select bank0
  6664  00D2  0426               	iorwf	??_GPIO_InitPin,w
  6665  00D3  1683               	bsf	3,5	;RP0=1, select bank1
  6666  00D4  1303               	bcf	3,6	;RP1=0, select bank1
  6667  00D5  0089               	movwf	9	;volatile
  6668                           
  6669                           ;GPIO.c: 45: break;
  6670  00D6  0008               	return
  6671  00D7                     l2018:	
  6672  00D7  0828               	movf	GPIO_InitPin@port,w
  6673                           
  6674                           ; Switch size 1, requested type "simple"
  6675                           ; Number of cases is 5, Range of values is 0 to 4
  6676                           ; switch strategies available:
  6677                           ; Name         Instructions Cycles
  6678                           ; simple_byte           16     9 (average)
  6679                           ; direct_byte           23     8 (fixed)
  6680                           ; jumptable            260     6 (fixed)
  6681                           ;	Chosen strategy is simple_byte
  6682  00D8  3A00               	xorlw	0	; case 0
  6683  00D9  1903               	skipnz
  6684  00DA  2841               	goto	l2006
  6685  00DB  3A01               	xorlw	1	; case 1
  6686  00DC  1903               	skipnz
  6687  00DD  285F               	goto	l2008
  6688  00DE  3A03               	xorlw	3	; case 2
  6689  00DF  1903               	skipnz
  6690  00E0  287D               	goto	l2010
  6691  00E1  3A01               	xorlw	1	; case 3
  6692  00E2  1903               	skipnz
  6693  00E3  289B               	goto	l2012
  6694  00E4  3A07               	xorlw	7	; case 4
  6695  00E5  1903               	skipnz
  6696  00E6  28B9               	goto	l2014
  6697  00E7  28E8               	goto	l112
  6698  00E8                     l112:	
  6699  00E8  0008               	return
  6700  00E9                     __end_of_GPIO_InitPin:	
  6701                           
  6702                           	psect	text47
  6703  0EFC                     __ptext47:	
  6704 ;; *************** function _OS_Update *****************
  6705 ;; Defined at:
  6706 ;;		line 83 in file "OS.c"
  6707 ;; Parameters:    Size  Location     Type
  6708 ;;		None
  6709 ;; Auto vars:     Size  Location     Type
  6710 ;;		None
  6711 ;; Return value:  Size  Location     Type
  6712 ;;                  1    wreg      void 
  6713 ;; Registers used:
  6714 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6715 ;; Tracked objects:
  6716 ;;		On entry : 0/0
  6717 ;;		On exit  : 0/0
  6718 ;;		Unchanged: 0/0
  6719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6720 ;;      Params:         0       0       0       0       0
  6721 ;;      Locals:         0       0       0       0       0
  6722 ;;      Temps:          0       4       0       0       0
  6723 ;;      Totals:         0       4       0       0       0
  6724 ;;Total ram usage:        4 bytes
  6725 ;; Hardware stack levels used:    1
  6726 ;; Hardware stack levels required when called:    2
  6727 ;; This function calls:
  6728 ;;		i1_Timer_ClearInterruptFlag
  6729 ;;		i1_Timer_SetTimeMS
  6730 ;; This function is called by:
  6731 ;;		Interrupt level 1
  6732 ;; This function uses a non-reentrant model
  6733 ;;
  6734                           
  6735                           
  6736                           ;psect for function _OS_Update
  6737  0EFC                     _OS_Update:	
  6738                           
  6739                           ;OS.c: 85: Timer_ClearInterruptFlag(TIMER0);
  6740  0EFC  3000               	movlw	0
  6741  0EFD  120A  158A  25DD  120A  158A  	fcall	i1_Timer_ClearInterruptFlag
  6742                           
  6743                           ;OS.c: 86: Timer_SetTimeMS(TIMER0,10);
  6744  0F02  300A               	movlw	10
  6745  0F03  00F6               	movwf	i1Timer_SetTimeMS@time
  6746  0F04  3000               	movlw	0
  6747  0F05  00F7               	movwf	i1Timer_SetTimeMS@time+1
  6748  0F06  3000               	movlw	0
  6749  0F07  120A  118A  267A  120A  158A  	fcall	i1_Timer_SetTimeMS
  6750                           
  6751                           ;OS.c: 87: tick_flag=1;
  6752  0F0C  3001               	movlw	1
  6753  0F0D  1283               	bcf	3,5	;RP0=0, select bank0
  6754  0F0E  1303               	bcf	3,6	;RP1=0, select bank0
  6755  0F0F  00A0               	movwf	??_OS_Update
  6756  0F10  0820               	movf	??_OS_Update,w
  6757  0F11  00C6               	movwf	_tick_flag	;volatile
  6758  0F12  0823               	movf	??_OS_Update+3,w
  6759  0F13  008A               	movwf	10
  6760  0F14  0822               	movf	??_OS_Update+2,w
  6761  0F15  0084               	movwf	4
  6762  0F16  0E21               	swapf	(??_OS_Update+1)^0,w
  6763  0F17  0083               	movwf	3
  6764  0F18  0EFE               	swapf	126,f
  6765  0F19  0E7E               	swapf	126,w
  6766  0F1A  0009               	retfie
  6767  0F1B                     __end_of_OS_Update:	
  6768                           
  6769                           	psect	intentry
  6770  0004                     __pintentry:	
  6771                           ;incstack = 0
  6772                           ; Regs used in _OS_Update: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6773                           
  6774  0004                     interrupt_function:	
  6775  007E                     saved_w	set	btemp
  6776  0004  00FE               	movwf	btemp
  6777  0005  0E03               	swapf	3,w
  6778  0006  1283               	bcf	3,5	;RP0=0, select bank0
  6779  0007  1303               	bcf	3,6	;RP1=0, select bank0
  6780  0008  00A1               	movwf	??_OS_Update+1
  6781  0009  0804               	movf	4,w
  6782  000A  00A2               	movwf	??_OS_Update+2
  6783  000B  080A               	movf	10,w
  6784  000C  00A3               	movwf	??_OS_Update+3
  6785  000D  120A  158A  2EFC   	ljmp	_OS_Update
  6786                           
  6787                           	psect	text48
  6788  067A                     __ptext48:	
  6789 ;; *************** function i1_Timer_SetTimeMS *****************
  6790 ;; Defined at:
  6791 ;;		line 44 in file "Timer.c"
  6792 ;; Parameters:    Size  Location     Type
  6793 ;;  timer           1    wreg     enum E829
  6794 ;;  time            2    6[COMMON] unsigned int 
  6795 ;; Auto vars:     Size  Location     Type
  6796 ;;  timer           1   10[COMMON] enum E829
  6797 ;;  Timer_SetTim    2   11[COMMON] unsigned int 
  6798 ;; Return value:  Size  Location     Type
  6799 ;;                  1    wreg      void 
  6800 ;; Registers used:
  6801 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6802 ;; Tracked objects:
  6803 ;;		On entry : 0/0
  6804 ;;		On exit  : 0/0
  6805 ;;		Unchanged: 0/0
  6806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6807 ;;      Params:         2       0       0       0       0
  6808 ;;      Locals:         3       0       0       0       0
  6809 ;;      Temps:          2       0       0       0       0
  6810 ;;      Totals:         7       0       0       0       0
  6811 ;;Total ram usage:        7 bytes
  6812 ;; Hardware stack levels used:    1
  6813 ;; Hardware stack levels required when called:    1
  6814 ;; This function calls:
  6815 ;;		i1___wmul
  6816 ;; This function is called by:
  6817 ;;		_OS_Update
  6818 ;; This function uses a non-reentrant model
  6819 ;;
  6820                           
  6821                           
  6822                           ;psect for function i1_Timer_SetTimeMS
  6823  067A                     i1_Timer_SetTimeMS:	
  6824                           
  6825                           ;incstack = 0
  6826                           ; Regs used in i1_Timer_SetTimeMS: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6827                           ;i1Timer_SetTimeMS@timer stored from wreg
  6828  067A  00FA               	movwf	i1Timer_SetTimeMS@timer
  6829                           
  6830                           ;Timer.c: 46: u16 count_no;;Timer.c: 47: switch(timer)
  6831  067B  2EB3               	goto	i1l2316
  6832  067C                     i1l2304:	
  6833                           
  6834                           ;Timer.c: 50: count_no=(time*(2000))/(256);
  6835  067C  0877               	movf	i1Timer_SetTimeMS@time+1,w
  6836  067D  00F1               	movwf	i1___wmul@multiplier+1
  6837  067E  0876               	movf	i1Timer_SetTimeMS@time,w
  6838  067F  00F0               	movwf	i1___wmul@multiplier
  6839  0680  30D0               	movlw	208
  6840  0681  00F2               	movwf	i1___wmul@multiplicand
  6841  0682  3007               	movlw	7
  6842  0683  00F3               	movwf	i1___wmul@multiplicand+1
  6843  0684  120A  158A  273A   	fcall	i1___wmul
  6844  0687  0870               	movf	?i1___wmul,w
  6845  0688  00F8               	movwf	??i1_Timer_SetTimeMS
  6846  0689  0871               	movf	?i1___wmul+1,w
  6847  068A  00F9               	movwf	??i1_Timer_SetTimeMS+1
  6848  068B  0879               	movf	??i1_Timer_SetTimeMS+1,w
  6849  068C  00F8               	movwf	??i1_Timer_SetTimeMS
  6850  068D  01F9               	clrf	??i1_Timer_SetTimeMS+1
  6851  068E  0878               	movf	??i1_Timer_SetTimeMS,w
  6852  068F  00FB               	movwf	i1Timer_SetTimeMS@count_no
  6853  0690  0879               	movf	??i1_Timer_SetTimeMS+1,w
  6854  0691  00FC               	movwf	i1Timer_SetTimeMS@count_no+1
  6855                           
  6856                           ;Timer.c: 51: (TMR0=(0xff-count_no));
  6857  0692  097B               	comf	i1Timer_SetTimeMS@count_no,w
  6858  0693  1283               	bcf	3,5	;RP0=0, select bank0
  6859  0694  1303               	bcf	3,6	;RP1=0, select bank0
  6860  0695  0081               	movwf	1	;volatile
  6861                           
  6862                           ;Timer.c: 52: break;
  6863  0696  0008               	return
  6864  0697                     i1l2308:	
  6865                           
  6866                           ;Timer.c: 54: count_no=(time*(250));
  6867  0697  0877               	movf	i1Timer_SetTimeMS@time+1,w
  6868  0698  00F1               	movwf	i1___wmul@multiplier+1
  6869  0699  0876               	movf	i1Timer_SetTimeMS@time,w
  6870  069A  00F0               	movwf	i1___wmul@multiplier
  6871  069B  30FA               	movlw	250
  6872  069C  00F2               	movwf	i1___wmul@multiplicand
  6873  069D  3000               	movlw	0
  6874  069E  00F3               	movwf	i1___wmul@multiplicand+1
  6875  069F  120A  158A  273A   	fcall	i1___wmul
  6876  06A2  0871               	movf	?i1___wmul+1,w
  6877  06A3  00FC               	movwf	i1Timer_SetTimeMS@count_no+1
  6878  06A4  0870               	movf	?i1___wmul,w
  6879  06A5  00FB               	movwf	i1Timer_SetTimeMS@count_no
  6880                           
  6881                           ;Timer.c: 55: (TMR1H=((0xffff-count_no)&0xff00)>>8); (TMR1L=((0xffff-count_no)&0x00ff));
  6882  06A6  087C               	movf	i1Timer_SetTimeMS@count_no+1,w
  6883  06A7  00F9               	movwf	??i1_Timer_SetTimeMS+1
  6884  06A8  087B               	movf	i1Timer_SetTimeMS@count_no,w
  6885  06A9  00F8               	movwf	??i1_Timer_SetTimeMS
  6886  06AA  09F8               	comf	??i1_Timer_SetTimeMS,f
  6887  06AB  09F9               	comf	??i1_Timer_SetTimeMS+1,f
  6888  06AC  0879               	movf	??i1_Timer_SetTimeMS+1,w
  6889  06AD  1283               	bcf	3,5	;RP0=0, select bank0
  6890  06AE  1303               	bcf	3,6	;RP1=0, select bank0
  6891  06AF  008F               	movwf	15	;volatile
  6892  06B0  097B               	comf	i1Timer_SetTimeMS@count_no,w
  6893  06B1  008E               	movwf	14	;volatile
  6894                           
  6895                           ;Timer.c: 56: break;
  6896  06B2  0008               	return
  6897  06B3                     i1l2316:	
  6898  06B3  087A               	movf	i1Timer_SetTimeMS@timer,w
  6899                           
  6900                           ; Switch size 1, requested type "simple"
  6901                           ; Number of cases is 2, Range of values is 0 to 1
  6902                           ; switch strategies available:
  6903                           ; Name         Instructions Cycles
  6904                           ; simple_byte            7     4 (average)
  6905                           ; direct_byte           14     8 (fixed)
  6906                           ; jumptable            260     6 (fixed)
  6907                           ;	Chosen strategy is simple_byte
  6908  06B4  3A00               	xorlw	0	; case 0
  6909  06B5  1903               	skipnz
  6910  06B6  2E7C               	goto	i1l2304
  6911  06B7  3A01               	xorlw	1	; case 1
  6912  06B8  1903               	skipnz
  6913  06B9  2E97               	goto	i1l2308
  6914  06BA  2EBB               	goto	i1l315
  6915  06BB                     i1l315:	
  6916  06BB  0008               	return
  6917  06BC                     __end_ofi1_Timer_SetTimeMS:	
  6918                           
  6919                           	psect	text49
  6920  0F3A                     __ptext49:	
  6921 ;; *************** function i1___wmul *****************
  6922 ;; Defined at:
  6923 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\Umul16.c"
  6924 ;; Parameters:    Size  Location     Type
  6925 ;;  multiplier      2    0[COMMON] unsigned int 
  6926 ;;  multiplicand    2    2[COMMON] unsigned int 
  6927 ;; Auto vars:     Size  Location     Type
  6928 ;;  __wmul          2    4[COMMON] unsigned int 
  6929 ;; Return value:  Size  Location     Type
  6930 ;;                  2    0[COMMON] unsigned int 
  6931 ;; Registers used:
  6932 ;;		wreg, status,2, status,0
  6933 ;; Tracked objects:
  6934 ;;		On entry : 0/0
  6935 ;;		On exit  : 0/0
  6936 ;;		Unchanged: 0/0
  6937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6938 ;;      Params:         4       0       0       0       0
  6939 ;;      Locals:         2       0       0       0       0
  6940 ;;      Temps:          0       0       0       0       0
  6941 ;;      Totals:         6       0       0       0       0
  6942 ;;Total ram usage:        6 bytes
  6943 ;; Hardware stack levels used:    1
  6944 ;; This function calls:
  6945 ;;		Nothing
  6946 ;; This function is called by:
  6947 ;;		i1_Timer_SetTimeMS
  6948 ;; This function uses a non-reentrant model
  6949 ;;
  6950                           
  6951                           
  6952                           ;psect for function i1___wmul
  6953  0F3A                     i1___wmul:	
  6954                           
  6955                           ;incstack = 0
  6956                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
  6957  0F3A  01F4               	clrf	i1___wmul@product
  6958  0F3B  01F5               	clrf	i1___wmul@product+1
  6959  0F3C                     i1l2190:	
  6960  0F3C  1C70               	btfss	i1___wmul@multiplier,0
  6961  0F3D  2F44               	goto	i1l598
  6962  0F3E  0872               	movf	i1___wmul@multiplicand,w
  6963  0F3F  07F4               	addwf	i1___wmul@product,f
  6964  0F40  1803               	skipnc
  6965  0F41  0AF5               	incf	i1___wmul@product+1,f
  6966  0F42  0873               	movf	i1___wmul@multiplicand+1,w
  6967  0F43  07F5               	addwf	i1___wmul@product+1,f
  6968  0F44                     i1l598:	
  6969  0F44  3001               	movlw	1
  6970  0F45                     u188_25:	
  6971  0F45  1003               	clrc
  6972  0F46  0DF2               	rlf	i1___wmul@multiplicand,f
  6973  0F47  0DF3               	rlf	i1___wmul@multiplicand+1,f
  6974  0F48  3EFF               	addlw	-1
  6975  0F49  1D03               	skipz
  6976  0F4A  2F45               	goto	u188_25
  6977  0F4B  3001               	movlw	1
  6978  0F4C                     u189_25:	
  6979  0F4C  1003               	clrc
  6980  0F4D  0CF1               	rrf	i1___wmul@multiplier+1,f
  6981  0F4E  0CF0               	rrf	i1___wmul@multiplier,f
  6982  0F4F  3EFF               	addlw	-1
  6983  0F50  1D03               	skipz
  6984  0F51  2F4C               	goto	u189_25
  6985  0F52  0870               	movf	i1___wmul@multiplier,w
  6986  0F53  0471               	iorwf	i1___wmul@multiplier+1,w
  6987  0F54  1D03               	btfss	3,2
  6988  0F55  2F3C               	goto	i1l2190
  6989  0F56  0875               	movf	i1___wmul@product+1,w
  6990  0F57  00F1               	movwf	?i1___wmul+1
  6991  0F58  0874               	movf	i1___wmul@product,w
  6992  0F59  00F0               	movwf	?i1___wmul
  6993  0F5A  0008               	return
  6994  0F5B                     __end_ofi1___wmul:	
  6995                           
  6996                           	psect	text50
  6997  0DDD                     __ptext50:	
  6998 ;; *************** function i1_Timer_ClearInterruptFlag *****************
  6999 ;; Defined at:
  7000 ;;		line 75 in file "Timer.c"
  7001 ;; Parameters:    Size  Location     Type
  7002 ;;  timer           1    wreg     enum E829
  7003 ;; Auto vars:     Size  Location     Type
  7004 ;;  timer           1    0[COMMON] enum E829
  7005 ;; Return value:  Size  Location     Type
  7006 ;;                  1    wreg      void 
  7007 ;; Registers used:
  7008 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7009 ;; Tracked objects:
  7010 ;;		On entry : 0/0
  7011 ;;		On exit  : 0/0
  7012 ;;		Unchanged: 0/0
  7013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7014 ;;      Params:         0       0       0       0       0
  7015 ;;      Locals:         1       0       0       0       0
  7016 ;;      Temps:          0       0       0       0       0
  7017 ;;      Totals:         1       0       0       0       0
  7018 ;;Total ram usage:        1 bytes
  7019 ;; Hardware stack levels used:    1
  7020 ;; This function calls:
  7021 ;;		Nothing
  7022 ;; This function is called by:
  7023 ;;		_OS_Update
  7024 ;; This function uses a non-reentrant model
  7025 ;;
  7026                           
  7027                           
  7028                           ;psect for function i1_Timer_ClearInterruptFlag
  7029  0DDD                     i1_Timer_ClearInterruptFlag:	
  7030                           
  7031                           ;incstack = 0
  7032                           ; Regs used in i1_Timer_ClearInterruptFlag: [wreg-fsr0h+status,2+status,0]
  7033                           ;i1Timer_ClearInterruptFlag@timer stored from wreg
  7034  0DDD  00F0               	movwf	i1Timer_ClearInterruptFlag@timer
  7035                           
  7036                           ;Timer.c: 77: switch(timer)
  7037  0DDE  2DE5               	goto	i1l2322
  7038  0DDF                     i1l326:	
  7039                           ;Timer.c: 78: {;Timer.c: 79: case TIMER0:
  7040                           
  7041                           
  7042                           ;Timer.c: 80: (TMR0IF=0);
  7043  0DDF  110B               	bcf	11,2	;volatile
  7044                           
  7045                           ;Timer.c: 81: break;
  7046  0DE0  0008               	return
  7047  0DE1                     i1l328:	
  7048                           ;Timer.c: 82: case TIMER1:
  7049                           
  7050                           
  7051                           ;Timer.c: 83: (TMR1IF=0);
  7052  0DE1  1283               	bcf	3,5	;RP0=0, select bank0
  7053  0DE2  1303               	bcf	3,6	;RP1=0, select bank0
  7054  0DE3  100C               	bcf	12,0	;volatile
  7055                           
  7056                           ;Timer.c: 84: break;
  7057  0DE4  0008               	return
  7058  0DE5                     i1l2322:	
  7059  0DE5  0870               	movf	i1Timer_ClearInterruptFlag@timer,w
  7060                           
  7061                           ; Switch size 1, requested type "simple"
  7062                           ; Number of cases is 2, Range of values is 0 to 1
  7063                           ; switch strategies available:
  7064                           ; Name         Instructions Cycles
  7065                           ; simple_byte            7     4 (average)
  7066                           ; direct_byte           14     8 (fixed)
  7067                           ; jumptable            260     6 (fixed)
  7068                           ;	Chosen strategy is simple_byte
  7069  0DE6  3A00               	xorlw	0	; case 0
  7070  0DE7  1903               	skipnz
  7071  0DE8  2DDF               	goto	i1l326
  7072  0DE9  3A01               	xorlw	1	; case 1
  7073  0DEA  1903               	skipnz
  7074  0DEB  2DE1               	goto	i1l328
  7075  0DEC  2DED               	goto	i1l329
  7076  0DED                     i1l329:	
  7077  0DED  0008               	return
  7078  0DEE                     __end_ofi1_Timer_ClearInterruptFlag:	
  7079  007E                     btemp	set	126	;btemp
  7080  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    4
    Data        5
    BSS         20
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     20      44
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _OS_Update in COMMON

    _OS_Update->i1_Timer_SetTimeMS
    i1_Timer_SetTimeMS->i1___wmul

Critical Paths under _main in BANK0

    _main->_OS_Schedule
    _TIME_Init->_Timer_Init
    _SSD_Init->_GPIO_InitPin
    _SSD_Init->_GPIO_SetPinState
    _OS_Schedule->_Motor_OutputUpdate
    _VC_Update->___lwmod
    ___lwmod->_Button_GetPressingTime
    _SSD_Update->_SSD_SetCtrlLine
    _SSD_SetCtrlLine->_GPIO_SetPinState
    _Motor_OutputUpdate->_TIME_TriggerDelayUS
    _TIME_TriggerDelayUS->_TIME_TriggerTimeSandwichUS
    _TIME_WaitTimeSandwich->_Timer_CheckInterruptFlag
    _TIME_WaitTimeSandwich->_Timer_SetState
    _TIME_TriggerTimeSandwichUS->_Timer_SetTimeUS
    _GPIO_TogglePinState->_GPIO_GetPinState
    _Display_Update->_LED_SetState
    _LED_SetState->_GPIO_SetPinState
    _Button_Update->_Button_Dust_Update
    _Button_Update->_Button_Minus_Update
    _Button_Plus_Update->_GPIO_GetPinState
    _Button_Minus_Update->_GPIO_GetPinState
    _Button_Dust_Update->_GPIO_GetPinState
    _OS_Init->_Timer_SetTimeMS
    _Timer_SetTimeMS->___wmul
    _Timer_Init->_Timer_SetMode
    _Motor_Init->_GPIO_InitPin
    _Motor_Init->_GPIO_SetPinState
    _LED_Init->_GPIO_InitPin
    _LED_Init->_GPIO_SetPinState
    _Button_Init->_GPIO_InitPin

Critical Paths under _OS_Update in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _OS_Update in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _OS_Update in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _OS_Update in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   36108
                        _Button_Init
                       _Display_Init
                           _LED_Init
                         _Motor_Init
                            _OS_Init
                        _OS_Schedule
                           _SSD_Init
                          _TIME_Init
                            _VC_Init
 ---------------------------------------------------------------------------------
 (1) _VC_Init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TIME_Init                                            0     0      0     186
                         _Timer_Init
 ---------------------------------------------------------------------------------
 (1) _SSD_Init                                             3     2      1    5650
                                              9 BANK0      3     2      1
                       _GPIO_InitPin
                      _GPIO_InitPort
                   _GPIO_SetPinState
                      _SSD_SetSymbol
 ---------------------------------------------------------------------------------
 (2) _GPIO_InitPort                                        4     2      2     504
                                              4 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _OS_Schedule                                          1     1      0   16838
                                             19 BANK0      1     1      0
                      _Button_Update
                     _Display_Update
                _GPIO_TogglePinState
      _Motor_HarmonicReductionUpdate
                 _Motor_OutputUpdate
          _Motor_SoftSwitchingUpdate
                         _SSD_Update
         _TIME_TriggerTimeSandwichUS
              _TIME_WaitTimeSandwich
                          _VC_Update
 ---------------------------------------------------------------------------------
 (2) _VC_Update                                            1     1      0     552
                                             16 BANK0      1     1      0
             _Button_GetPressingTime
                    _Button_GetState
               _Motor_SetTargetAngle
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     463
                                             10 BANK0      6     2      4
             _Button_GetPressingTime (ARG)
 ---------------------------------------------------------------------------------
 (3) _Button_GetState                                      1     1      0      22
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Button_GetPressingTime                               6     3      3      45
                                              4 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (2) _SSD_Update                                           3     3      0    3095
                                             13 BANK0      3     3      0
                  _GPIO_SetPortState
                    _SSD_SetCtrlLine
 ---------------------------------------------------------------------------------
 (3) _SSD_SetCtrlLine                                      4     3      1    2568
                                              9 BANK0      4     3      1
                   _GPIO_SetPinState
 ---------------------------------------------------------------------------------
 (3) _GPIO_SetPortState                                    4     2      2     504
                                              4 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _Motor_SoftSwitchingUpdate                            1     1      0       0
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Motor_OutputUpdate                                   4     4      0    4038
                                             15 BANK0      4     4      0
                   _GPIO_SetPinState
                _TIME_TriggerDelayUS
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _TIME_TriggerDelayUS                                  2     0      2    1269
                                             13 BANK0      2     0      2
         _TIME_TriggerTimeSandwichUS
              _TIME_WaitTimeSandwich
 ---------------------------------------------------------------------------------
 (2) _TIME_WaitTimeSandwich                                0     0      0     341
           _Timer_CheckInterruptFlag
           _Timer_ClearInterruptFlag
                     _Timer_SetState
 ---------------------------------------------------------------------------------
 (3) _Timer_CheckInterruptFlag                             2     2      0      47
                                              4 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _TIME_TriggerTimeSandwichUS                           2     0      2     678
                                             11 BANK0      2     0      2
           _Timer_ClearInterruptFlag
                     _Timer_SetState
                    _Timer_SetTimeUS
 ---------------------------------------------------------------------------------
 (3) _Timer_SetTimeUS                                      7     5      2     210
                                              4 BANK0      7     5      2
 ---------------------------------------------------------------------------------
 (3) _Timer_ClearInterruptFlag                             1     1      0      22
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Motor_HarmonicReductionUpdate                        2     2      0       0
                                              4 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _GPIO_TogglePinState                                  5     4      1    2936
                                             10 BANK0      5     4      1
                   _GPIO_GetPinState
                   _GPIO_SetPinState
 ---------------------------------------------------------------------------------
 (2) _Display_Update                                       3     3      0    3146
                                             12 BANK0      3     3      0
                       _LED_SetState
                      _SSD_SetSymbol
                    _VC_GetDustState
                   _VC_GetSpeedLevel
 ---------------------------------------------------------------------------------
 (3) _VC_GetSpeedLevel                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _VC_GetDustState                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SSD_SetSymbol                                        3     2      1     804
                                              4 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _LED_SetState                                         3     2      1    2296
                                              9 BANK0      3     2      1
                   _GPIO_SetPinState
 ---------------------------------------------------------------------------------
 (2) _Button_Update                                        0     0      0    2052
                 _Button_Dust_Update
                _Button_Minus_Update
                 _Button_Plus_Update
 ---------------------------------------------------------------------------------
 (3) _Button_Plus_Update                                   2     2      0     684
                                             10 BANK0      2     2      0
                   _GPIO_GetPinState
 ---------------------------------------------------------------------------------
 (3) _Button_Minus_Update                                  3     3      0     684
                                             10 BANK0      3     3      0
                   _GPIO_GetPinState
 ---------------------------------------------------------------------------------
 (3) _Button_Dust_Update                                   3     3      0     684
                                             10 BANK0      3     3      0
                   _GPIO_GetPinState
 ---------------------------------------------------------------------------------
 (3) _GPIO_GetPinState                                     6     5      1     573
                                              4 BANK0      6     5      1
 ---------------------------------------------------------------------------------
 (1) _OS_Init                                              0     0      0    3280
                       _GPIO_InitPin
                         _Timer_Init
               _Timer_SetInterruptEn
                     _Timer_SetState
                    _Timer_SetTimeMS
 ---------------------------------------------------------------------------------
 (2) _Timer_SetTimeMS                                      7     5      2     808
                                             10 BANK0      7     5      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     548
                                              4 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _Timer_SetState                                       2     1      1     272
                                              4 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (2) _Timer_SetInterruptEn                                 2     1      1     142
                                              4 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (2) _Timer_Init                                           1     1      0     186
                                              6 BANK0      1     1      0
                      _Timer_SetMode
 ---------------------------------------------------------------------------------
 (3) _Timer_SetMode                                        2     1      1     142
                                              4 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (1) _Motor_Init                                           1     1      0    4092
                                              9 BANK0      1     1      0
                       _GPIO_InitPin
                   _GPIO_SetPinState
               _Motor_SetTargetAngle
 ---------------------------------------------------------------------------------
 (3) _Motor_SetTargetAngle                                 2     2      0      22
                                              4 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Init                                             3     2      1    4168
                                              9 BANK0      3     2      1
                       _GPIO_InitPin
                   _GPIO_SetPinState
 ---------------------------------------------------------------------------------
 (2) _GPIO_SetPinState                                     5     3      2    2176
                                              4 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _Display_Init                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Button_Init                                          2     2      0    1894
                                              9 BANK0      2     2      0
                       _GPIO_InitPin
 ---------------------------------------------------------------------------------
 (2) _GPIO_InitPin                                         5     3      2    1872
                                              4 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _OS_Update                                            4     4      0     378
                                              0 BANK0      4     4      0
         i1_Timer_ClearInterruptFlag
                  i1_Timer_SetTimeMS
 ---------------------------------------------------------------------------------
 (7) i1_Timer_SetTimeMS                                    7     5      2     356
                                              6 COMMON     7     5      2
                           i1___wmul
 ---------------------------------------------------------------------------------
 (8) i1___wmul                                             6     2      4     196
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (7) i1_Timer_ClearInterruptFlag                           1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Button_Init
     _GPIO_InitPin
   _Display_Init
   _LED_Init
     _GPIO_InitPin
     _GPIO_SetPinState
   _Motor_Init
     _GPIO_InitPin
     _GPIO_SetPinState
     _Motor_SetTargetAngle
   _OS_Init
     _GPIO_InitPin
     _Timer_Init
       _Timer_SetMode
     _Timer_SetInterruptEn
     _Timer_SetState
     _Timer_SetTimeMS
       ___wmul
   _OS_Schedule
     _Button_Update
       _Button_Dust_Update
         _GPIO_GetPinState
       _Button_Minus_Update
         _GPIO_GetPinState
       _Button_Plus_Update
         _GPIO_GetPinState
     _Display_Update
       _LED_SetState
         _GPIO_SetPinState
       _SSD_SetSymbol
       _VC_GetDustState
       _VC_GetSpeedLevel
     _GPIO_TogglePinState
       _GPIO_GetPinState
       _GPIO_SetPinState
     _Motor_HarmonicReductionUpdate
     _Motor_OutputUpdate
       _GPIO_SetPinState
       _TIME_TriggerDelayUS
         _TIME_TriggerTimeSandwichUS
           _Timer_ClearInterruptFlag
           _Timer_SetState
           _Timer_SetTimeUS
         _TIME_WaitTimeSandwich
           _Timer_CheckInterruptFlag
           _Timer_ClearInterruptFlag
           _Timer_SetState
       ___wmul
     _Motor_SoftSwitchingUpdate
     _SSD_Update
       _GPIO_SetPortState
       _SSD_SetCtrlLine
         _GPIO_SetPinState
     _TIME_TriggerTimeSandwichUS
       _Timer_ClearInterruptFlag
       _Timer_SetState
       _Timer_SetTimeUS
     _TIME_WaitTimeSandwich
       _Timer_CheckInterruptFlag
       _Timer_ClearInterruptFlag
       _Timer_SetState
     _VC_Update
       _Button_GetPressingTime
       _Button_GetState
       _Motor_SetTargetAngle
       ___lwmod
         _Button_GetPressingTime (ARG)
   _SSD_Init
     _GPIO_InitPin
     _GPIO_InitPort
     _GPIO_SetPinState
     _SSD_SetSymbol
   _TIME_Init
     _Timer_Init
       _Timer_SetMode
   _VC_Init

 _OS_Update (ROOT)
   i1_Timer_ClearInterruptFlag
   i1_Timer_SetTimeMS
     i1___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     14      2C       5       55.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      D       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      3A      12        0.0%
ABS                  0      0      3A       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Sat May 25 18:43:31 2019

                          ?_Timer_SetTimeMS 002A                            ?_Timer_SetTimeUS 0024  
                     SSD_Init@intial_symbol 0029                       ?_Timer_SetInterruptEn 0024  
                                         pc 0002                                  _SSD_Update 055B  
               TIME_TriggerDelayUS@delay_us 002D                                 __CFG_CP$OFF 0000  
                                        l18 0FCD                                          fsr 0004  
                       ___wmul@multiplicand 0026                            i1___wmul@product 0074  
                               __CFG_LVP$ON 0000              ?_Motor_HarmonicReductionUpdate 0070  
                                       l101 045C                                         l112 00E8  
                                       l300 0ECB                                         l301 0EDD  
                                       l134 073A                                         l145 020A  
                                       l305 0EA8                                         l322 0772  
                                       l307 0EAF                                         l315 0636  
                                       l164 0E25                                         l158 0EFB  
                                       l342 0E2A                                         l326 0DF2  
                                       l343 0E3C                                         l328 0DF4  
                                       l329 0DFE                                         l441 07A9  
                                       l291 0F5F                                         l363 028B  
                                       l293 0F69                                         l294 0F7B  
                                       l298 0EC5                                         l598 0F88  
                                       _GIE 005F                                         _PS0 0408  
                                       _PS1 0409                                         _PS2 040A  
                              __CFG_CPD$OFF 0000                                         _PSA 040B  
                                       u990 0E30                         _Button_Minus_Update 0637  
                                       fsr0 0004                                         indf 0000  
                              __CFG_FOSC$HS 0000                               _SSD_SetSymbol 0DB4  
                                      l2000 07D9                                        l2010 007D  
                                      l2012 009B                                        l2100 022A  
                                      l2014 00B9                                        l2006 0041  
                                      l2102 0243                                        l2030 042F  
                                      l2008 005F                                        l2104 025F  
                                      l2032 043D                                        l2024 0405  
                                      l2018 00D7                                        l2130 07EF  
                                      l2026 0413                                        l2204 0FA3  
                                      l2212 0FC2                                        l2220 0EF6  
                                      l2108 027E                                        l2060 00EA  
                                      l2028 0421                                        l2036 044B  
                                      l2206 0FAC                                        l2134 07F6  
                                      l2208 0FB7                                        l2216 0EE2  
                                      l2160 05F7                                        l2152 05E6  
                                      l2144 05B7                                        l2136 07FA  
                                      l2056 05AA                                        l2072 012C  
                                      l2224 02A8                                        l2232 02F3  
                                      l2066 0100                                        l2090 016B  
                                      l2226 02C1                                        l2234 0300  
                                      l2180 0EBA                                        l2164 0612  
                                      l2172 062E                                        l2156 05EE  
                                      l2228 02DA                                        l2094 0179  
                                      l2078 0131                                        l2088 015E  
                                      l2280 03D4                                        l2178 0EB2  
                                      l2186 0ED5                                        l2290 03EA  
                                      l2274 03C8                                        l2338 04AD  
                                      l1804 0E3D                                        l1820 0E0D  
                                      l1734 0E34                                        l1902 04F0  
                                      l1910 0503                                        l1742 0751  
                                      l1814 0E03                                        l1832 06D5  
                                      l1728 0DF6                                        l1760 0E6B  
                                      l1752 0E59                                        l1920 0719  
                                      l2296 03F6                                        l1770 0337  
                                      l1842 06E5                                        l1850 06F8  
                                      l1826 06CC                                        l1930 0E16  
                                      l1738 073F                                        l1754 0E5E  
                                      l1922 0721                                        l1914 0701  
                                      l1818 0E08                                        l1940 0F73  
                                      l1772 034B                                        l1780 0388  
                                      l1908 04F5                                        l1860 0652  
                                      l1836 06DA                                        l1748 076A  
                                      l1916 0709                                        l1790 01B1  
                                      l1774 035F                                        l1766 030F  
                                      l1870 0662                                        l1854 0649  
                                      l1934 0E20                                        l1758 0E63  
                                      l1918 0711                                        l1926 0729  
                                      l1792 01C9                                        l1768 0323  
                                      l1864 0657                                        l1848 06EA  
                                      l1960 0784                                        l1794 01E1  
                                      l1786 0181                                        l1970 0F80  
                                      l1778 0377                                        l1882 04C5  
                                      l1962 0791                                        l1788 0199  
                                      l1892 04D6                                        l1876 0667  
                                      l1798 01F9                                        l1878 0675  
                                      l1958 0777                                        l1966 079E  
                                      l1990 07B2                                        l1888 04CE  
                                      l1992 07C0                                        l1898 04E4  
                                      l1996 07CE                                        _T0CS 040D  
                                      u1015 0744                                        u1104 0365  
                                      u1024 0315                                        u1105 0363  
                                      u1025 0313                                        u1114 036F  
                                      u1034 031F                                        u1115 036D  
                                      u1035 031D                                        u1204 01E7  
                                      u1124 0187                                        u1044 0329  
                                      u1205 01E5                                        u1125 0185  
                                      u1045 0327                                        u1214 01F0  
                                      u1134 0190                                        u1054 0333  
                                      u1215 01EE                                        u1135 018E  
                                      u1055 0331                                        u1144 019F  
                                      u1064 033D                                        u1145 019D  
                                      u1065 033B                                        u1154 01A8  
                                      u1074 0347                                        u1155 01A6  
                                      u1075 0345                                        u1164 01B7  
                                      u1420 0F65                                        u1084 0351  
                                      u1165 01B5                                        u1085 034F  
                                      u1174 01C0                                        u1094 035B  
                                      u1175 01BE                                        u1095 0359  
                                      u1184 01CF                                        u1440 0F6F  
                                      u1185 01CD                                        u1194 01D8  
                                      u1195 01D6                                        u1515 07B5  
                                      u1604 0083                                        u1605 0081  
                                      u1614 008C                                        u1615 008A  
                                      u1535 07C6                                        u1624 00A1  
                                      u1625 009F                                        u1545 07CF  
                                      u1634 00AA                                        u1635 00A8  
                                      u1475 0F89                                        u1644 00BF  
                                      u1564 0047                                        u1645 00BD  
                                      u1565 0045                                        u1485 0F90  
                                      u1805 05DB                                        u1654 00C8  
                                      u1574 0050                                        u1830 0EC9  
                                      u1655 00C6                                        u1575 004E  
                                      u1584 0065                                        u1585 0063  
                                      u1594 006E                                        u1850 0ED1  
                                      u1595 006C                                        u1795 05C7  
                                      _PEIE 005E                      __size_of_Button_Update 000E  
                                      _TMR0 0001                                 _OS_Schedule 038A  
                              __CFG_WRT$OFF 0000                                        _main 045D  
                                      btemp 007E                             __end_of_VC_Init 0800  
                             __CFG_BOREN$ON 0000          Button_Plus_Update@ButtonCurrSample 002B  
                 OS_Schedule@Button_Counter 0045                             __end_of_OS_Init 1000  
                      ?_Button_Minus_Update 0070                                        start 0010  
                             ?_GPIO_InitPin 0024                               _GPIO_InitPort 0401  
                             ?_LED_SetState 0029                            __end_of_LED_Init 0EFC  
                             ??_Button_Init 0029            __end_of_Timer_ClearInterruptFlag 0DFF  
                                     ?_main 0070                ??i1_Timer_ClearInterruptFlag 0070  
                             __CFG_WDTE$OFF 0000                                       i1l315 06BB  
                                     i1l326 0DDF                                       i1l328 0DE1  
                                     i1l329 0DED                             __end_of___lwmod 07DE  
                                     i1l598 0F44                                       _TMR1H 000F  
                                     _TMR1L 000E                                       _PORTA 0005  
                                     _PORTB 0006                                       _PORTC 0007  
                                     _PORTD 0008                       _TIME_WaitTimeSandwich 0E3D  
                                     _PORTE 0009                                       _TRISA 0085  
                                     _TRISB 0086                                       _TRISC 0087  
                                     _TRISD 0088                                       _TRISE 0089  
                             __CFG_PWRTE$ON 0000                                 LED_Init@led 002B  
                        __size_of_TIME_Init 0005                    SSD_Update@Current_Symbol 002F  
         __size_of_Timer_CheckInterruptFlag 0019                              ?_SSD_SetSymbol 0024  
                 __size_of_VC_GetSpeedLevel 0004                   ?_Timer_CheckInterruptFlag 0070  
                 Timer_SetInterruptEn@timer 0025                   Timer_SetInterruptEn@state 0024  
                          __end_of_SSD_Init 030B                                       pclath 000A  
                          __end_ofi1___wmul 0F5B          TIME_TriggerTimeSandwichUS@delay_us 002B  
                                     status 0003                         i1___wmul@multiplier 0070  
                                     wtemp0 007E                ??_TIME_TriggerTimeSandwichUS 002D  
                        _Motor_OutputUpdate 0508                       ??_Button_Minus_Update 002A  
                           _VC_GetDustState 0D89                             _SSD_SetCtrlLine 0773  
                            ??_GPIO_InitPin 0026                          __size_of_VC_Update 0094  
                            ?_GPIO_InitPort 0024                      ??_Timer_SetInterruptEn 0025  
                           __initialization 0013                          __size_of_OS_Update 001F  
               ??_Motor_SoftSwitchingUpdate 0024                                __end_of_main 04B3  
                       ?_Motor_OutputUpdate 0070                            _ButtonPrevSample 0037  
                  ??_Button_GetPressingTime 0027                              ??_LED_SetState 002A  
                               ?_SSD_Update 0070                           ?_GPIO_SetPinState 0024  
                             _Button_Update 0DC0               Timer_CheckInterruptFlag@timer 0024  
                  __size_of_Button_GetState 0009                __end_of_Motor_SetTargetAngle 0DA3  
                        ??_GPIO_SetPinState 0026                                      ??_main 0034  
       OS_Schedule@Motor_SoftSwitch_Counter 0042                         __end_of_Button_Init 0FCE  
                __end_of_Button_Dust_Update 0508                        __end_of_Display_Init 0004  
       __size_of_TIME_TriggerTimeSandwichUS 001B                        ??_Motor_OutputUpdate 002F  
                                 ??_VC_Init 0024                                   ??_OS_Init 0031  
                       _TIME_TriggerDelayUS 0DCE                     __size_of_Timer_SetState 0017  
                                    i1l2304 067C                                      i1l2322 0DE5  
                                    i1l2308 0697                                      i1l2316 06B3  
                                    i1l2190 0F3C                                      u188_25 0F45  
                                    u189_25 0F4C                                      _TMR0IE 005D  
                                    _TMR0IF 005A                                      _TMR1IE 0460  
                                    _TMR1IF 0060                                      _TMR1CS 0081  
              Button_GetPressingTime@button 0029                                      _TMR1ON 0080  
                    _Segments_Symbols_Array 0034                                _Actual_Angle 004A  
                         __end_of_TIME_Init 0D96                                  _Motor_Init 0E88  
                   GPIO_TogglePinState@port 002E                                      ___wmul 0F7C  
                            ?_Button_Update 0070                        ?_TIME_TriggerDelayUS 002D  
                                 ??___lwmod 002E                                  _Timer_Init 0EA4  
                     __end_of_Timer_SetMode 0F7C                              _Dust_Bag_State 003D  
                    ?_TIME_WaitTimeSandwich 0070                             ??_SSD_SetSymbol 0025  
                                    saved_w 007E                           __end_of_VC_Update 017D  
                  _Timer_ClearInterruptFlag 0DEE                   _Motor_SoftSwitchingUpdate 07DE  
                       GPIO_GetPinState@pin 0024                   __size_of_GPIO_GetPinState 007F  
                         __end_of_OS_Update 0F1B                           LED_SetState@state 0029  
                   __end_of_VC_GetDustState 0D8D                     __end_of_SSD_SetCtrlLine 07AA  
                       __size_of_SSD_Update 0051                 __end_of_GPIO_TogglePinState 0F3A  
                   __end_of__initialization 0039                            GPIO_InitPin@port 0028  
                                 ?_LED_Init 0029                             ??_GPIO_InitPort 0026  
                          GPIO_InitPort@dir 0025                              __pcstackCOMMON 0070  
                              __pidataBANK0 0D96                         Timer_SetTimeMS@time 002A  
                     ??_TIME_TriggerDelayUS 002F             __size_of_Button_GetPressingTime 0013  
                      LED_Init@inital_state 0029                         Timer_SetTimeUS@time 0024  
        __end_ofi1_Timer_ClearInterruptFlag 0DEE                  i1_Timer_ClearInterruptFlag 0DDD  
                                 ?_SSD_Init 0029              Motor_OutputUpdate@Bias_Time_US 0031  
                               _Button_Init 0F9F                                 _ButtonState 003A  
                                 ?i1___wmul 0070                           Timer_SetMode@mode 0024  
                         ??_Button_GetState 0024                        __end_of_GPIO_InitPin 00E9  
                __end_of_Button_Plus_Update 06FD                   SSD_Update@Curr_Active_SSD 003E  
                         _GPIO_SetPortState 06FD                            _VC_GetSpeedLevel 0D8D  
                      __end_of_LED_SetState 0E26                          ?_GPIO_SetPortState 0024  
                                __pbssBANK0 0034                                ?_OS_Schedule 0070  
        __end_of_TIME_TriggerTimeSandwichUS 0E88                  _TIME_TriggerTimeSandwichUS 0E6D  
                      _Motor_SetTargetAngle 0D9B                                  ??_LED_Init 002A  
                       ??_GPIO_SetPortState 0026                           _Symbol_Code_Array 0806  
                                __pmaintext 045D                             ??_Button_Update 002D  
                               ?_Motor_Init 0070                                     ?___wmul 0024  
                         i1_Timer_SetTimeMS 067A                                  __pintentry 0004  
                   Timer_SetTimeMS@count_no 002F                                 ?_Timer_Init 0070  
          __end_of_Timer_CheckInterruptFlag 0E6D                          ?i1_Timer_SetTimeMS 0076  
                                ??_SSD_Init 002A                                  ??i1___wmul 0074  
                                   _T1CKPS0 0084                                     _T1CKPS1 0085  
                     __size_of_Display_Init 0001                    __size_of_Timer_SetTimeMS 0044  
                  __size_of_Timer_SetTimeUS 0038                         Timer_SetState@timer 0025  
                       Timer_SetState@state 0024                   __end_of_GPIO_SetPortState 073B  
                       ??i1_Timer_SetTimeMS 0078                   i1Timer_SetTimeMS@count_no 007B  
                    _Button_GetPressingTime 0DFF                            ?_VC_GetDustState 0070  
             Button_GetPressingTime@ret_val 0027                              _Timer_SetState 0E26  
                                   _VC_Init 07FF                                  __stringtab 0800  
                                   _OS_Init 0FCE                            ?_SSD_SetCtrlLine 0029  
        Timer_CheckInterruptFlag@flag_state 0025                       ?_Motor_SetTargetAngle 0070  
                 __end_of_Symbol_Code_Array 080A                   __end_ofi1_Timer_SetTimeMS 06BC  
                              _Display_Init 0003                                ??_SSD_Update 002D  
                           __size_of___wmul 0023                                     ___lwmod 07AA  
                               _Speed_Level 0049                                     __ptext1 07FF  
                                   __ptext2 0D91                                     __ptext3 028C  
                                   __ptext4 0401                                     __ptext5 038A  
                                   __ptext6 00E9                                     __ptext7 07AA  
                                   __ptext8 0DAB                                     __ptext9 0DFF  
                   __size_of_Display_Update 0081                            _GPIO_GetPinState 030B  
                    __end_of_Timer_SetState 0E3D                   __size_of_GPIO_SetPinState 008E  
                       __size_of_Motor_Init 001C                                     clrloop0 0DA4  
               __end_of_Button_Minus_Update 067A                        end_of_initialization 0039  
                       __size_of_Timer_Init 001D                          __end_of_SSD_Update 05AC  
        __size_of_Motor_SoftSwitchingUpdate 0021                          _Button_Dust_Update 04B3  
                      GPIO_GetPinState@port 0028               __size_of_Timer_SetInterruptEn 001D  
                    i1Timer_SetTimeMS@timer 007A                     ??_TIME_WaitTimeSandwich 0026  
                       ?_Button_Dust_Update 0070                     Timer_SetTimeUS@count_no 0029  
                     i1___wmul@multiplicand 0072                  ??_Timer_ClearInterruptFlag 0024  
                                 _TIME_Init 0D91                         GPIO_SetPinState@pin 0024  
                     __size_of_GPIO_InitPin 00AC               Timer_ClearInterruptFlag@timer 0024  
                  _Timer_CheckInterruptFlag 0E54                  __size_of_GPIO_SetPortState 003E  
                     __size_of_LED_SetState 0014                                 _OutputAngle 004B  
                           ?_Timer_SetState 0024                 __size_of_Motor_OutputUpdate 0053  
                         ??_Timer_SetTimeMS 002C                           ??_Timer_SetTimeUS 0026  
                      ??_Button_Dust_Update 002A                                   _VC_Update 00E9  
                    ??_Motor_SetTargetAngle 0024                                   _OS_Update 0EFC  
       Button_Minus_Update@ButtonCurrSample 002C                       OS_Schedule@VC_Counter 0043  
                      __size_of_OS_Schedule 0077                             Timer_Init@timer 0026  
                         __size_of_LED_Init 001E                  __size_ofi1_Timer_SetTimeMS 0042  
                              _GPIO_InitPin 003D                           GPIO_InitPort@mask 0024  
                  __end_of_VC_GetSpeedLevel 0D91                           GPIO_InitPort@port 0027  
                           _Button_GetState 0DAB                        Timer_SetTimeMS@timer 002E  
                              _LED_SetState 0E12          Button_Dust_Update@ButtonCurrSample 002C  
                            __end_of___wmul 0F9F                                  ?_TIME_Init 0070  
                     Button_GetState@button 0024                 ?i1_Timer_ClearInterruptFlag 0070  
                              ?_Button_Init 0070                Display_Update@dust_bag_state 002E  
                         __size_of_SSD_Init 007F                        Timer_SetTimeUS@timer 0028  
                       start_initialization 0013                           __size_ofi1___wmul 0021  
          Motor_SetTargetAngle@target_angle 0025                       __end_of_SSD_SetSymbol 0DC0  
                               SSD_Init@ssd 002B                                  ?_VC_Update 0070  
                            _Harmonic_Angle 003F                                  ?_OS_Update 0070  
               ?_TIME_TriggerTimeSandwichUS 002B                      __size_of_Timer_SetMode 0021  
                       SSD_SetSymbol@symbol 0024                          Timer_SetMode@timer 0025  
               __end_of_TIME_TriggerDelayUS 0DDD                          _Button_Plus_Update 06BC  
                     __end_of_GPIO_InitPort 045D                __size_of_GPIO_TogglePinState 001F  
                              ??_Motor_Init 0029                      GPIO_TogglePinState@pin 002A  
                 _Dust_Button_Pressing_Time 0047                                    ??___wmul 0028  
                              ??_Timer_Init 0026                         ?_Button_Plus_Update 0070  
                               __pdataBANK0 0047                              _Display_Update 020B  
                           GPIO_InitPin@dir 0025                             GPIO_InitPin@pin 0024  
                   ?_Button_GetPressingTime 0024                                 __pbssCOMMON 007D  
                                 ___latbits 0002                               __pcstackBANK0 0020  
           i1Timer_ClearInterruptFlag@timer 0070                            _GPIO_SetPinState 017D  
                      ??_Button_Plus_Update 002A                      GPIO_SetPortState@state 0025  
                        __end_of_Motor_Init 0EA4                                    ?_VC_Init 0070  
                                  ?_OS_Init 0070                          __end_of_Timer_Init 0EC1  
                   __end_of_Button_GetState 0DB4                    __end_of_GPIO_GetPinState 038A  
                     __end_of_Button_Update 0DCE                                    ?___lwmod 002A  
                    __end_of_Display_Update 028C                                 ??_TIME_Init 0027  
                                 __pstrings 0800                               _Timer_SetMode 0F5B  
            __end_of_Button_GetPressingTime 0E12                          SSD_SetCtrlLine@ssd 002C  
                               ??_VC_Update 0030                                 ??_OS_Update 0020  
                         interrupt_function 0004                              ___wmul@product 0028  
                                  _LED_Init 0EDE                                   clear_ram0 0DA3  
       __size_ofi1_Timer_ClearInterruptFlag 0011             ??_Motor_HarmonicReductionUpdate 0024  
                  __size_of_VC_GetDustState 0004                                   _tick_flag 0046  
                  __size_of_SSD_SetCtrlLine 0037                       i1Timer_SetTimeMS@time 0076  
                ??_Timer_CheckInterruptFlag 0024                           Button_Init@button 002A  
                           ?_Display_Update 0070              __size_of_TIME_WaitTimeSandwich 0017  
                           _Timer_SetTimeMS 05F3                              ?_Timer_SetMode 0024  
                           _Timer_SetTimeUS 073B                                    _SSD_Init 028C  
             __end_of_TIME_WaitTimeSandwich 0E54                                _Target_Angle 007D  
                               __stringbase 0805                           ___wmul@multiplier 0024  
                                  i1___wmul 0F3A                            ??_Timer_SetState 0025  
                      __size_of_Button_Init 002F                        SSD_SetCtrlLine@state 0029  
              __end_of_Timer_SetInterruptEn 0EDE                            __size_of_VC_Init 0001  
                          __size_of_OS_Init 0032                  OS_Schedule@Display_Counter 0044  
              __size_of_Button_Minus_Update 0043                            ?_Button_GetState 0070  
      GPIO_TogglePinState@current_pin_state 002D                           ?_VC_GetSpeedLevel 0070  
                           LED_SetState@led 002B                            __size_of___lwmod 0034  
                        ??_VC_GetSpeedLevel 0024                          __end_of__stringtab 0806  
                     GPIO_SetPortState@mask 0024                       GPIO_SetPortState@port 0027  
                          SSD_SetSymbol@ssd 0026                  __end_of_Motor_OutputUpdate 055B  
                       _GPIO_TogglePinState 0F1B                                    __ptext10 055B  
                                  __ptext11 0773                                    __ptext20 0DEE  
                                  __ptext12 06FD                                    __ptext21 05AC  
                                  __ptext13 07DE                                    __ptext30 0637  
                                  __ptext22 0F1B                                    __ptext14 0508  
                                  __ptext31 04B3                                    __ptext23 020B  
                                  __ptext15 0DCE                                    __ptext40 0E88  
                                  __ptext32 030B                                    __ptext24 0D8D  
                                  __ptext16 0E3D                                    __ptext41 0D9B  
                                  __ptext33 0FCE                                    __ptext25 0D89  
                                  __ptext17 0E54                                    __ptext50 0DDD  
                                  __ptext42 0EDE                                    __ptext34 05F3  
                                  __ptext26 0DB4                                    __ptext18 0E6D  
                                  __ptext43 017D                                    __ptext35 0F7C  
                                  __ptext27 0E12                                    __ptext19 073B  
                                  __ptext44 0003                                    __ptext36 0E26  
                                  __ptext28 0DC0                                    __ptext45 0F9F  
                                  __ptext37 0EC1                                    __ptext29 06BC  
                                  __ptext46 003D                                    __ptext38 0EA4  
                                  __ptext47 0EFC                                    __ptext39 0F5B  
                                  __ptext48 067A                                    __ptext49 0F3A  
         __size_of_Timer_ClearInterruptFlag 0011                 __size_of_Button_Dust_Update 0055  
                 ?_Timer_ClearInterruptFlag 0070                               ??_OS_Schedule 0033  
             __size_of_Motor_SetTargetAngle 0008                               __size_of_main 0056  
                      ?_GPIO_TogglePinState 002A                     __end_of_Timer_SetTimeMS 0637  
                   __end_of_Timer_SetTimeUS 0773                  ?_Motor_SoftSwitchingUpdate 0070  
                  __end_of_GPIO_SetPinState 020B       __end_of_Motor_HarmonicReductionUpdate 05F3  
    __size_of_Motor_HarmonicReductionUpdate 0047               _Motor_HarmonicReductionUpdate 05AC  
                           ??_Timer_SetMode 0025                           ??_VC_GetDustState 0024  
                         ??_SSD_SetCtrlLine 002A                                    intlevel1 0000  
                          ___lwmod@dividend 002C              Motor_Init@initial_target_angle 0029  
                     ??_GPIO_TogglePinState 002B                                   stringcode 0800  
                       __end_of_OS_Schedule 0401                               ?_Display_Init 0070  
                     GPIO_GetPinState@state 0029                       GPIO_SetPinState@state 0025  
         __end_of_Motor_SoftSwitchingUpdate 07FF                           ?_GPIO_GetPinState 0024  
                       Display_Update@speed 002D                        _Timer_SetInterruptEn 0EC1  
                    __size_of_SSD_SetSymbol 000C                __size_of_TIME_TriggerDelayUS 000F  
                        ??_GPIO_GetPinState 0025  OS_Schedule@Motor_HarmonicReduction_Counter 0041  
                           ___lwmod@divisor 002A                             ___lwmod@counter 002F  
                                  stringdir 0800                                    stringtab 0800  
                      GPIO_SetPinState@port 0028                      __size_of_GPIO_InitPort 005C  
                       _Current_Motor_State 0040                 __size_of_Button_Plus_Update 0041  
                          ??_Display_Update 002C                              ??_Display_Init 0024  
